fix(bb.df_tall)
bb.df_tall$objectType = rep(c("B","C","A","B","C"), times = 31)
bb.df_tall$trialType = rep(c("experimental","experimental","control",
"control","control"), times = 31)
bb.df_tall$objectType = factor(bb.df_tall$objectType)
bb.df_tall$trialType = factor(bb.df_tall$trialType)
fix(bb.df_tall)
names(bb.df_tall)
fix(bb.df_tall)
bb_condition_only_glmer = glmer(choice~(objectType+trialType)^2+(1|ID), family=binomial,
data=bb.df_tall)
anova(bb_condition_only_glmer)
Anova(bb_condition_only_glmer)
library(nlme)
library(lme4)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(openxlsx)
library(BFpack)
# DATA CLEAN UP AND RESTRUCTURING #
# load: newData03202023.csv
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
# remove unnecessary columns
names(D)
D$CTRL_1__E = NULL
D$CTRL_2__E = NULL
names(D)
dim(D)
D_tall =  reshape(D, varying = c(10:23), v.names = "measure",
timevar = "condition",   direction = "long")
D_tall = D_tall[order(D_tall$ID),] # order the data frame in terms of participant ID;
# to avoid wonky things happening and to save yourself
# a full-day headache in the future, reorder by ID
# immediately after reshaping the dataframe.
names(D_tall)
D_tall$id = NULL
names(D_tall)
D_tall$trialType = rep(c("control","control","control","control","control","control","control",
"control","experimental","experimental",
"experimental","experimental","experimental","experimental"), times = 64)
D_tall$testPhase = rep(c("first","first","first","first","second","second","second","second",
"first","first","first","second","second","second"), times = 64)
D_tall$objectType = rep(c("A","B","C","D",
"A","B","C","D",
"A","B","C",
"A","B","C"), times = 64)
D_tall$phaseOrder = rep(c("Phase 1","Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2","Phase 2",
"Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2"), times = 64)
# CHANGE SOME OF THE COLUMN NAMES
names(D_tall)
colnames(D_tall)[which(names(D_tall) == "AGE.Y.")] <- "Age"
colnames(D_tall)[which(names(D_tall) == "SEX")] <- "Sex"
colnames(D_tall)[which(names(D_tall) == "BB.IS")] <- "Condition"
colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "SubCondition"
colnames(D_tall)[which(names(D_tall) == "VIDORDER")] <- "Vidorder"
colnames(D_tall)[which(names(D_tall) == "PRETEST")] <- "Pretest"
colnames(D_tall)[which(names(D_tall) == "measure")] <- "choice"
# remove more unnecessary columns
names(D_tall)
D_tall$CONDITION = NULL
# colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "Subcondition"
names(D_tall)
# MODIFY CHOICES COLUMN
# Deal with "unsures" in the choice column
D_tall$choices = rep(0, nrow(D_tall))
for(i in 1:nrow(D_tall)){
if(is.na(D_tall$choice[i])==T|D_tall$choice[i]=="NaN"){
D_tall$choices[i]= NA
} else if(D_tall$choice[i]==1){
D_tall$choices[i]=1
} else if(D_tall$choice[i]==0){
D_tall$choices[i]=0
} else if(D_tall$choice[i]==2) {
D_tall$choices[i]=0
}
else {
D_tall$choices[i]=NA
}
}
D_tall$choice = D_tall$choices
D_tall$choices = NULL
D_tall$choice = as.numeric(D_tall$choice)
# get counts for choice
table(D_tall$choice)
# RENAME LEVELS OF COLUMNS
D_tall$Condition = revalue(x = as.factor(D_tall$Condition),
c("0" = "Backwards Blocking", "1"="Indirect Screening-Off"))
D_tall$Sex = revalue(x = as.factor(D_tall$Sex),
c("0" = "female", "1"="male"))
# D_tall$Subcondition = revalue(x = as.factor(D_tall$Subcondition),
#                     c("0" = "A", "1"="B", "2"="C", "3"="D"))
D_tall$Vidorder = revalue(x = as.factor(D_tall$Vidorder),
c("0" = "LtoR", "1"="RtoL"))
D_tall$Pretest = revalue(x = as.factor(D_tall$Pretest),
c("0" = "Incorrect", "1"="Correct"))
D_tall$Age = as.factor(D_tall$Age)
D_tall$testPhase = as.factor(D_tall$testPhase)
D_tall$objectType = as.factor(D_tall$objectType)
D_tall$trialType = as.factor(D_tall$trialType)
# REODRDER COLUMNS
D_tall$condition = NULL
names(D_tall)
dim(D_tall)
D_tall = as.data.frame(D_tall[,c(1:4,6:7,5,10:13,8:9)])
fix(D_tall)
bb.df = data.frame(ID = c(1:62), B_exp = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="B"],
C_exp = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="C"],
A_control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="A"],
B_control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="B"],
C_control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="C"])
bb.df_tall = reshape(bb.df, varying = c(2:6), v.names = "choice",
timevar = "condition",   direction = "long")
bb.df_tall = bb.df_tall[order(bb.df_tall$ID),]
bb.df_tall$objectType = rep(c("B","C","A","B","C"), times = 31)
bb.df_tall$trialType = rep(c("experimental","experimental","control",
"control","control"), times = 31)
bb.df_tall$objectType = factor(bb.df_tall$objectType)
bb.df_tall$trialType = factor(bb.df_tall$trialType)
bb_condition_only_glmer = glmer(choice~(objectType+trialType)^2+(1|ID), family=binomial,
data=bb.df_tall)
Anova(bb_condition_only_glmer)
options(scipen=999)
bb_condition_only_glmer = glmer(choice~(objectType+trialType)^2+(1|ID), family=binomial,
data=bb.df_tall)
Anova(bb_condition_only_glmer)
summary(bb_condition_only_glmer)
bb_condition_only_trial_type_glmer = glmer(choice~trialType+(1|ID), family=binomial,
data=bb.df_tall)
summary(bb_condition_only_trial_type_glmer)
exp(fixef(bb_condition_only_trial_type_glmer))
exp(confint(bb_condition_only_trial_type_glme, method = "profile"))
exp(confint(bb_condition_only_trial_type_glmer, method = "profile"))
length(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="experimental" & D_tall$objectType=="B"])
iso.df = data.frame(ID = c(1:66), B_exp = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="experimental" & D_tall$objectType=="B"],
C_exp = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="experimental" & D_tall$objectType=="C"],
A_control = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="A"],
B_control = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="B"],
C_control = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="C"])
iso.df_tall = reshape(iso.df, varying = c(2:6), v.names = "choice",
timevar = "condition",   direction = "long")
iso.df_tall = iso.df_tall[order(iso.df_tall$ID),]
iso.df_tall$objectType = rep(c("B","C","A","B","C"), times = 33)
iso.df_tall$trialType = rep(c("experimental","experimental","control",
"control","control"), times = 33)
iso.df_tall$objectType = factor(iso.df_tall$objectType)
iso.df_tall$trialType = factor(iso.df_tall$trialType)
# run model to test for main effects and two-way interactions
iso_condition_only_glmer = glmer(choice~(objectType+trialType)^2+(1|ID), family=binomial,
data=iso.df_tall)
Anova(iso_condition_only_glmer)
iso_condition_only_trial_type_glmer = glmer(choice~trialType+(1|ID), family=binomial,
data=iso.df_tall)
summary(iso_condition_only_trial_type_glmer)
exp(fixef(iso_condition_only_trial_type_glmer))
exp(confint(iso_condition_only_trial_type_glmer, method = "profile"))
exp(confint(iso_condition_only_trial_type_glmer, method = "Wald"))
library(nlme)
library(lme4)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(openxlsx)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
# load: newData03202023.csv
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
names(D)
# DATA CLEAN UP AND RESTRUCTURING #
# load: exp2data.csv
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
# get dimension of dataframe
dim(D)
# remove unnecessary rows
D = D[c(1:64),]
# reshape dataframe from wide to long
D_tall =  reshape(D, varying = c(11:26), v.names = "measure",
timevar = "condition",   direction = "long")
D_tall = D_tall[order(D_tall$ID),] # order the data frame in terms of participant ID;
# to avoid wonky things happening and to save yourself
# a full-day headache in the future, reorder by ID
# immediately after reshaping the dataframe.
names(D_tall)
D_tall$id = NULL
names(D_tall)
D_tall$trialType = rep(c("control","control","control","control","control","control","control",
"control","control", "control","experimental","experimental",
"experimental","experimental","experimental","experimental"), times =64)
D_tall$testPhase = rep(c("first","first","first","first","first",
"second","second","second","second","second",
"first","first","first","second","second","second"), times = 64)
D_tall$objectType = rep(c("A","B","C","D","E",
"A","B","C","D","E",
"A","B","C",
"A","B","C"), times = 64)
D_tall$phaseOrder = rep(c("Phase 1","Phase 1","Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2","Phase 2","Phase 2",
"Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2"), times = 64)
# CHANGE SOME OF THE COLUMN NAMES
names(D_tall)
colnames(D_tall)[which(names(D_tall) == "AGE.Y.")] <- "AgeCat"
colnames(D_tall)[which(names(D_tall) == "AGE.M.")] <- "AgeNum"
colnames(D_tall)[which(names(D_tall) == "RACE")] <- "Race"
colnames(D_tall)[which(names(D_tall) == "SEX")] <- "Sex"
colnames(D_tall)[which(names(D_tall) == "BB.IS")] <- "Condition"
colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "SubCondition"
colnames(D_tall)[which(names(D_tall) == "VIDORDER")] <- "Vidorder"
colnames(D_tall)[which(names(D_tall) == "PRETEST")] <- "Pretest"
colnames(D_tall)[which(names(D_tall) == "measure")] <- "choice"
# remove more unnecessary columns
names(D_tall)
D_tall$CONDITION = NULL
D_tall$condition = NULL
# colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "Subcondition"
names(D_tall)
# get counts for choice
table(D_tall$choice)
# RENAME LEVELS OF COLUMNS
D_tall$Condition = revalue(x = as.factor(D_tall$Condition),
c("0" = "Backwards Blocking", "1"="Indirect Screening-Off"))
D_tall$Sex = revalue(x = as.factor(D_tall$Sex),
c("F" = "Female", "M"="Male"))
# D_tall$Subcondition = revalue(x = as.factor(D_tall$Subcondition),
#                     c("0" = "A", "1"="B", "2"="C", "3"="D"))
D_tall$Vidorder = revalue(x = as.factor(D_tall$Vidorder),
c("0" = "LtoR", "1"="RtoL"))
D_tall$Pretest = revalue(x = as.factor(D_tall$Pretest),
c("0" = "Incorrect", "1"="Correct"))
D_tall$AgeCat = as.factor(D_tall$AgeCat)
D_tall$testPhase = as.factor(D_tall$testPhase)
D_tall$objectType = as.factor(D_tall$objectType)
D_tall$trialType = as.factor(D_tall$trialType)
D_tall$choice = as.numeric(D_tall$choice)
# REODRDER COLUMNS
names(D_tall)
D_tall$condition = NULL
names(D_tall)
dim(D_tall)
D_tall = as.data.frame(D_tall[,c(1:3,5,4,7,8,6,11:14,10,9)])
fix(D_tall)
table(D_tall$Condition)/16
glmer.fit = glmer(choice~(AgeNum+Condition+trialType+phaseOrder+objectType)^5+(1|ID), family=binomial,
data=D_tall,
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e3)))
Anova(glmer.fit)
glmer.fit = glmer(choice~trialType+(1|ID), family=binomial,
data=D_tall,
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e3)))
Anova(glmer.fit)
summary(glmer.fit)
glmer.fit = glmer(choice~(AgeNum+Condition+trialType+phaseOrder+objectType)^5+(1|ID), family=binomial,
data=D_tall,
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e3)))
Anova(glmer.fit)
summary(bb.glmer)
bb.glmer = glmer(choice~trialType+(1|ID), family=binomial,
data=D_tall)
Anova(bb.glmer)
summary(bb.glmer)
exp(fixef(bb.glmer))
bb.CIs = exp(confint(bb.glmer, method = "profile"))
bb.CIs
length(D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="B"])
bb.df = data.frame(ID = c(1:64), C_exp = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="C"],
A_control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="A"],
B_control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="B"],
C_control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="C"])
dim(bb.df)
bb.df_tall = reshape(bb.df, varying = c(2:5), v.names = "choice",
timevar = "condition",   direction = "long")
bb.df_tall = bb.df_tall[order(bb.df_tall$ID),]
bb.df_tall$objectType = rep(c("C","A","B","C"), times = 32)
bb.df_tall$trialType = rep(c("experimental","control",
"control","control"), times = 32)
bb.df_tall$objectType = factor(bb.df_tall$objectType)
bb.df_tall$trialType = factor(bb.df_tall$trialType)
bb_condition_only_glmer = glmer(choice~(objectType+trialType)^2+(1|ID), family=binomial,
data=bb.df_tall)
Anova(bb_condition_only_glmer)
names(bb.df_tall)
fix(bb.df_tall)
Anova(glm(choice~(objectType+trialType)^2, family=binomial,
data=bb.df_tall))
iso.df = data.frame(ID = c(1:64),
C_exp = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="experimental" & D_tall$objectType=="C"],
A_control = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="A"],
B_control = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="B"],
C_control = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="C"])
iso.df_tall = reshape(iso.df, varying = c(2:5), v.names = "choice",
timevar = "condition",   direction = "long")
iso.df_tall = iso.df_tall[order(iso.df_tall$ID),]
iso.df_tall$objectType = rep(c("C","A","B","C"), times = 32)
iso.df_tall$trialType = rep(c("experimental","control",
"control","control"), times = 32)
iso.df_tall$objectType = factor(iso.df_tall$objectType)
iso.df_tall$trialType = factor(iso.df_tall$trialType)
iso_condition_only_glmer = glmer(choice~(objectType+trialType)^2+(1|ID), family=binomial,
data=iso.df_tall)
Anova(iso_condition_only_glmer)
# DATA CLEAN UP AND RESTRUCTURING #
# load: newData03202023.csv
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
# remove unnecessary columns
names(D)
D$CTRL_1__E = NULL
D$CTRL_2__E = NULL
names(D)
dim(D)
D_tall =  reshape(D, varying = c(10:23), v.names = "measure",
timevar = "condition",   direction = "long")
D_tall = D_tall[order(D_tall$ID),] # order the data frame in terms of participant ID;
# to avoid wonky things happening and to save yourself
# a full-day headache in the future, reorder by ID
# immediately after reshaping the dataframe.
names(D_tall)
D_tall$id = NULL
names(D_tall)
D_tall$trialType = rep(c("control","control","control","control","control","control","control",
"control","experimental","experimental",
"experimental","experimental","experimental","experimental"), times = 64)
D_tall$testPhase = rep(c("first","first","first","first","second","second","second","second",
"first","first","first","second","second","second"), times = 64)
D_tall$objectType = rep(c("A","B","C","D",
"A","B","C","D",
"A","B","C",
"A","B","C"), times = 64)
D_tall$phaseOrder = rep(c("Phase 1","Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2","Phase 2",
"Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2"), times = 64)
# CHANGE SOME OF THE COLUMN NAMES
names(D_tall)
colnames(D_tall)[which(names(D_tall) == "AGE.Y.")] <- "Age"
colnames(D_tall)[which(names(D_tall) == "SEX")] <- "Sex"
colnames(D_tall)[which(names(D_tall) == "BB.IS")] <- "Condition"
colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "SubCondition"
colnames(D_tall)[which(names(D_tall) == "VIDORDER")] <- "Vidorder"
colnames(D_tall)[which(names(D_tall) == "PRETEST")] <- "Pretest"
colnames(D_tall)[which(names(D_tall) == "measure")] <- "choice"
# remove more unnecessary columns
names(D_tall)
D_tall$CONDITION = NULL
# colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "Subcondition"
names(D_tall)
# MODIFY CHOICES COLUMN
# Deal with "unsures" in the choice column
D_tall$choices = rep(0, nrow(D_tall))
for(i in 1:nrow(D_tall)){
if(is.na(D_tall$choice[i])==T|D_tall$choice[i]=="NaN"){
D_tall$choices[i]= NA
} else if(D_tall$choice[i]==1){
D_tall$choices[i]=1
} else if(D_tall$choice[i]==0){
D_tall$choices[i]=0
} else if(D_tall$choice[i]==2) {
D_tall$choices[i]=0
}
else {
D_tall$choices[i]=NA
}
}
D_tall$choice = D_tall$choices
D_tall$choices = NULL
D_tall$choice = as.numeric(D_tall$choice)
# get counts for choice
table(D_tall$choice)
# RENAME LEVELS OF COLUMNS
D_tall$Condition = revalue(x = as.factor(D_tall$Condition),
c("0" = "Backwards Blocking", "1"="Indirect Screening-Off"))
# load all relevant libraries
library(nlme)
library(lme4)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(openxlsx)
library(BFpack)
# remove unnecessary columns
names(D)
D$CTRL_1__E = NULL
D$CTRL_2__E = NULL
names(D)
dim(D)
D_tall =  reshape(D, varying = c(10:23), v.names = "measure",
timevar = "condition",   direction = "long")
D_tall = D_tall[order(D_tall$ID),] # order the data frame in terms of participant ID;
# to avoid wonky things happening and to save yourself
# a full-day headache in the future, reorder by ID
# immediately after reshaping the dataframe.
names(D_tall)
D_tall$id = NULL
names(D_tall)
D_tall$trialType = rep(c("control","control","control","control","control","control","control",
"control","experimental","experimental",
"experimental","experimental","experimental","experimental"), times = 64)
D_tall$testPhase = rep(c("first","first","first","first","second","second","second","second",
"first","first","first","second","second","second"), times = 64)
D_tall$objectType = rep(c("A","B","C","D",
"A","B","C","D",
"A","B","C",
"A","B","C"), times = 64)
D_tall$phaseOrder = rep(c("Phase 1","Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2","Phase 2",
"Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2"), times = 64)
# CHANGE SOME OF THE COLUMN NAMES
names(D_tall)
colnames(D_tall)[which(names(D_tall) == "AGE.Y.")] <- "Age"
colnames(D_tall)[which(names(D_tall) == "SEX")] <- "Sex"
colnames(D_tall)[which(names(D_tall) == "BB.IS")] <- "Condition"
colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "SubCondition"
colnames(D_tall)[which(names(D_tall) == "VIDORDER")] <- "Vidorder"
colnames(D_tall)[which(names(D_tall) == "PRETEST")] <- "Pretest"
colnames(D_tall)[which(names(D_tall) == "measure")] <- "choice"
# remove more unnecessary columns
names(D_tall)
D_tall$CONDITION = NULL
# colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "Subcondition"
names(D_tall)
# MODIFY CHOICES COLUMN
# Deal with "unsures" in the choice column
D_tall$choices = rep(0, nrow(D_tall))
for(i in 1:nrow(D_tall)){
if(is.na(D_tall$choice[i])==T|D_tall$choice[i]=="NaN"){
D_tall$choices[i]= NA
} else if(D_tall$choice[i]==1){
D_tall$choices[i]=1
} else if(D_tall$choice[i]==0){
D_tall$choices[i]=0
} else if(D_tall$choice[i]==2) {
D_tall$choices[i]=0
}
else {
D_tall$choices[i]=NA
}
}
D_tall$choice = D_tall$choices
D_tall$choices = NULL
D_tall$choice = as.numeric(D_tall$choice)
# get counts for choice
table(D_tall$choice)
# RENAME LEVELS OF COLUMNS
D_tall$Condition = revalue(x = as.factor(D_tall$Condition),
c("0" = "Backwards Blocking", "1"="Indirect Screening-Off"))
D_tall$Sex = revalue(x = as.factor(D_tall$Sex),
c("0" = "female", "1"="male"))
# D_tall$Subcondition = revalue(x = as.factor(D_tall$Subcondition),
#                     c("0" = "A", "1"="B", "2"="C", "3"="D"))
D_tall$Vidorder = revalue(x = as.factor(D_tall$Vidorder),
c("0" = "LtoR", "1"="RtoL"))
D_tall$Pretest = revalue(x = as.factor(D_tall$Pretest),
c("0" = "Incorrect", "1"="Correct"))
D_tall$Age = as.factor(D_tall$Age)
D_tall$testPhase = as.factor(D_tall$testPhase)
D_tall$objectType = as.factor(D_tall$objectType)
D_tall$trialType = as.factor(D_tall$trialType)
# REODRDER COLUMNS
D_tall$condition = NULL
names(D_tall)
dim(D_tall)
D_tall = as.data.frame(D_tall[,c(1:4,6:7,5,10:13,8:9)])
fix(D_tall)
condition_barplot = ggplot(D_tall, aes(trialType, choice, fill = objectType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969")) +
coord_cartesian(ylim=c(0, 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_blank()) +
ylab("# of questions children judged object was a blicket")
