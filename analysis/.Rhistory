D_tall$choices[i]=0
} else if(D_tall$choice[i]==2) {
D_tall$choices[i]=0
}
else {
D_tall$choices[i]=NA
}
}
D_tall$choice = D_tall$choices
D_tall$choices = NULL
D_tall$choice = as.numeric(D_tall$choice)
# get counts for choice
table(D_tall$choice)
# RENAME LEVELS OF COLUMNS
D_tall$Condition = revalue(x = as.factor(D_tall$Condition),
c("0" = "Backwards Blocking", "1"="Indirect Screening-Off"))
D_tall$Sex = revalue(x = as.factor(D_tall$Sex),
c("0" = "female", "1"="male"))
# D_tall$Subcondition = revalue(x = as.factor(D_tall$Subcondition),
#                     c("0" = "A", "1"="B", "2"="C", "3"="D"))
D_tall$Vidorder = revalue(x = as.factor(D_tall$Vidorder),
c("0" = "LtoR", "1"="RtoL"))
D_tall$Pretest = revalue(x = as.factor(D_tall$Pretest),
c("0" = "Incorrect", "1"="Correct"))
D_tall$Age = as.factor(D_tall$Age)
D_tall$testPhase = as.factor(D_tall$testPhase)
D_tall$objectType = as.factor(D_tall$objectType)
D_tall$trialType = as.factor(D_tall$trialType)
# REODRDER COLUMNS
D_tall$condition = NULL
names(D_tall)
dim(D_tall)
D_tall = as.data.frame(D_tall[,c(1:4,6:7,5,10:13,8:9)])
fix(D_tall)
lmer.fit = lmer(choice~(AgeNum+Condition+trialType+phaseOrder+objectType)^5+(1|ID),
data=D_tall)
Anova(lmer.fit)
ggplot(D_tall, aes(x = AgeNum, y = choice, color = objectType)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ Condition)
threeway_plot_func = function(x){
D_tall$objectType = relevel(D_tall$objectType, ref = x)
ggplot(D_tall, aes(x = AgeNum, y = choice, color = objectType)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ Condition)
}
threeway_plot_func("B")
refLevFunc = function(object,condition){
D_tall$objectType = relevel(D_tall$objectType, ref = object)
first.three.way.BB.lmer = lmer(choice~(AgeNum+objectType)^3+(1|ID),
data=D_tall[D_tall$Condition==condition,])
print(summary(first.three.way.BB.lmer))
}
refLevFun("B","Backwards Blocking")
refLevFunc = function(object,condition){
D_tall$objectType = relevel(D_tall$objectType, ref = object)
first.three.way.BB.lmer = lmer(choice~(AgeNum+objectType)^3+(1|ID),
data=D_tall[D_tall$Condition==condition,])
print(summary(first.three.way.BB.lmer))
}
refLevFun("B","Backwards Blocking")
refLevFunc = function(object,condition){
D_tall$objectType = relevel(D_tall$objectType, ref = object)
first.three.way.BB.lmer = lmer(choice~(AgeNum+objectType)^3+(1|ID),
data=D_tall[D_tall$Condition==condition,])
print(summary(first.three.way.BB.lmer))
}
refLevFunc("B","Backwards Blocking")
# helper functions #
refLevFunc = function(object,condition){
D_tall$objectType = relevel(D_tall$objectType, ref = object)
lmer.fit = lmer(choice~(AgeNum+objectType)^3+(1|ID),
data=D_tall[D_tall$Condition==condition,])
coefs = data.frame(coef(summary(lmer.fit)))
coefs$p.z <- 2 * (1 - pnorm(abs(coefs$t.value))) # a column where the p-value is computed from the z-distribution
coefs
print(summary(lmer.fit))
}
refLevFunc("B","Backwards Blocking")
refLevFunc = function(object,condition){
D_tall$objectType = relevel(D_tall$objectType, ref = object)
lmer.fit = lmer(choice~(AgeNum+objectType)^3+(1|ID),
data=D_tall[D_tall$Condition==condition,])
coefs = data.frame(coef(summary(lmer.fit)))
coefs$p.z <- 2 * (1 - pnorm(abs(coefs$t.value))) # a column where the p-value is computed from the z-distribution
print(coefs)
print(summary(lmer.fit))
}
refLevFunc("B","Backwards Blocking")
refLevFunc("C","Backwards Blocking")
get_init_priors = function(L, p) {
mod_priors = c()
for (model in L) {
prior_prob = 1
for (spec in model) {
prior_prob = prior_prob*((1-p)^(1-spec))*(p^spec)
}
mod_priors = c(mod_priors, prior_prob)
}
return(mod_priors)
}
get_likelihoods = function(L, event) {
placements = event[1:length(event)-1]
outcome = event[length(event)]
likelihoods = c()
for (model in L) {
activation = 0
for (i in 1:length(placements)) {
if (placements[i]==1 & model[i]==1) {
activation = 1
}
}
likelihoods = c(likelihoods, activation==outcome)
}
return(likelihoods)
}
compute_two_posts = function(L, priors, event1, event2) {
likelihoods1 = get_likelihoods(L, event1)
likelihoods2 = get_likelihoods(L, event2)
numerators = likelihoods1*likelihoods2*priors
norm_term = sum(numerators)
return(numerators/norm_term)
}
get_blicket_probs = function(L, posts) {
blicket_probs = c()
for (i in 1:length(L[[1]])) {
prob = 0
for (j in 1:length(L)) {
prob = prob + L[[j]][i]*posts[j]
}
blicket_probs = c(blicket_probs, prob)
}
return(blicket_probs)
}
MyIntToBit = function(x, dig) {
i <- 0L
string <- numeric(dig)
while (x > 0) {
string[dig - i] <- x %% 2L
x <- x %/% 2L
i <- i + 1L
}
string
}
get_model_list = function(num_blickets) {
return(lapply(0:(2^num_blickets - 1), function(x) MyIntToBit(x, num_blickets)))
}
bayes_model_func = function(x,prob,event1,event2){
L = get_model_list(x) # x is the number of candidate causes
priors = get_init_priors(L, prob) # prob = probability that an object is a blicket
event1 = event1 #event1/event2 are lists, in which the first n elements correspond to the # of candidate causes and teh last element corresponds to
# whether the machine activates
event2 = event2
posts = compute_two_posts(L, priors, event1, event2)
blicket_probs = get_blicket_probs(L, posts)
print(blicket_probs)
}
bayes_model_func(x=3,0.5,event1=c(1,1,1,1),event2=c(1,0,0,1))
bayes_model_func(x=2,0.001,event1=c(1,1,1),event2=c(1,0,1))
refLevFunc("C","Backwards Blocking")
refLevFunc("B","Backwards Blocking")
refLevFunc("A","Backwards Blocking")
refLevFunc("D","Backwards Blocking")
refLevFunc("C","Backwards Blocking")
refLevFunc("B","Backwards Blocking")
refLevFunc("A","Backwards Blocking")
refLevFunc("B","Backwards Blocking")
refLevFunc("C","Backwards Blocking")
fix(D)
fix(D_tall)
refLevFunc("A","Indirect Screening-Off")
refLevFunc("B","Indirect Screening-Off")
refLevFunc("C","Indirect Screening-Off")
first.three.way.BB.lmer = lmer(choice~(AgeNum+objectType)^3+(1|ID),
data=D_tall[D_tall$Condition=="Backwards Blocking",])
summary(first.three.way.BB.lmer)
Anova(first.three.way.BB.lmer)
first.three.way.ISO.lmer = lmer(choice~(AgeNum+objectType)^3+(1|ID),
data=D_tall[D_tall$Condition=="Indirect Screening-Off",])
summary(first.three.way.ISO.lmer)
Anova(first.three.way.ISO.lmer)
# get p.value for first.three.way.BB.lmer
coefs = data.frame(coef(summary(first.three.way.BB.lmer)))
coefs$p.z <- 2 * (1 - pnorm(abs(coefs$t.value))) # a column where the p-value is computed from the z-distribution
coefs
fix(D)
fix(D_tall)
## BB EXPERIMENTAL CONDITION ##
bb.experimental.lmer = lmer(choice~objectType+(1|ID), data=D_tall[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental",])
Anova(bb.experimental.lmer)
# helper functions #
refLevFunc = function(object,condition){
D_tall$objectType = relevel(D_tall$objectType, ref = object)
lmer.fit = lmer(choice~(AgeNum+objectType)^3+(1|ID),
data=D_tall[D_tall$Condition==condition,])
coefs = data.frame(coef(summary(lmer.fit)))
coefs$p.z <- 2 * (1 - pnorm(abs(coefs$t.value))) # a column where the p-value is computed from the z-distribution
print(coefs)
print(summary(lmer.fit))
}
library(nlme)
library(lme4)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(openxlsx)
library(BFpack)
# load data
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
# DATA CLEAN UP AND RESTRUCTURING #
# load: newData03202023.csv
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
# remove unnecessary columns
names(D)
D$CTRL_1__E = NULL
D$CTRL_2__E = NULL
names(D)
dim(D)
D_tall =  reshape(D, varying = c(10:23), v.names = "measure",
timevar = "condition",   direction = "long")
D_tall = D_tall[order(D_tall$ID),] # order the data frame in terms of participant ID;
# to avoid wonky things happening and to save yourself
# a full-day headache in the future, reorder by ID
# immediately after reshaping the dataframe.
names(D_tall)
D_tall$id = NULL
names(D_tall)
D_tall$trialType = rep(c("control","control","control","control","control","control","control",
"control","experimental","experimental",
"experimental","experimental","experimental","experimental"), times = 64)
D_tall$testPhase = rep(c("first","first","first","first","second","second","second","second",
"first","first","first","second","second","second"), times = 64)
D_tall$objectType = rep(c("A","B","C","D",
"A","B","C","D",
"A","B","C",
"A","B","C"), times = 64)
D_tall$phaseOrder = rep(c("Phase 1","Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2","Phase 2",
"Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2"), times = 64)
# CHANGE SOME OF THE COLUMN NAMES
names(D_tall)
colnames(D_tall)[which(names(D_tall) == "AGE.Y.")] <- "Age"
colnames(D_tall)[which(names(D_tall) == "SEX")] <- "Sex"
colnames(D_tall)[which(names(D_tall) == "BB.IS")] <- "Condition"
colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "SubCondition"
colnames(D_tall)[which(names(D_tall) == "VIDORDER")] <- "Vidorder"
colnames(D_tall)[which(names(D_tall) == "PRETEST")] <- "Pretest"
colnames(D_tall)[which(names(D_tall) == "measure")] <- "choice"
# remove more unnecessary columns
names(D_tall)
D_tall$CONDITION = NULL
# colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "Subcondition"
names(D_tall)
# MODIFY CHOICES COLUMN
# Deal with "unsures" in the choice column
D_tall$choices = rep(0, nrow(D_tall))
for(i in 1:nrow(D_tall)){
if(is.na(D_tall$choice[i])==T|D_tall$choice[i]=="NaN"){
D_tall$choices[i]= NA
} else if(D_tall$choice[i]==1){
D_tall$choices[i]=1
} else if(D_tall$choice[i]==0){
D_tall$choices[i]=0
} else if(D_tall$choice[i]==2) {
D_tall$choices[i]=0
}
else {
D_tall$choices[i]=NA
}
}
D_tall$choice = D_tall$choices
D_tall$choices = NULL
D_tall$choice = as.numeric(D_tall$choice)
# get counts for choice
table(D_tall$choice)
# RENAME LEVELS OF COLUMNS
D_tall$Condition = revalue(x = as.factor(D_tall$Condition),
c("0" = "Backwards Blocking", "1"="Indirect Screening-Off"))
D_tall$Sex = revalue(x = as.factor(D_tall$Sex),
c("0" = "female", "1"="male"))
# D_tall$Subcondition = revalue(x = as.factor(D_tall$Subcondition),
#                     c("0" = "A", "1"="B", "2"="C", "3"="D"))
D_tall$Vidorder = revalue(x = as.factor(D_tall$Vidorder),
c("0" = "LtoR", "1"="RtoL"))
D_tall$Pretest = revalue(x = as.factor(D_tall$Pretest),
c("0" = "Incorrect", "1"="Correct"))
D_tall$Age = as.factor(D_tall$Age)
D_tall$testPhase = as.factor(D_tall$testPhase)
D_tall$objectType = as.factor(D_tall$objectType)
D_tall$trialType = as.factor(D_tall$trialType)
# REODRDER COLUMNS
D_tall$condition = NULL
names(D_tall)
dim(D_tall)
D_tall = as.data.frame(D_tall[,c(1:4,6:7,5,10:13,8:9)])
fix(D_tall)
bb.experimental.lmer = lmer(choice~(trialType+objectType)^2+(1|ID),
data=D_tall[D_tall$Condition=="Backwards Blocking"])
bb.experimental.lmer = lmer(choice~(trialType+objectType)^2+(1|ID),
data=D_tall[D_tall$Condition=="Backwards Blocking",])
Anova(bb.experimental.lmer)
options(scipen=999)
bb.experimental.lmer = lmer(choice~(trialType+objectType)^2+(1|ID),
data=D_tall[D_tall$Condition=="Backwards Blocking",])
Anova(bb.experimental.lmer)
iso.experimental.lmer = lmer(choice~(trialType+objectType)^2+(1|ID),
data=D_tall[D_tall$Condition=="Indirect Screening-Off",])
Anova(iso.experimental.lmer)
library(nlme)
library(lme4)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(BFpack)
# DATA CLEAN UP AND RESTRUCTURING #
# load: exp2data.csv
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
# get dimension of dataframe
dim(D)
# remove unnecessary rows
D = D[c(1:64),]
# reshape dataframe from wide to long
D_tall =  reshape(D, varying = c(11:26), v.names = "measure",
timevar = "condition",   direction = "long")
D_tall = D_tall[order(D_tall$ID),] # order the data frame in terms of participant ID;
# to avoid wonky things happening and to save yourself
# a full-day headache in the future, reorder by ID
# immediately after reshaping the dataframe.
names(D_tall)
D_tall$id = NULL
names(D_tall)
D_tall$trialType = rep(c("control","control","control","control","control","control","control",
"control","control", "control","main","main",
"main","main","main","main"), times =64)
D_tall$testPhase = rep(c("first","first","first","first","first",
"second","second","second","second","second",
"first","first","first","second","second","second"), times = 64)
D_tall$objectType = rep(c("A","B","C","D","E",
"A","B","C","D","E",
"A","B","C",
"A","B","C"), times = 64)
D_tall$phaseOrder = rep(c("Phase 1","Phase 1","Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2","Phase 2","Phase 2",
"Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2"), times = 64)
# CHANGE SOME OF THE COLUMN NAMES
names(D_tall)
colnames(D_tall)[which(names(D_tall) == "AGE.Y.")] <- "AgeCat"
colnames(D_tall)[which(names(D_tall) == "AGE.M.")] <- "AgeNum"
colnames(D_tall)[which(names(D_tall) == "RACE")] <- "Race"
colnames(D_tall)[which(names(D_tall) == "SEX")] <- "Sex"
colnames(D_tall)[which(names(D_tall) == "BB.IS")] <- "Condition"
colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "SubCondition"
colnames(D_tall)[which(names(D_tall) == "VIDORDER")] <- "Vidorder"
colnames(D_tall)[which(names(D_tall) == "PRETEST")] <- "Pretest"
colnames(D_tall)[which(names(D_tall) == "measure")] <- "choice"
# remove more unnecessary columns
names(D_tall)
D_tall$CONDITION = NULL
D_tall$condition = NULL
# colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "Subcondition"
names(D_tall)
# get counts for choice
table(D_tall$choice)
# RENAME LEVELS OF COLUMNS
D_tall$Condition = revalue(x = as.factor(D_tall$Condition),
c("0" = "Backwards Blocking", "1"="Indirect Screening-Off"))
D_tall$Sex = revalue(x = as.factor(D_tall$Sex),
c("F" = "Female", "M"="Male"))
# D_tall$Subcondition = revalue(x = as.factor(D_tall$Subcondition),
#                     c("0" = "A", "1"="B", "2"="C", "3"="D"))
D_tall$Vidorder = revalue(x = as.factor(D_tall$Vidorder),
c("0" = "LtoR", "1"="RtoL"))
D_tall$Pretest = revalue(x = as.factor(D_tall$Pretest),
c("0" = "Incorrect", "1"="Correct"))
D_tall$AgeCat = as.factor(D_tall$AgeCat)
D_tall$testPhase = as.factor(D_tall$testPhase)
D_tall$objectType = as.factor(D_tall$objectType)
D_tall$trialType = as.factor(D_tall$trialType)
D_tall$choice = as.numeric(D_tall$choice)
# REODRDER COLUMNS
names(D_tall)
D_tall$condition = NULL
names(D_tall)
dim(D_tall)
D_tall = as.data.frame(D_tall[,c(1:3,5,4,7,8,6,11:14,10,9)])
fix(D_tall)
dim(D)
# remove unnecessary rows
D = D[c(1:64),]
# reshape dataframe from wide to long
D_tall =  reshape(D, varying = c(11:26), v.names = "measure",
timevar = "condition",   direction = "long")
D_tall = D_tall[order(D_tall$ID),] # order the data frame in terms of participant ID;
# to avoid wonky things happening and to save yourself
# a full-day headache in the future, reorder by ID
# immediately after reshaping the dataframe.
names(D_tall)
D_tall$id = NULL
names(D_tall)
D_tall$trialType = rep(c("control","control","control","control","control","control","control",
"control","control", "control","experimental","experimental",
"experimental","experimental","experimental","experimental"), times =64)
D_tall$testPhase = rep(c("first","first","first","first","first",
"second","second","second","second","second",
"first","first","first","second","second","second"), times = 64)
D_tall$objectType = rep(c("A","B","C","D","E",
"A","B","C","D","E",
"A","B","C",
"A","B","C"), times = 64)
D_tall$phaseOrder = rep(c("Phase 1","Phase 1","Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2","Phase 2","Phase 2",
"Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2"), times = 64)
# CHANGE SOME OF THE COLUMN NAMES
names(D_tall)
colnames(D_tall)[which(names(D_tall) == "AGE.Y.")] <- "AgeCat"
colnames(D_tall)[which(names(D_tall) == "AGE.M.")] <- "AgeNum"
colnames(D_tall)[which(names(D_tall) == "RACE")] <- "Race"
colnames(D_tall)[which(names(D_tall) == "SEX")] <- "Sex"
colnames(D_tall)[which(names(D_tall) == "BB.IS")] <- "Condition"
colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "SubCondition"
colnames(D_tall)[which(names(D_tall) == "VIDORDER")] <- "Vidorder"
colnames(D_tall)[which(names(D_tall) == "PRETEST")] <- "Pretest"
colnames(D_tall)[which(names(D_tall) == "measure")] <- "choice"
# remove more unnecessary columns
names(D_tall)
D_tall$CONDITION = NULL
D_tall$condition = NULL
# colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "Subcondition"
names(D_tall)
# get counts for choice
table(D_tall$choice)
# RENAME LEVELS OF COLUMNS
D_tall$Condition = revalue(x = as.factor(D_tall$Condition),
c("0" = "Backwards Blocking", "1"="Indirect Screening-Off"))
D_tall$Sex = revalue(x = as.factor(D_tall$Sex),
c("F" = "Female", "M"="Male"))
# D_tall$Subcondition = revalue(x = as.factor(D_tall$Subcondition),
#                     c("0" = "A", "1"="B", "2"="C", "3"="D"))
D_tall$Vidorder = revalue(x = as.factor(D_tall$Vidorder),
c("0" = "LtoR", "1"="RtoL"))
D_tall$Pretest = revalue(x = as.factor(D_tall$Pretest),
c("0" = "Incorrect", "1"="Correct"))
D_tall$AgeCat = as.factor(D_tall$AgeCat)
D_tall$testPhase = as.factor(D_tall$testPhase)
D_tall$objectType = as.factor(D_tall$objectType)
D_tall$trialType = as.factor(D_tall$trialType)
D_tall$choice = as.numeric(D_tall$choice)
# REODRDER COLUMNS
names(D_tall)
D_tall$condition = NULL
names(D_tall)
dim(D_tall)
D_tall = as.data.frame(D_tall[,c(1:3,5,4,7,8,6,11:14,10,9)])
fix(D_tall)
##############
condition_barplot = ggplot(D_tall, aes(trialType, choice, fill = objectType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969",
"#A8A8A8")) +
coord_cartesian(ylim=c(0, 1.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_blank()) +
ylab("# of questions children judged object was a blicket")
condition_barplot = ggplot(D_tall, aes(trialType, choice, fill = objectType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969",
"#A8A8A8")) +
coord_cartesian(ylim=c(0, 1)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_blank()) +
ylab("# of questions children judged object was a blicket")
