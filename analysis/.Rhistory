glmer.boot = function(data, b, formula){
d = data[data$Condition == condition & data$trialType == trial_type,][b,]
dif.1 =  glmer(d[[y]] ~ d[[x]] + (1 | ID),
data = data[data$Condition == condition & data$trialType == trial_type,],
family = binomial)
return(exp(fixef(dif.1)))
}
glmer.Bootobj = boot(data, glmer.boot, R=500)
return(c(exp(glmer.Bootobj$t0[[1]]), exp(glmer.Bootobj$t0[[2]]),
exp(glmer.Bootobj$t0[[1]]) + 1.96 * c(-summary(glmer.Bootobj)$bootSE[[1]],
summary(glmer.Bootobj)$bootSE[[1]]),
exp(glmer.Bootobj$t0[[2]]) + 1.96 * c(-summary(glmer.Bootobj)$bootSE[[2]],
summary(glmer.Bootobj)$bootSE[[2]])))
}
# calling the function:
boot_func("choice", "objectType", D_tall, "Backwards Blocking", "experimental", D_tall[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental",])
boot_func = function(y,x, data, condition, trial_type, subset){
glmer.boot = function(data,b,formula){
d= data[b,]
dif.1 =  glmer(d[,y]~d[,x]+(1|ID), data=subset,
family=binomial)
return(exp(fixef(dif.1))) #return the fixed effects coefficients. Notice that you're returning the fixed effects
}
glmer.Bootobj = boot(data, glmer.boot, R=500)
return(c(exp(glmer.Bootobj$t0[[1]]), exp(glmer.Bootobj$t0[[2]]),
exp(glmer.Bootobj$t0[[1]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[1]],
summary(glmer.Bootobj)$bootSE[[1]]),
exp(glmer.Bootobj$t0[[2]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[2]],
summary(glmer.Bootobj)$bootSE[[2]])))
}
boot_func = function(x, y, data, condition, trial_type){
glmer.boot = function(data, b, formula){
d = data[data$Condition == condition & data$trialType == trial_type,][b,]
dif.1 =  glmer(d[[y]] ~ d[[x]] + (1 | ID),
data = data[data$Condition == condition & data$trialType == trial_type,],
family = binomial)
return(exp(fixef(dif.1)))
}
glmer.Bootobj = boot(data, glmer.boot, R=500)
return(c(exp(glmer.Bootobj$t0[[1]]), exp(glmer.Bootobj$t0[[2]]),
exp(glmer.Bootobj$t0[[1]]) + 1.96 * c(-summary(glmer.Bootobj)$bootSE[[1]],
summary(glmer.Bootobj)$bootSE[[1]]),
exp(glmer.Bootobj$t0[[2]]) + 1.96 * c(-summary(glmer.Bootobj)$bootSE[[2]],
summary(glmer.Bootobj)$bootSE[[2]])))
}
# calling the function:
boot_func("choice", "objectType", D_tall, "Backwards Blocking", "experimental", D_tall[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental",])
boot_func = function(y,x, data, subset){
glmer.boot = function(data,b,formula){
d= data[b,]
dif.1 =  glmer(d[,y]~d[,x]+(1|ID), data=subset,
family=binomial)
return(exp(fixef(dif.1))) #return the fixed effects coefficients. Notice that you're returning the fixed effects
}
glmer.Bootobj = boot(data, glmer.boot, R=500)
return(c(exp(glmer.Bootobj$t0[[1]]), exp(glmer.Bootobj$t0[[2]]),
exp(glmer.Bootobj$t0[[1]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[1]],
summary(glmer.Bootobj)$bootSE[[1]]),
exp(glmer.Bootobj$t0[[2]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[2]],
summary(glmer.Bootobj)$bootSE[[2]])))
}
boot_func = function(x, y, data, condition, trial_type){
glmer.boot = function(data, b, formula){
d = data[data$Condition == condition & data$trialType == trial_type,][b,]
dif.1 =  glmer(d[[y]] ~ d[[x]] + (1 | ID),
data = data[data$Condition == condition & data$trialType == trial_type,],
family = binomial)
return(exp(fixef(dif.1)))
}
glmer.Bootobj = boot(data, glmer.boot, R=500)
return(c(exp(glmer.Bootobj$t0[[1]]), exp(glmer.Bootobj$t0[[2]]),
exp(glmer.Bootobj$t0[[1]]) + 1.96 * c(-summary(glmer.Bootobj)$bootSE[[1]],
summary(glmer.Bootobj)$bootSE[[1]]),
exp(glmer.Bootobj$t0[[2]]) + 1.96 * c(-summary(glmer.Bootobj)$bootSE[[2]],
summary(glmer.Bootobj)$bootSE[[2]])))
}
# calling the function:
boot_func("choice", "objectType", D_tall, D_tall[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental",])
boot_func = function(y,x, data, condition, trial_type){
glmer.boot = function(data,b,formula){
d= data[b,]
dif.1 =  glmer(d[,y]~d[,x]+(1|ID), data=D_tall[D_tall$Condition==condition & D_tall$trialType==trial_type,],
family=binomial)
return(exp(fixef(dif.1))) #return the fixed effects coefficients. Notice that you're returning the fixed effects
}
glmer.Bootobj = boot(data, glmer.boot, R=500)
return(c(exp(glmer.Bootobj$t0[[1]]), exp(glmer.Bootobj$t0[[2]]),
exp(glmer.Bootobj$t0[[1]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[1]],
summary(glmer.Bootobj)$bootSE[[1]]),
exp(glmer.Bootobj$t0[[2]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[2]],
summary(glmer.Bootobj)$bootSE[[2]])))
}
boot_func = function(x, y, data, condition, trial_type){
glmer.boot = function(data, b, formula){
d = data[data$Condition == condition & data$trialType == trial_type,][b,]
dif.1 =  glmer(d[[y]] ~ d[[x]] + (1 | ID),
data = data[data$Condition == condition & data$trialType == trial_type,],
family = binomial)
return(exp(fixef(dif.1)))
}
glmer.Bootobj = boot(data, glmer.boot, R=500)
return(c(exp(glmer.Bootobj$t0[[1]]), exp(glmer.Bootobj$t0[[2]]),
exp(glmer.Bootobj$t0[[1]]) + 1.96 * c(-summary(glmer.Bootobj)$bootSE[[1]],
summary(glmer.Bootobj)$bootSE[[1]]),
exp(glmer.Bootobj$t0[[2]]) + 1.96 * c(-summary(glmer.Bootobj)$bootSE[[2]],
summary(glmer.Bootobj)$bootSE[[2]])))
}
# calling the function:
boot_func("choice", "objectType", D_tall, "Backwards Blocking", "experimental")
glmer(d[,"choice"]~d[,"objectType"]+(1|ID), data=D_tall[D_tall$Condition==condition & D_tall$trialType==trial_type,],
family=binomial)
glmer(D_tall[,"choice"]~D_tall[,"objectType"]+(1|ID), data=D_tall[D_tall$Condition==condition & D_tall$trialType==trial_type,],
family=binomial)
glmer(D_tall[,"choice"]~D_tall[,"objectType"]+(1|ID), data=D_tall[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental",],
family=binomial)
D_tall[,"choice"]
D_tall[,"objectType"]
D_tall[,"objectType"=="A"]
xdfds =  D_tall[,"objectType"=="A"]
xdfds
length(xdfds)
boot_func = function(y,x, data, condition, trial_type){
glmer.boot = function(data,b,formula){
d= data[b,]
dif.1 =  glmer(y~y+(1|ID), data=D_tall[D_tall$Condition==condition & D_tall$trialType==trial_type,],
family=binomial)
return(exp(fixef(dif.1))) #return the fixed effects coefficients. Notice that you're returning the fixed effects
}
glmer.Bootobj = boot(data, glmer.boot, R=500)
return(c(exp(glmer.Bootobj$t0[[1]]), exp(glmer.Bootobj$t0[[2]]),
exp(glmer.Bootobj$t0[[1]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[1]],
summary(glmer.Bootobj)$bootSE[[1]]),
exp(glmer.Bootobj$t0[[2]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[2]],
summary(glmer.Bootobj)$bootSE[[2]])))
}
boot_func("choice","objectType",D_tall,"Backwards Blocking","experimental")
boot_func = function(y,x, data, condition, trial_type){
glmer.boot = function(data,b,formula){
d= data[b,]
dif.1 =  glmer(y~y+(1|d$ID), data=D_tall[D_tall$Condition==condition & D_tall$trialType==trial_type,],
family=binomial)
return(exp(fixef(dif.1))) #return the fixed effects coefficients. Notice that you're returning the fixed effects
}
glmer.Bootobj = boot(data, glmer.boot, R=500)
return(c(exp(glmer.Bootobj$t0[[1]]), exp(glmer.Bootobj$t0[[2]]),
exp(glmer.Bootobj$t0[[1]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[1]],
summary(glmer.Bootobj)$bootSE[[1]]),
exp(glmer.Bootobj$t0[[2]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[2]],
summary(glmer.Bootobj)$bootSE[[2]])))
}
boot_func("choice","objectType",D_tall,"Backwards Blocking","experimental")
names(D)
boot_func = function(y,x, data, condition, trial_type){
glmer.boot = function(data,b,formula){
d= data[b,]
dif.1 =  glmer(y~x+(1|ID), family=binomial,
data=D_tall[D_tall$Condition==condition & D_tall$trialType==trial_type,])
return(exp(fixef(dif.1))) #return the fixed effects coefficients. Notice that you're returning the fixed effects
}
glmer.Bootobj = boot(data, glmer.boot, R=500)
return(c(exp(glmer.Bootobj$t0[[1]]), exp(glmer.Bootobj$t0[[2]]),
exp(glmer.Bootobj$t0[[1]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[1]],
summary(glmer.Bootobj)$bootSE[[1]]),
exp(glmer.Bootobj$t0[[2]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[2]],
summary(glmer.Bootobj)$bootSE[[2]])))
}
boot_func("choice","objectType",D_tall,"Backwards Blocking","experimental")
boot_func(D_tall$choice,D_tall$objectType,D_tall,"Backwards Blocking","experimental")
glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental",])
boot_func = function(y,x, data, condition, trial_type){
glmer.boot = function(data,b,formula){
d= data[b,]
dif.1 =  glmer(y~x+(1|ID), family=binomial,
data=d[d$Condition==condition & d$trialType==trial_type,])
return(exp(fixef(dif.1))) #return the fixed effects coefficients. Notice that you're returning the fixed effects
}
glmer.Bootobj = boot(data, glmer.boot, R=500)
return(c(exp(glmer.Bootobj$t0[[1]]), exp(glmer.Bootobj$t0[[2]]),
exp(glmer.Bootobj$t0[[1]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[1]],
summary(glmer.Bootobj)$bootSE[[1]]),
exp(glmer.Bootobj$t0[[2]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[2]],
summary(glmer.Bootobj)$bootSE[[2]])))
}
boot_func("choice","objectType",D_tall,"Backwards Blocking","control")
boot_func(choice,objectType,D_tall,"Backwards Blocking","control")
boot_func = function(y,x, data, condition, trial_type){
glmer.boot = function(data,b,formula){
d= data[b,]
dif.1 =  glmer(d[,y]~d[,x]+(1|ID), family=binomial,
data=d[d$Condition==condition & d$trialType==trial_type,])
return(exp(fixef(dif.1))) #return the fixed effects coefficients. Notice that you're returning the fixed effects
}
glmer.Bootobj = boot(data, glmer.boot, R=500)
return(c(exp(glmer.Bootobj$t0[[1]]), exp(glmer.Bootobj$t0[[2]]),
exp(glmer.Bootobj$t0[[1]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[1]],
summary(glmer.Bootobj)$bootSE[[1]]),
exp(glmer.Bootobj$t0[[2]])  + 1.96*c(-summary(glmer.Bootobj)$bootSE[[2]],
summary(glmer.Bootobj)$bootSE[[2]])))
}
boot_func(choice,objectType,D_tall,"Backwards Blocking","control")
boot_func("choice","objectType",D_tall,"Backwards Blocking","control")
exp(fixef(bb.experimental.glmer))
summary(bb.experimental.glmer)
exp(fixef(bb.experimental.glmer))(1+exp(fixef(bb.experimental.glmer)))
exp(fixef(bb.experimental.glmer))/(1+exp(fixef(bb.experimental.glmer)))
exp(fixef(bb.experimental.glmer))[2]
exp(fixef(bb.experimental.glmer))[2]/(1+exp(fixef(bb.experimental.glmer))[2])
exp(fixef(bb.experimental.glmer))[[2]]/(1+exp(fixef(bb.experimental.glmer))[[2]])
0.004859428/(1+0.004859428)
summary(bb.experimental.glmer)
0.004859428
summary(bb.experimental.glmer)
exp(-5.322)
exp(-5.322)/(1-exp(-5.322))
1-0.004906938
D_tall$objectType <- relevel(D_tall$objectType, ref = 1)
summary(bb.experimental.glmer)
D_tall$objectType <- relevel(D_tall$objectType, ref = 2)
summary(bb.experimental.glmer)
exp(fixef(bb.experimental.glmer))
bb.experimental.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental",])
Anova(bb.experimental.glmer)
D_tall$objectType <- relevel(D_tall$objectType, ref = 2)
summary(bb.experimental.glmer)
exp(5.3220)
exp(5.3220)/(1+exp(5.3220)\)
exp(5.3220)/(1+exp(5.3220))
confint(bb.experimental.glmer, method = "profile")
bb.experimental.CIs = confint(bb.experimental.glmer, method = "profile")
names(bb.experimental.CIs)
bb.experimental.CIs
exp(3.3446721)
exp(8.435789)
bb.experimental.CIs[1]
bb.experimental.CIs[5]
# get CIs for difference between A and B
bb.experimental.CIs[5]/(1+bb.experimental.CIs[5])
bb.experimental.CIs[6]/(1+bb.experimental.CIs[6])
bb.experimental.CIs[6]
bb.experimental.CIs[7]
bb.experimental.CIs[7]/(1+bb.experimental.CIs[7])
# get CIs for difference between A and B
exp(bb.experimental.CIs[5])/(1+exp(bb.experimental.CIs[5]))
exp(bb.experimental.CIs[7])/(1+exp(bb.experimental.CIs[7]))
exp(bb.experimental.CIs[5])
exp(bb.experimental.CIs[7])
summary(bb.experimental.glmer)
D_tall$objectType <- relevel(D_tall$objectType, ref = 1)
summary(bb.experimental.glmer)
D_tall$objectType <- relevel(D_tall$objectType, ref = 1)
bb.experimental.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental",])
Anova(bb.experimental.glmer)
summary(bb.experimental.glmer)
exp(fixef(bb.experimental.glmer))
D_tall$objectType <- relevel(D_tall$objectType, ref = 3)
bb.experimental.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental",])
Anova(bb.experimental.glmer)
summary(bb.experimental.glmer)
exp(fixef(bb.experimental.glmer))
follow_up_func = func(x,y,z) {
follow_up_func = function(x,y,z){
D_tall$objectType <- relevel(D_tall$objectType, ref = x)
bb.experimental.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition==y & D_tall$trialType==z,])
bb.experimental.CIs = confint(bb.experimental.glmer, method = "profile")
c(return(exp(fixef(bb.experimental.glmer))),
return(bb.experimental.CIs))
}
follow_up_func(1,"Backwards Blocking", "experimental")
follow_up_func <- function(x, y, z) {
D_tall$objectType <- relevel(D_tall$objectType, ref = x)
bb.experimental.glmer = glmer(choice ~ objectType + (1|ID), family = binomial,
data = D_tall[D_tall$Condition == y & D_tall$trialType == z, ])
bb.experimental.CIs = confint(bb.experimental.glmer, method = "profile")
results <- list(
fixed_effects = exp(fixef(bb.experimental.glmer)),
confidence_intervals = bb.experimental.CIs
)
return(results)
}
follow_up_func(1,"Backwards Blocking", "experimental")
bb.experimental.CIs = exp(confint(bb.experimental.glmer, method = "profile"))
bb.experimental.CIs
follow_up_func <- function(x, y, z) {
D_tall$objectType <- relevel(D_tall$objectType, ref = x)
bb.experimental.glmer = glmer(choice ~ objectType + (1|ID), family = binomial,
data = D_tall[D_tall$Condition == y & D_tall$trialType == z, ])
bb.experimental.CIs = exp(confint(bb.experimental.glmer, method = "profile"))
results <- list(
fixed_effects = exp(fixef(bb.experimental.glmer)),
confidence_intervals = bb.experimental.CIs
)
return(results)
}
follow_up_func(1,"Backwards Blocking", "experimental")
dsds = glmer(choice~(trialType+objectType)^2+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Backwards Blocking",])
summary(dsds)
names(dsds)
names(bb.glmer)
names(summary(bb.glmer))
summary(bb.glmer)$coefficients
names(summary(bb.glmer)$coefficients)
dim(summary(bb.glmer)$coefficients)
summary(bb.glmer)$coefficients[1,4]
follow_up_func <- function(x, y, z) {
D_tall$objectType <- relevel(D_tall$objectType, ref = x)
bb.experimental.glmer = glmer(choice ~ objectType + (1|ID), family = binomial,
data = D_tall[D_tall$Condition == y & D_tall$trialType == z, ])
bb.experimental.CIs = exp(confint(bb.experimental.glmer, method = "profile"))
results <- list(
fixed_effects = exp(fixef(bb.experimental.glmer)),
confidence_intervals = bb.experimental.CIs,
p.values = summary(bb.glmer)$coefficients[,4]
)
return(results)
}
follow_up_func(1,"Backwards Blocking", "experimental")
summary(bb.glmer)$coefficients[,4]
summary(bb.glmer)$coefficients[[4]]
summary(bb.glmer)$coefficients[[,4]]
summary(bb.glmer)$coefficients[,[4]]
D_tall$objectType <- relevel(D_tall$objectType, ref = 3)
bb.experimental.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental",])
Anova(bb.experimental.glmer)
summary(bb.experimental.glmer)
exp(fixef(bb.experimental.glmer))
D_tall$objectType <- relevel(D_tall$objectType, ref = 1)
bb.experimental.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental",])
Anova(bb.experimental.glmer)
summary(bb.experimental.glmer)
exp(fixef(bb.experimental.glmer))
# experimental trial
D_tall$objectType <- relevel(D_tall$objectType, ref = 1)
bb.experimental.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental",])
Anova(bb.experimental.glmer)
summary(bb.experimental.glmer)
D_tall$objectType <- relevel(D_tall$objectType, ref = 2)
bb.experimental.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental",])
Anova(bb.experimental.glmer)
summary(bb.experimental.glmer)
exp(fixef(bb.experimental.glmer))
bb.experimental.CIs = exp(confint(bb.experimental.glmer, method = "profile"))
bb.experimental.CIs
# get CIs for difference between A and B
exp(bb.experimental.CIs[5])
D_tall$objectType <- relevel(D_tall$objectType, ref = 2)
bb.experimental.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental",])
Anova(bb.experimental.glmer)
summary(bb.experimental.glmer)
exp(fixef(bb.experimental.glmer))
bb.experimental.CIs = exp(confint(bb.experimental.glmer, method = "profile"))
bb.experimental.CIs
summary(bb.experimental.glmer)
exp(fixef(bb.experimental.glmer))
bb.experimental.CIs
fix(D_tall)
iso.glmer = glmer(choice~(trialType+objectType)^2+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Indirect Screening-Off",])
Anova(iso.glmer)
iso.control.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control",])
Anova(iso.control.glmer)
iso.experimental.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="experimental",])
Anova(iso.experimental.glmer)
summary(iso.control.glmer)
exp(fixef(iso.control.glmer))
iso.control.CIs = exp(confint(iso.control.glmer, method = "profile"))
iso.control.CIs
D_tall$objectType <- relevel(D_tall$objectType, ref = 4)
iso.control.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control",])
Anova(iso.control.glmer)
summary(iso.control.glmer)
exp(fixef(iso.control.glmer))
iso.control.CIs = exp(confint(iso.control.glmer, method = "profile"))
iso.control.CIs
D_tall$objectType <- relevel(D_tall$objectType, ref = 4)
iso.control.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control",])
Anova(iso.control.glmer)
summary(iso.control.glmer)
exp(fixef(iso.control.glmer))
D_tall$objectType <- relevel(D_tall$objectType, ref = 2)
iso.control.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control",])
Anova(iso.control.glmer)
summary(iso.control.glmer)
exp(fixef(iso.control.glmer)) # 0.0594709
iso.control.CIs = exp(confint(iso.control.glmer, method = "profile"))
iso.control.CIs
D_tall$objectType <- relevel(D_tall$objectType, ref = 3)
iso.control.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control",])
Anova(iso.control.glmer)
summary(iso.control.glmer)
exp(fixef(iso.control.glmer)) # 0.0594709
iso.control.CIs = exp(confint(iso.control.glmer, method = "profile"))
iso.control.CIs
D_tall$objectType <- relevel(D_tall$objectType, ref = 4)
iso.control.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control",])
Anova(iso.control.glmer)
summary(iso.control.glmer)
exp(fixef(iso.control.glmer)) # 0.05197915
iso.control.CIs = exp(confint(iso.control.glmer, method = "profile"))
iso.control.CIs
D_tall$objectType <- relevel(D_tall$objectType, ref = 4)
iso.experimental.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="experimental",])
Anova(iso.experimental.glmer)
summary(iso.experimental.glmer)
exp(fixef(iso.experimental.glmer)) # 0.0594709
iso.experimental.CIs = exp(confint(iso.experimental.glmer, method = "profile"))
iso.experimental.CIs
# B as reference
D_tall$objectType <- relevel(D_tall$objectType, ref = 3)
iso.experimental.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="experimental",])
Anova(iso.experimental.glmer)
summary(iso.experimental.glmer)
exp(fixef(iso.experimental.glmer)) # 0.05197915
iso.experimental.CIs = exp(confint(iso.experimental.glmer, method = "profile"))
iso.experimental.CIs
# C as reference
D_tall$objectType <- relevel(D_tall$objectType, ref = 4)
iso.experimental.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="experimental",])
Anova(iso.experimental.glmer)
summary(iso.experimental.glmer)
exp(fixef(iso.experimental.glmer)) # 0.03266591
iso.experimental.CIs = exp(confint(iso.experimental.glmer, method = "profile"))
iso.experimental.CIs
D_tall$objectType <- relevel(D_tall$objectType, ref = 4)
iso.experimental.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="experimental",])
Anova(iso.experimental.glmer)
summary(iso.experimental.glmer)
exp(fixef(iso.experimental.glmer)) # 0.03266591
iso.experimental.CIs = exp(confint(iso.experimental.glmer, method = "profile"))
iso.experimental.CIs
# A as reference
D_tall$objectType <- relevel(D_tall$objectType, ref = 4)
iso.control.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control",])
Anova(iso.control.glmer)
summary(iso.control.glmer)
exp(fixef(iso.control.glmer)) # 0.0594709
iso.control.CIs = exp(confint(iso.control.glmer, method = "profile"))
iso.control.CIs
D_tall$objectType <- relevel(D_tall$objectType, ref = 3)
iso.control.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control",])
Anova(iso.control.glmer)
summary(iso.control.glmer)
exp(fixef(iso.control.glmer)) # 0.05197915
iso.control.CIs = exp(confint(iso.control.glmer, method = "profile"))
iso.control.CIs
D_tall$objectType <- relevel(D_tall$objectType, ref = 4)
iso.control.glmer = glmer(choice~objectType+(1|ID), family=binomial,
data=D_tall[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control",])
Anova(iso.control.glmer)
summary(iso.control.glmer)
exp(fixef(iso.control.glmer)) # 0.03266591
iso.control.CIs = exp(confint(iso.control.glmer, method = "profile"))
iso.control.CIs
fix(D)
length(D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="A"])
bb.df = dataframe(ID = x, B_exp = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="B"],
C_exp = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="C"],
A_control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="A"],
B_control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="B"],
C_control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="C"])
bb.df = data.frame(ID = x, B_exp = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="B"],
C_exp = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="C"],
A_control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="A"],
B_control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="B"],
C_control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="C"])
bb.df = data.frame(ID = c(1:62), B_exp = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="B"],
C_exp = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="C"],
A_control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="A"],
B_control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="B"],
C_control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="C"])
names(bb.df_tall)
names(bb.df)
dim(bb.df)
bb.df_tall = reshape(bb.df, varying = c(2:6), v.names = "choice",
timevar = "condition",   direction = "long")
bb.df_tall = bb.df_tall[order(bb.df_tall$ID),]
fix(bb.df_tall)
bb.df_tall$objectType = rep(c("B","C","A","B","C"), times = 31)
bb.df_tall$trialType = rep(c("experimental","experimental","control",
"control","control"), times = 31)
bb.df_tall$objectType = factor(bb.df_tall$objectType)
bb.df_tall$trialType = factor(bb.df_tall$trialType)
fix(bb.df_tall)
names(bb.df_tall)
fix(bb.df_tall)
bb_condition_only_glmer = glmer(choice~(objectType+trialType)^2+(1|ID), family=binomial,
data=bb.df_tall)
anova(bb_condition_only_glmer)
Anova(bb_condition_only_glmer)
