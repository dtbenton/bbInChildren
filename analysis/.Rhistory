rm(list=ls(\))
rm(list=ls())
library(nlme)
library(lme4)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(openxlsx)
library(BFpack)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
# load: newData03202023.csv
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
fix(D)
# remove unnecessary columns
names(D)
D$CTRL_1__E = NULL
D$CTRL_2__E = NULL
names(D)
dim(D)
D_tall =  reshape(D, varying = c(10:23), v.names = "measure",
timevar = "condition",   direction = "long")
D_tall = D_tall[order(D_tall$ID),] # order the data frame in terms of participant ID;
# to avoid wonky things happening and to save yourself
# a full-day headache in the future, reorder by ID
# immediately after reshaping the dataframe.
names(D_tall)
D_tall$id = NULL
names(D_tall)
D_tall$trialType = rep(c("control","control","control","control","control","control","control",
"control","experimental","experimental",
"experimental","experimental","experimental","experimental"), times = 64)
D_tall$testPhase = rep(c("first","first","first","first","second","second","second","second",
"first","first","first","second","second","second"), times = 64)
D_tall$objectType = rep(c("A","B","C","D",
"A","B","C","D",
"A","B","C",
"A","B","C"), times = 64)
D_tall$phaseOrder = rep(c("Phase 1","Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2","Phase 2",
"Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2"), times = 64)
# CHANGE SOME OF THE COLUMN NAMES
names(D_tall)
colnames(D_tall)[which(names(D_tall) == "AGE.Y.")] <- "Age"
colnames(D_tall)[which(names(D_tall) == "SEX")] <- "Sex"
colnames(D_tall)[which(names(D_tall) == "BB.IS")] <- "Condition"
colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "SubCondition"
colnames(D_tall)[which(names(D_tall) == "VIDORDER")] <- "Vidorder"
colnames(D_tall)[which(names(D_tall) == "PRETEST")] <- "Pretest"
colnames(D_tall)[which(names(D_tall) == "measure")] <- "choice"
# remove more unnecessary columns
names(D_tall)
D_tall$CONDITION = NULL
# colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "Subcondition"
names(D_tall)
# MODIFY CHOICES COLUMN
# Deal with "unsures" in the choice column
D_tall$choices = rep(0, nrow(D_tall))
for(i in 1:nrow(D_tall)){
if(is.na(D_tall$choice[i])==T|D_tall$choice[i]=="NaN"){
D_tall$choices[i]= NA
} else if(D_tall$choice[i]==1){
D_tall$choices[i]=1
} else if(D_tall$choice[i]==0){
D_tall$choices[i]=0
} else if(D_tall$choice[i]==2) {
D_tall$choices[i]=0
}
else {
D_tall$choices[i]=NA
}
}
D_tall$choice = D_tall$choices
D_tall$choices = NULL
D_tall$choice = as.numeric(D_tall$choice)
# get counts for choice
table(D_tall$choice)
# RENAME LEVELS OF COLUMNS
D_tall$Condition = revalue(x = as.factor(D_tall$Condition),
c("0" = "Backwards Blocking", "1"="Indirect Screening-Off"))
D_tall$Sex = revalue(x = as.factor(D_tall$Sex),
c("0" = "female", "1"="male"))
# D_tall$Subcondition = revalue(x = as.factor(D_tall$Subcondition),
#                     c("0" = "A", "1"="B", "2"="C", "3"="D"))
D_tall$Vidorder = revalue(x = as.factor(D_tall$Vidorder),
c("0" = "LtoR", "1"="RtoL"))
D_tall$Pretest = revalue(x = as.factor(D_tall$Pretest),
c("0" = "Incorrect", "1"="Correct"))
D_tall$Age = as.factor(D_tall$Age)
D_tall$testPhase = as.factor(D_tall$testPhase)
D_tall$objectType = as.factor(D_tall$objectType)
D_tall$trialType = as.factor(D_tall$trialType)
# REODRDER COLUMNS
D_tall$condition = NULL
names(D_tall)
dim(D_tall)
D_tall = as.data.frame(D_tall[,c(1:4,6:7,5,10:13,8:9)])
fix(D_tall)
fix(D_tall)
lm.fit = lm(choice~(AgeNum+Condition+trialType+phaseOrder+objectType)^5,
data=D_tall)
lmer.fit = lmer(choice~(AgeNum+Condition+trialType+phaseOrder+objectType)^5+(1|ID),
data=D_tall)
# compare the models via a log-likelihood test
anova(lmer.fit,lm.fit)
lmer.fit = lmer(choice~(AgeNum+Condition+trialType+phaseOrder+objectType)^5+(1|ID),
data=D_tall)
Anova(lmer.fit)
first.three.way.BB.lmer = lmer(choice~(AgeNum+objectType)^3+(1|ID),
data=D_tall[D_tall$Condition=="Backwards Blocking",])
summary(first.three.way.BB.lmer)
Anova(first.three.way.BB.lmer)
ggplot(D, aes(x = AgeNum, y = choice, color = objectType)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(D_tall, aes(x = AgeNum, y = choice, color = objectType)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
mean(D_tall$choice[D_tall$objectType=="D" & D_tall$Age=="4"])
mean(D_tall$choice[D_tall$objectType=="D" & D_tall$Age=="4"], na.rm=TRUE)
fix(D_tall)
mean(D_tall$choice[D_tall$objectType=="D" & D_tall$Age=="5"])
mean(D_tall$choice[D_tall$objectType=="D" & D_tall$Age=="6"])
80/5
80/12
fix(D_tall)
D.5 = subset(D_tall, ! Age %in% c("6"))
D.5 = subset(D_tall, ! Age %in% c("6"))
ggplot(D.5, aes(x = AgeNum, y = choice, color = objectType)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
names(D_tall)
fix(D_tall)
D.5.bb = subset(D_tall, ! Age %in% c("6"))
D.5.bb = subset(D_tall, ! Condition %in% c("Indirect Screening-Off"))
ggplot(D.5.bb, aes(x = AgeNum, y = choice, color = objectType)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
levels(D_tall$Condition)
D.5.iso = subset(D_tall, ! Age %in% c("6"))
D.5.iso = subset(D_tall, ! Condition %in% c("Backwards Blocking"))
ggplot(D.5.iso, aes(x = AgeNum, y = choice, color = objectType)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
D.5 = subset(D_tall, ! Age %in% c("6"))
D.6 = subset(D_tall, ! Age %in% c("5"))
ggplot(D_tall, aes(x = AgeNum, y = choice, color = objectType)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
face_wrap(~ Condition)
ggplot(D_tall, aes(x = AgeNum, y = choice, color = objectType)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ Condition)
first.three.way.BB.lmer = lmer(choice~(AgeNum+objectType)^3+(1|ID),
data=D_tall[D_tall$Condition=="Backwards Blocking" & D_tall$Age=="5",])
summary(first.three.way.BB.lmer)
first.three.way.BB.lmer = lmer(choice~(AgeNum+objectType)^3+(1|ID),
data=D_tall[D_tall$Condition=="Backwards Blocking",])
summary(first.three.way.BB.lmer)
Anova(first.three.way.BB.lmer)
levels(D_tall$objectType)
D_tall$objectType = relevel(D_tall$objectType, ref = "B")
first.three.way.BB.lmer = lmer(choice~(AgeNum+objectType)^3+(1|ID),
data=D_tall[D_tall$Condition=="Backwards Blocking",])
summary(first.three.way.BB.lmer)
Anova(first.three.way.BB.lmer)
