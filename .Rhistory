y = sample(D.new.op_tall$choice[D.new.op_tall$trialType=="control"], replace=TRUE)
dif = x - y
c[i] = mean(dif)
}
# plot the null data
hist(c)
segments(bb_dif,0,bb_dif,200, col="green")
# compute the actual difference beween BB pre and BB post
bb_dif = mean(D.new.op_tall$choice[D.new.op_tall$trialType=="main"]-D.new.op_tall$choice[D.new.op_tall$trialType=="control"])
hist(c)
segments(bb_dif,0,bb_dif,200, col="green")
abline(v = bb_dif, col = "blue", lwd = 2)
sum(abs(c) > bb_dif)/1000000
sum(abs(c) > bb_dif)/1000
mean(D.new.op_tall$choice[D.new.op_tall$trialType=="main"], na.rm = TRUE)
sd(D.new.op_tall$choice[D.new.op_tall$trialType=="main"], na.rm = TRUE)
mean(D.new.op_tall$choice[D.new.op_tall$trialType=="control"], na.rm = TRUE)
sd(D.new.op_tall$choice[D.new.op_tall$trialType=="control"], na.rm = TRUE)
fix(D.new.op_tall)
# A control
A.control = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="A"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="A"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="A"], na.rm=TRUE)
# B control
B.control = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="B"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="B"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="B"], na.rm=TRUE)
# C control
B.main = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="C"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="C"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="C"], na.rm=TRUE)
# C main
C.main = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="main" & D_tall$objectType=="C"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="main" & D_tall$objectType=="C"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="main" & D_tall$objectType=="C"], na.rm=TRUE)
# create data frame and add columns from the variables above
D.new.op = data.frame(ID = c(1:64), A.control = A.control, B.control = B.control, C.control = C.control,
C.main = C.main)
rm(list=ls())
multiple_comparison_func = function(trialTypeName, conditionName){
# Define the object types
objectTypes = c("A", "B", "C", "D", "E")
# Initialize a data frame to hold the results
results = data.frame()
# Loop over the object types
for(i in 1:length(objectTypes)){
for(j in 1:length(objectTypes)){
# Skip if object types are the same
if(i == j) next
# Extract the matched pairs
choices_i <- D_tall$choice[D_tall$objectType==objectTypes[i] & D_tall$trialType==trialTypeName & D_tall$Condition==conditionName]
choices_j <- D_tall$choice[D_tall$objectType==objectTypes[j] & D_tall$trialType==trialTypeName & D_tall$Condition==conditionName]
# Find the minimum length of the two vectors
min_len <- min(length(choices_i), length(choices_j))
# Check if enough observations are available for the t-test
if (min_len < 2) {
# Skip the comparison if not enough observations
next
}
# Perform the t-test using only the matched pairs
test_result <- t.test(choices_i[1:min_len], choices_j[1:min_len], paired=TRUE)
# Print what's being compared
print(paste("Comparing", objectTypes[i], "vs.", objectTypes[j]))
# Create column names dynamically
col_i <- objectTypes[i]
col_j <- objectTypes[j]
# Save the comparison and the t-test results to the results data frame
results = rbind(results, data.frame(Comparison = paste(objectTypes[i], "vs.", objectTypes[j]),
P_Value = test_result$p.value,
t_value = test_result$statistic,
df = test_result$parameter,
mean_i = mean(choices_i),
mean_j = mean(choices_j),
sd_i = sd(choices_i),
sd_j = sd(choices_j)))
}
}
# Print the data frame of results
return(results)
}
# load all relevant libraries
library(nlme)
library(lme4)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(BFpack)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
# load: exp2data.csv
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
# get dimension of dataframe
dim(D)
# remove unnecessary rows
D = D[c(1:64),]
# reshape dataframe from wide to long
D_tall =  reshape(D, varying = c(11:26), v.names = "measure",
timevar = "condition",   direction = "long")
D_tall = D_tall[order(D_tall$ID),] # order the data frame in terms of participant ID;
# to avoid wonky things happening and to save yourself
# a full-day headache in the future, reorder by ID
# immediately after reshaping the dataframe.
names(D_tall)
D_tall$id = NULL
names(D_tall)
D_tall$trialType = rep(c("control","control","control","control","control","control","control",
"control","control", "control","main","main",
"main","main","main","main"), times =64)
D_tall$testPhase = rep(c("first","first","first","first","first",
"second","second","second","second","second",
"first","first","first","second","second","second"), times = 64)
D_tall$objectType = rep(c("A","B","C","D","E",
"A","B","C","D","E",
"A","B","C",
"A","B","C"), times = 64)
D_tall$phaseOrder = rep(c("Phase 1","Phase 1","Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2","Phase 2","Phase 2",
"Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2"), times = 64)
# CHANGE SOME OF THE COLUMN NAMES
names(D_tall)
colnames(D_tall)[which(names(D_tall) == "AGE.Y.")] <- "AgeCat"
colnames(D_tall)[which(names(D_tall) == "AGE.M.")] <- "AgeNum"
colnames(D_tall)[which(names(D_tall) == "RACE")] <- "Race"
colnames(D_tall)[which(names(D_tall) == "SEX")] <- "Sex"
colnames(D_tall)[which(names(D_tall) == "BB.IS")] <- "Condition"
colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "SubCondition"
colnames(D_tall)[which(names(D_tall) == "VIDORDER")] <- "Vidorder"
colnames(D_tall)[which(names(D_tall) == "PRETEST")] <- "Pretest"
colnames(D_tall)[which(names(D_tall) == "measure")] <- "choice"
# remove more unnecessary columns
names(D_tall)
D_tall$CONDITION = NULL
D_tall$condition = NULL
# colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "Subcondition"
names(D_tall)
# get counts for choice
table(D_tall$choice)
# RENAME LEVELS OF COLUMNS
D_tall$Condition = revalue(x = as.factor(D_tall$Condition),
c("0" = "Backwards Blocking", "1"="Indirect Screening-Off"))
D_tall$Sex = revalue(x = as.factor(D_tall$Sex),
c("F" = "Female", "M"="Male"))
# D_tall$Subcondition = revalue(x = as.factor(D_tall$Subcondition),
#                     c("0" = "A", "1"="B", "2"="C", "3"="D"))
D_tall$Vidorder = revalue(x = as.factor(D_tall$Vidorder),
c("0" = "LtoR", "1"="RtoL"))
D_tall$Pretest = revalue(x = as.factor(D_tall$Pretest),
c("0" = "Incorrect", "1"="Correct"))
D_tall$AgeCat = as.factor(D_tall$AgeCat)
D_tall$testPhase = as.factor(D_tall$testPhase)
D_tall$objectType = as.factor(D_tall$objectType)
D_tall$trialType = as.factor(D_tall$trialType)
D_tall$choice = as.numeric(D_tall$choice)
# REODRDER COLUMNS
names(D_tall)
D_tall$condition = NULL
names(D_tall)
dim(D_tall)
D_tall = as.data.frame(D_tall[,c(1:3,5,4,7,8,6,11:14,10,9)])
fix(D_tall)
# get the number of participants in each condition by age
table(D_tall$Condition)/16
table(D_tall$Condition[D_tall$AgeCat=="5"])/16
table(D_tall$Condition[D_tall$AgeCat=="6"])/16
# get the number of participants in each condition by sex
table(D_tall$Condition[D_tall$AgeCat=="5" & D_tall$Sex=="Male"])/16
table(D_tall$Condition[D_tall$AgeCat=="5" & D_tall$Sex=="Female"])/16
table(D_tall$Condition[D_tall$AgeCat=="6" & D_tall$Sex=="Male"])/16
table(D_tall$Condition[D_tall$AgeCat=="6" & D_tall$Sex=="Female"])/16
# mean ages and ranges
mean(D_tall$AgeNum[D_tall$AgeCat=="5"])
range(D_tall$AgeNum[D_tall$AgeCat=="5"])
sd(D_tall$AgeNum[D_tall$AgeCat=="5"])
mean(D_tall$AgeNum[D_tall$AgeCat=="6"])
range(D_tall$AgeNum[D_tall$AgeCat=="6"])
sd(D_tall$AgeNum[D_tall$AgeCat=="6"])
# demographics info
# asian
table(D_tall$Race)[[1]]/sum(table(D_tall$Race))
# black
table(D_tall$Race)[[2]]/sum(table(D_tall$Race))
# hispanic
table(D_tall$Race)[[3]]/sum(table(D_tall$Race))
# white
table(D_tall$Race)[[4]]/sum(table(D_tall$Race))
###################################
# Participant section information #
###################################
# 5 yos #
# number of males and females
table(D_tall$Sex[D_tall$AgeCat=="5"])/16
# 6 yos #
# number of males and females
table(D_tall$Sex[D_tall$AgeCat=="6"])/16
# A control
A.control = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="A"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="A"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="A"], na.rm=TRUE)
# B control
B.control = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="B"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="B"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="B"], na.rm=TRUE)
# C control
B.main = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="C"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="C"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="C"], na.rm=TRUE)
# C main
C.main = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="main" & D_tall$objectType=="C"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="main" & D_tall$objectType=="C"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="main" & D_tall$objectType=="C"], na.rm=TRUE)
D.new.op = data.frame(ID = c(1:64), A.control = A.control, B.control = B.control, C.control = C.control,
C.main = C.main)
# A control
A.control = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="A"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="A"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="A"], na.rm=TRUE)
# B control
B.control = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="B"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="B"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="B"], na.rm=TRUE)
# C control
B.main = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="C"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="C"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="C"], na.rm=TRUE)
# C main
C.main = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="main" & D_tall$objectType=="C"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="main" & D_tall$objectType=="C"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="main" & D_tall$objectType=="C"], na.rm=TRUE)
# create data frame and add columns from the variables above
D.new.op = data.frame(ID = c(1:64), A.control = A.control, B.control = B.control, C.control = C.control,
C.main = C.main)
# A control
A.control = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="A"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="A"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="A"], na.rm=TRUE)
# B control
B.control = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="B"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="B"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="B"], na.rm=TRUE)
# C control
C.control = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="C"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="C"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="control" & D_tall$objectType=="C"], na.rm=TRUE)
# C main
C.main = D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="main" & D_tall$objectType=="C"]
mean(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="main" & D_tall$objectType=="C"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Indirect Screening-Off" & D_tall$trialType=="main" & D_tall$objectType=="C"], na.rm=TRUE)
# create data frame and add columns from the variables above
D.new.op = data.frame(ID = c(1:64), A.control = A.control, B.control = B.control, C.control = C.control,
C.main = C.main)
names(D.new.op)
dim(D.new.op)
D.new.op_tall = reshape(D.new.op, varying = c(2:5), v.names = "choice",
timevar = "condition",   direction = "long")
D.new.op_tall = D.new.op_tall[order(D.new.op_tall$ID),]
D.new.op_tall$objectType = rep(c("A","B","C","C"), times = 32)
D.new.op_tall$trialType = rep(c("control","control","control",
"main"), times = 32)
D.new.op_tall$objectType = factor(D.new.op_tall$objectType)
D.new.op_tall$trialType = factor(D.new.op_tall$trialType)
# main analysis
iso.evidence.lmer = lmer(choice~(objectType+trialType)^2+(1|ID),
data = D.new.op_tall)
Anova(iso.evidence.lmer)
get_init_priors = function(L, p) {
mod_priors = c()
for (model in L) {
prior_prob = 1
for (spec in model) {
prior_prob = prior_prob*((1-p)^(1-spec))*(p^spec)
}
mod_priors = c(mod_priors, prior_prob)
}
return(mod_priors)
}
get_likelihoods = function(L, event) {
placements = event[1:length(event)-1]
outcome = event[length(event)]
likelihoods = c()
for (model in L) {
activation = 0
for (i in 1:length(placements)) {
if (placements[i]==1 & model[i]==1) {
activation = 1
}
}
likelihoods = c(likelihoods, activation==outcome)
}
return(likelihoods)
}
compute_two_posts = function(L, priors, event1, event2) {
likelihoods1 = get_likelihoods(L, event1)
likelihoods2 = get_likelihoods(L, event2)
numerators = likelihoods1*likelihoods2*priors
norm_term = sum(numerators)
return(numerators/norm_term)
}
get_blicket_probs = function(L, posts) {
blicket_probs = c()
for (i in 1:length(L[[1]])) {
prob = 0
for (j in 1:length(L)) {
prob = prob + L[[j]][i]*posts[j]
}
blicket_probs = c(blicket_probs, prob)
}
return(blicket_probs)
}
MyIntToBit = function(x, dig) {
i <- 0L
string <- numeric(dig)
while (x > 0) {
string[dig - i] <- x %% 2L
x <- x %/% 2L
i <- i + 1L
}
string
}
get_model_list = function(num_blickets) {
return(lapply(0:(2^num_blickets - 1), function(x) MyIntToBit(x, num_blickets)))
}
bayes_model_func = function(x,prob,event1,event2){
L = get_model_list(x) # x is the number of candidate causes
priors = get_init_priors(L, prob) # prob = probability that an object is a blicket
event1 = event1 #event1/event2 are lists, in which the first n elements correspond to the # of candidate causes and teh last element corresponds to
# whether the machine activates
event2 = event2
posts = compute_two_posts(L, priors, event1, event2)
blicket_probs = get_blicket_probs(L, posts)
print(blicket_probs)
}
bayes_model_func(x=3,0.5,event1=c(1,1,1,1),event2=c(1,1,0,1))
bayes_model_func(x=3,0.5,event1=c(1,1,1,1),event2=c(1,1,0,1))
# BBcontrol: ABC+ DE+
bayes_model_func(x=5,0.5,event1=c(1,1,1,0,0,1),event2=c(0,0,0,1,1,1))
bayes_model_func(x=3,0.5,event1=c(1,1,1,1),event2=c(1,1,0,1))
# BBcontrol: ABC+ DE+
bayes_model_func(x=5,0.5,event1=c(1,1,1,0,0,1),event2=c(0,0,0,1,1,1))
# ISOexperimental: ABC+ AB-
bayes_model_func(x=3,0.5,event1=c(1,1,1,1),event2=c(1,1,0,0))
# ISOcontrol: ABC+ DE-
bayes_model_func(x=5,0.5,event1=c(1,1,1,0,0,1),event2=c(0,0,0,1,1,0))
# load data
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
# get column names
names(D)
mean(D$CTRL_1_A)
mean(D$CTRL_1_A, na.rm = TRUE)
fix(D)
D = D[c(1:64),]
# reshape dataframe from wide to long
D_tall =  reshape(D, varying = c(11:26), v.names = "measure",
timevar = "condition",   direction = "long")
D_tall = D_tall[order(D_tall$ID),] # order the data frame in terms of participant ID;
# to avoid wonky things happening and to save yourself
# a full-day headache in the future, reorder by ID
# immediately after reshaping the dataframe.
names(D_tall)
D_tall$id = NULL
names(D_tall)
D_tall$trialType = rep(c("control","control","control","control","control","control","control",
"control","control", "control","main","main",
"main","main","main","main"), times =64)
D_tall$testPhase = rep(c("first","first","first","first","first",
"second","second","second","second","second",
"first","first","first","second","second","second"), times = 64)
D_tall$objectType = rep(c("A","B","C","D","E",
"A","B","C","D","E",
"A","B","C",
"A","B","C"), times = 64)
D_tall$phaseOrder = rep(c("Phase 1","Phase 1","Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2","Phase 2","Phase 2",
"Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2"), times = 64)
# CHANGE SOME OF THE COLUMN NAMES
names(D_tall)
colnames(D_tall)[which(names(D_tall) == "AGE.Y.")] <- "AgeCat"
colnames(D_tall)[which(names(D_tall) == "AGE.M.")] <- "AgeNum"
colnames(D_tall)[which(names(D_tall) == "RACE")] <- "Race"
colnames(D_tall)[which(names(D_tall) == "SEX")] <- "Sex"
colnames(D_tall)[which(names(D_tall) == "BB.IS")] <- "Condition"
colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "SubCondition"
colnames(D_tall)[which(names(D_tall) == "VIDORDER")] <- "Vidorder"
colnames(D_tall)[which(names(D_tall) == "PRETEST")] <- "Pretest"
colnames(D_tall)[which(names(D_tall) == "measure")] <- "choice"
# remove more unnecessary columns
names(D_tall)
D_tall$CONDITION = NULL
D_tall$condition = NULL
# colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "Subcondition"
names(D_tall)
# get counts for choice
table(D_tall$choice)
# RENAME LEVELS OF COLUMNS
D_tall$Condition = revalue(x = as.factor(D_tall$Condition),
c("0" = "Backwards Blocking", "1"="Indirect Screening-Off"))
D_tall$Sex = revalue(x = as.factor(D_tall$Sex),
c("F" = "Female", "M"="Male"))
# D_tall$Subcondition = revalue(x = as.factor(D_tall$Subcondition),
#                     c("0" = "A", "1"="B", "2"="C", "3"="D"))
D_tall$Vidorder = revalue(x = as.factor(D_tall$Vidorder),
c("0" = "LtoR", "1"="RtoL"))
D_tall$Pretest = revalue(x = as.factor(D_tall$Pretest),
c("0" = "Incorrect", "1"="Correct"))
D_tall$AgeCat = as.factor(D_tall$AgeCat)
D_tall$testPhase = as.factor(D_tall$testPhase)
D_tall$objectType = as.factor(D_tall$objectType)
D_tall$trialType = as.factor(D_tall$trialType)
D_tall$choice = as.numeric(D_tall$choice)
# REODRDER COLUMNS
names(D_tall)
D_tall$condition = NULL
names(D_tall)
dim(D_tall)
D_tall = as.data.frame(D_tall[,c(1:3,5,4,7,8,6,11:14,10,9)])
fix(D_tall)
# get the number of participants in each condition by age
table(D_tall$Condition)/16
table(D_tall$Condition[D_tall$AgeCat=="5"])/16
table(D_tall$Condition[D_tall$AgeCat=="6"])/16
# get the number of participants in each condition by sex
table(D_tall$Condition[D_tall$AgeCat=="5" & D_tall$Sex=="Male"])/16
table(D_tall$Condition[D_tall$AgeCat=="5" & D_tall$Sex=="Female"])/16
table(D_tall$Condition[D_tall$AgeCat=="6" & D_tall$Sex=="Male"])/16
table(D_tall$Condition[D_tall$AgeCat=="6" & D_tall$Sex=="Female"])/16
# mean ages and ranges
mean(D_tall$AgeNum[D_tall$AgeCat=="5"])
range(D_tall$AgeNum[D_tall$AgeCat=="5"])
sd(D_tall$AgeNum[D_tall$AgeCat=="5"])
mean(D_tall$AgeNum[D_tall$AgeCat=="6"])
range(D_tall$AgeNum[D_tall$AgeCat=="6"])
sd(D_tall$AgeNum[D_tall$AgeCat=="6"])
# demographics info
# asian
table(D_tall$Race)[[1]]/sum(table(D_tall$Race))
# black
table(D_tall$Race)[[2]]/sum(table(D_tall$Race))
# hispanic
table(D_tall$Race)[[3]]/sum(table(D_tall$Race))
# white
table(D_tall$Race)[[4]]/sum(table(D_tall$Race))
###################################
# Participant section information #
###################################
# 5 yos #
# number of males and females
table(D_tall$Sex[D_tall$AgeCat=="5"])/16
# 6 yos #
# number of males and females
table(D_tall$Sex[D_tall$AgeCat=="6"])/16
mean(D_tall$choice[D_tall$objectType=="A" & D_tall$trialType=="control"])
mean(D_tall$choice[D_tall$objectType=="A" & D_tall$trialType=="control" & D_tall$Condition=="Backwards Blocking"])
A.main.bb = mean(D_tall$choice[D_tall$objectType=="A" & D_tall$trialType=="main" & D_tall$Condition=="Backwards Blocking"])
B.main.bb = mean(D_tall$choice[D_tall$objectType=="B" & D_tall$trialType=="main" & D_tall$Condition=="Backwards Blocking"])
C.main.bb = mean(D_tall$choice[D_tall$objectType=="C" & D_tall$trialType=="main" & D_tall$Condition=="Backwards Blocking"])
A.control.bb = mean(D_tall$choice[D_tall$objectType=="A" & D_tall$trialType=="control" & D_tall$Condition=="Backwards Blocking"])
B.control.bb = mean(D_tall$choice[D_tall$objectType=="B" & D_tall$trialType=="control" & D_tall$Condition=="Backwards Blocking"])
C.control.bb = mean(D_tall$choice[D_tall$objectType=="C" & D_tall$trialType=="control" & D_tall$Condition=="Backwards Blocking"])
D.control.bb = mean(D_tall$choice[D_tall$objectType=="D" & D_tall$trialType=="control" & D_tall$Condition=="Backwards Blocking"])
E.control.bb = mean(D_tall$choice[D_tall$objectType=="E" & D_tall$trialType=="control" & D_tall$Condition=="Backwards Blocking"])
A.main.iso = mean(D_tall$choice[D_tall$objectType=="A" & D_tall$trialType=="main" & D_tall$Condition=="Indirect Screening-Off"])
B.main.iso = mean(D_tall$choice[D_tall$objectType=="B" & D_tall$trialType=="main" & D_tall$Condition=="Indirect Screening-Off"])
C.main.iso = mean(D_tall$choice[D_tall$objectType=="C" & D_tall$trialType=="main" & D_tall$Condition=="Indirect Screening-Off"])
A.control.iso = mean(D_tall$choice[D_tall$objectType=="A" & D_tall$trialType=="control" & D_tall$Condition=="Indirect Screening-Off"])
B.control.iso = mean(D_tall$choice[D_tall$objectType=="B" & D_tall$trialType=="control" & D_tall$Condition=="Indirect Screening-Off"])
C.control.iso = mean(D_tall$choice[D_tall$objectType=="C" & D_tall$trialType=="control" & D_tall$Condition=="Indirect Screening-Off"])
D.control.iso = mean(D_tall$choice[D_tall$objectType=="D" & D_tall$trialType=="control" & D_tall$Condition=="Indirect Screening-Off"])
E.control.iso = mean(D_tall$choice[D_tall$objectType=="E" & D_tall$trialType=="control" & D_tall$Condition=="Indirect Screening-Off"])
behavioral_data = c(A.main.bb, B.main.bb, C.main.bb, A.control.bb, B.control.bb, C.control.bb, D.control.bb, E.control.bb,
A.main.iso, B.main.iso, C.main.iso, A.control.iso, B.control.iso, C.control.iso, D.control.iso, E.control.iso)
behavioral_data
################################################################
################################################################
################################################################
### COMPARE THE NN AND BAYESIAN MODEL FOR THEIR OVERALL FITS ###
################################################################
################################################################
################################################################
# LOAD REQUIRED PACKAGE
library(caret)
#### ----> NEURAL NETWORK AND MODEL DATA COMPARISON <---- ####
folder_path = "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files = list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
data = read.table(file.header(), header = FALSE, stringsAsFactors = FALSE)
data = read.table(file.open(), header = FALSE, stringsAsFactors = FALSE)
data = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
names(data)
dim(data)
fix(data)
data.main = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
fix(data.main)
data.control = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
dim(data.control)
length(rep(1:100, each = 10))
data$ID = rep(1:100, each = 10)
fix(data.main)
fix(data.control)
length(rep(1:100, each = 10))
dim(data.control)
data.control$ID = rep(1:100, each = 10)
