BB.C.main = rep("0.65",16) # 0.5+0.5
# control
BB.A.control = rep("0.68",16) # 0.5+0.5
BB.B.control = rep("0.68",16) # 0.5+0.5
BB.C.control = rep("0.68",16) # 0.5+0.5
BB.D.control = rep("1",16) # 0.5+0.5
# ISO
#main
ISO.A.main = rep("0",16)
ISO.B.main = rep("0.74",16) # 0.5+0.5
ISO.C.main = rep("0.74",16) # 0.5+0.5
# control
ISO.A.control = rep("0.68",16) # 0.5+0.5
ISO.B.control = rep("0.68",16) # 0.5+0.5
ISO.C.control = rep("0.68",16) # 0.5+0.5
ISO.D.control = rep("0",16) # 0.5+0.5
# create a dataframe that combines the variables
D.new.main = data.frame(BB.A.main = BB.A.main, BB.B.main = BB.B.main,
BB.C.main = BB.C.main, ISO.A.main = ISO.A.main,
ISO.B.main = ISO.B.main, ISO.C.main = ISO.C.main)
D_main_tall =  reshape(D.new.main, varying = c(1:6), v.names = "measure",
timevar = "condition",   direction = "long")
D_main_tall$ID = rep(c(1:16), times = 6)
# remove 'id' column from the reshape() function
D_main_tall$id = NULL
# organize the dataframe by ID
D_main_tall = D_main_tall[order(D_main_tall$ID),]
# replace the 'condition' column with a more appropriate one
D_main_tall$condition = rep(c("BB","ISO"), each = 3, times = 16)
# create a 'trial' column
D_main_tall$trial = rep(c("main"), times = 96)
# create 'object' column
D_main_tall$objects = rep(c("A","B","C"), times = 32)
# remove 'row.names' column
D_main_tall$row.names = NULL
# reorder columns
D_main_tall = D_main_tall[,c(3,4,1,5,2)]
#############
## control ##
#############
D.new.control = data.frame(BB.A.control = BB.A.control,
BB.B.control = BB.B.control, BB.C.control = BB.C.control,
BB.D.control = BB.D.control, ISO.A.control = ISO.A.control,
ISO.B.control = ISO.B.control, ISO.C.control = ISO.C.control,
ISO.D.control = ISO.D.control)
D_control_tall =  reshape(D.new.control, varying = c(1:8), v.names = "measure",
timevar = "condition",   direction = "long")
D_control_tall$ID = rep(c(1:16), times = 8)
# remove 'id' column from the reshape() function
D_control_tall$id = NULL
# organize the dataframe by ID
D_control_tall = D_control_tall[order(D_control_tall$ID),]
# replace the 'condition' column with a more appropriate one
D_control_tall$condition = rep(c("BB","ISO"), each = 4, times = 16)
# create a 'trial' column
D_control_tall$trial = rep(c("control"), times = 128)
# create 'object' column
D_control_tall$objects = rep(c("A","B","C","D"), times = 32)
# remove 'row.names' column
D_control_tall$row.names = NULL
# reorder columns
D_control_tall = D_control_tall[,c(3,4,1,5,2)]
# combine the dataframes
D_tall = rbind(D_main_tall,
D_control_tall)
names(D_tall)
# convert variables to their proper type
names(D_tall)
str(D_tall)
D_tall$measure = as.numeric(D_tall$measure)
D_tall$condition = factor(D_tall$condition)
D_tall$trial = factor(D_tall$trial)
D_tall$objects = factor(D_tall$objects)
str(D_tall)
# plot data
# figures
condition_barplot = ggplot(D_tall, aes(trial, measure, fill=objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
ylab("Ratings") + # change the label of the y-axis
facet_wrap(~condition, ncol=2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969")) +
coord_cartesian(ylim=c(0, 1.2)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
# BB
#main
BB.A.main = rep("1",16)
BB.B.main = rep("0.8",16) # 0.5+0.5
BB.C.main = rep("0.8",16) # 0.5+0.5
# control
BB.A.control = rep("0.81",16) # 0.5+0.5
BB.B.control = rep("0.81",16) # 0.5+0.5
BB.C.control = rep("0.81",16) # 0.5+0.5
BB.D.control = rep("1",16) # 0.5+0.5
# ISO
#main
ISO.A.main = rep("0",16)
ISO.B.main = rep("0.83",16) # 0.5+0.5
ISO.C.main = rep("0.83",16) # 0.5+0.5
# control
ISO.A.control = rep("0.81",16) # 0.5+0.5
ISO.B.control = rep("0.81",16) # 0.5+0.5
ISO.C.control = rep("0.81",16) # 0.5+0.5
ISO.D.control = rep("0",16) # 0.5+0.5
# create a dataframe that combines the variables
D.new.main = data.frame(BB.A.main = BB.A.main, BB.B.main = BB.B.main,
BB.C.main = BB.C.main, ISO.A.main = ISO.A.main,
ISO.B.main = ISO.B.main, ISO.C.main = ISO.C.main)
D_main_tall =  reshape(D.new.main, varying = c(1:6), v.names = "measure",
timevar = "condition",   direction = "long")
D_main_tall$ID = rep(c(1:16), times = 6)
# remove 'id' column from the reshape() function
D_main_tall$id = NULL
# organize the dataframe by ID
D_main_tall = D_main_tall[order(D_main_tall$ID),]
# replace the 'condition' column with a more appropriate one
D_main_tall$condition = rep(c("BB","ISO"), each = 3, times = 16)
# create a 'trial' column
D_main_tall$trial = rep(c("main"), times = 96)
# create 'object' column
D_main_tall$objects = rep(c("A","B","C"), times = 32)
# remove 'row.names' column
D_main_tall$row.names = NULL
# reorder columns
D_main_tall = D_main_tall[,c(3,4,1,5,2)]
#############
## control ##
#############
D.new.control = data.frame(BB.A.control = BB.A.control,
BB.B.control = BB.B.control, BB.C.control = BB.C.control,
BB.D.control = BB.D.control, ISO.A.control = ISO.A.control,
ISO.B.control = ISO.B.control, ISO.C.control = ISO.C.control,
ISO.D.control = ISO.D.control)
D_control_tall =  reshape(D.new.control, varying = c(1:8), v.names = "measure",
timevar = "condition",   direction = "long")
D_control_tall$ID = rep(c(1:16), times = 8)
# remove 'id' column from the reshape() function
D_control_tall$id = NULL
# organize the dataframe by ID
D_control_tall = D_control_tall[order(D_control_tall$ID),]
# replace the 'condition' column with a more appropriate one
D_control_tall$condition = rep(c("BB","ISO"), each = 4, times = 16)
# create a 'trial' column
D_control_tall$trial = rep(c("control"), times = 128)
# create 'object' column
D_control_tall$objects = rep(c("A","B","C","D"), times = 32)
# remove 'row.names' column
D_control_tall$row.names = NULL
# reorder columns
D_control_tall = D_control_tall[,c(3,4,1,5,2)]
# combine the dataframes
D_tall = rbind(D_main_tall,
D_control_tall)
names(D_tall)
# convert variables to their proper type
names(D_tall)
str(D_tall)
D_tall$measure = as.numeric(D_tall$measure)
D_tall$condition = factor(D_tall$condition)
D_tall$trial = factor(D_tall$trial)
D_tall$objects = factor(D_tall$objects)
str(D_tall)
# figures
condition_barplot = ggplot(D_tall, aes(trial, measure, fill=objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
ylab("Ratings") + # change the label of the y-axis
facet_wrap(~condition, ncol=2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969")) +
coord_cartesian(ylim=c(0, 1.2)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
# BB
#main
BB.A.main = rep("1",16)
BB.B.main = rep("0.95",16) # 0.5+0.5
BB.C.main = rep("0.95",16) # 0.5+0.5
# control
BB.A.control = rep("0.95",16) # 0.5+0.5
BB.B.control = rep("0.95",16) # 0.5+0.5
BB.C.control = rep("0.95",16) # 0.5+0.5
BB.D.control = rep("1",16) # 0.5+0.5
# ISO
#main
ISO.A.main = rep("0",16)
ISO.B.main = rep("0.95",16) # 0.5+0.5
ISO.C.main = rep("0.95",16) # 0.5+0.5
# control
ISO.A.control = rep("0.95",16) # 0.5+0.5
ISO.B.control = rep("0.95",16) # 0.5+0.5
ISO.C.control = rep("0.95",16) # 0.5+0.5
ISO.D.control = rep("0",16) # 0.5+0.5
# create a dataframe that combines the variables
D.new.main = data.frame(BB.A.main = BB.A.main, BB.B.main = BB.B.main,
BB.C.main = BB.C.main, ISO.A.main = ISO.A.main,
ISO.B.main = ISO.B.main, ISO.C.main = ISO.C.main)
D_main_tall =  reshape(D.new.main, varying = c(1:6), v.names = "measure",
timevar = "condition",   direction = "long")
D_main_tall$ID = rep(c(1:16), times = 6)
# remove 'id' column from the reshape() function
D_main_tall$id = NULL
# organize the dataframe by ID
D_main_tall = D_main_tall[order(D_main_tall$ID),]
# replace the 'condition' column with a more appropriate one
D_main_tall$condition = rep(c("BB","ISO"), each = 3, times = 16)
# create a 'trial' column
D_main_tall$trial = rep(c("main"), times = 96)
# create 'object' column
D_main_tall$objects = rep(c("A","B","C"), times = 32)
# remove 'row.names' column
D_main_tall$row.names = NULL
# reorder columns
D_main_tall = D_main_tall[,c(3,4,1,5,2)]
#############
## control ##
#############
D.new.control = data.frame(BB.A.control = BB.A.control,
BB.B.control = BB.B.control, BB.C.control = BB.C.control,
BB.D.control = BB.D.control, ISO.A.control = ISO.A.control,
ISO.B.control = ISO.B.control, ISO.C.control = ISO.C.control,
ISO.D.control = ISO.D.control)
D_control_tall =  reshape(D.new.control, varying = c(1:8), v.names = "measure",
timevar = "condition",   direction = "long")
D_control_tall$ID = rep(c(1:16), times = 8)
# remove 'id' column from the reshape() function
D_control_tall$id = NULL
# organize the dataframe by ID
D_control_tall = D_control_tall[order(D_control_tall$ID),]
# replace the 'condition' column with a more appropriate one
D_control_tall$condition = rep(c("BB","ISO"), each = 4, times = 16)
# create a 'trial' column
D_control_tall$trial = rep(c("control"), times = 128)
# create 'object' column
D_control_tall$objects = rep(c("A","B","C","D"), times = 32)
# remove 'row.names' column
D_control_tall$row.names = NULL
# reorder columns
D_control_tall = D_control_tall[,c(3,4,1,5,2)]
# combine the dataframes
D_tall = rbind(D_main_tall,
D_control_tall)
names(D_tall)
# convert variables to their proper type
names(D_tall)
str(D_tall)
D_tall$measure = as.numeric(D_tall$measure)
D_tall$condition = factor(D_tall$condition)
D_tall$trial = factor(D_tall$trial)
D_tall$objects = factor(D_tall$objects)
str(D_tall)
# figures
condition_barplot = ggplot(D_tall, aes(trial, measure, fill=objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
ylab("Ratings") + # change the label of the y-axis
facet_wrap(~condition, ncol=2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969")) +
coord_cartesian(ylim=c(0, 1.2)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
# BB
#main
BB.A.main = rep("1",16)
BB.B.main = rep("1",16) # 0.5+0.5
BB.C.main = rep("1",16) # 0.5+0.5
# control
BB.A.control = rep("1",16) # 0.5+0.5
BB.B.control = rep("1",16) # 0.5+0.5
BB.C.control = rep("1",16) # 0.5+0.5
BB.D.control = rep("1",16) # 0.5+0.5
# ISO
#main
ISO.A.main = rep("0",16)
ISO.B.main = rep("1",16) # 0.5+0.5
ISO.C.main = rep("1",16) # 0.5+0.5
# control
ISO.A.control = rep("1",16) # 0.5+0.5
ISO.B.control = rep("1",16) # 0.5+0.5
ISO.C.control = rep("1",16) # 0.5+0.5
ISO.D.control = rep("0",16) # 0.5+0.5
# create a dataframe that combines the variables
D.new.main = data.frame(BB.A.main = BB.A.main, BB.B.main = BB.B.main,
BB.C.main = BB.C.main, ISO.A.main = ISO.A.main,
ISO.B.main = ISO.B.main, ISO.C.main = ISO.C.main)
D_main_tall =  reshape(D.new.main, varying = c(1:6), v.names = "measure",
timevar = "condition",   direction = "long")
D_main_tall$ID = rep(c(1:16), times = 6)
# remove 'id' column from the reshape() function
D_main_tall$id = NULL
# organize the dataframe by ID
D_main_tall = D_main_tall[order(D_main_tall$ID),]
# replace the 'condition' column with a more appropriate one
D_main_tall$condition = rep(c("BB","ISO"), each = 3, times = 16)
# create a 'trial' column
D_main_tall$trial = rep(c("main"), times = 96)
# create 'object' column
D_main_tall$objects = rep(c("A","B","C"), times = 32)
# remove 'row.names' column
D_main_tall$row.names = NULL
# reorder columns
D_main_tall = D_main_tall[,c(3,4,1,5,2)]
#############
## control ##
#############
D.new.control = data.frame(BB.A.control = BB.A.control,
BB.B.control = BB.B.control, BB.C.control = BB.C.control,
BB.D.control = BB.D.control, ISO.A.control = ISO.A.control,
ISO.B.control = ISO.B.control, ISO.C.control = ISO.C.control,
ISO.D.control = ISO.D.control)
D_control_tall =  reshape(D.new.control, varying = c(1:8), v.names = "measure",
timevar = "condition",   direction = "long")
D_control_tall$ID = rep(c(1:16), times = 8)
# remove 'id' column from the reshape() function
D_control_tall$id = NULL
# organize the dataframe by ID
D_control_tall = D_control_tall[order(D_control_tall$ID),]
# replace the 'condition' column with a more appropriate one
D_control_tall$condition = rep(c("BB","ISO"), each = 4, times = 16)
# create a 'trial' column
D_control_tall$trial = rep(c("control"), times = 128)
# create 'object' column
D_control_tall$objects = rep(c("A","B","C","D"), times = 32)
# remove 'row.names' column
D_control_tall$row.names = NULL
# reorder columns
D_control_tall = D_control_tall[,c(3,4,1,5,2)]
# combine the dataframes
D_tall = rbind(D_main_tall,
D_control_tall)
names(D_tall)
# convert variables to their proper type
names(D_tall)
str(D_tall)
D_tall$measure = as.numeric(D_tall$measure)
D_tall$condition = factor(D_tall$condition)
D_tall$trial = factor(D_tall$trial)
D_tall$objects = factor(D_tall$objects)
str(D_tall)
# figures
condition_barplot = ggplot(D_tall, aes(trial, measure, fill=objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
ylab("Ratings") + # change the label of the y-axis
facet_wrap(~condition, ncol=2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969")) +
coord_cartesian(ylim=c(0, 1.2)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
rm(list=ls9)
rm(list=ls())
library(nlme)
library(lme4)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(openxlsx)
library(BFpack)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
# load: newData03202023.csv
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
# remove unnecessary columns
names(D)
D$CTRL_1__E = NULL
D$CTRL_2__E = NULL
names(D)
dim(D)
D_tall =  reshape(D, varying = c(10:23), v.names = "measure",
timevar = "condition",   direction = "long")
D_tall = D_tall[order(D_tall$ID),] # order the data frame in terms of participant ID;
# to avoid wonky things happening and to save yourself
# a full-day headache in the future, reorder by ID
# immediately after reshaping the dataframe.
names(D_tall)
D_tall$id = NULL
names(D_tall)
D_tall$trialType = rep(c("control","control","control","control","control","control","control",
"control","experimental","experimental",
"experimental","experimental","experimental","experimental"), times = 64)
D_tall$testPhase = rep(c("first","first","first","first","second","second","second","second",
"first","first","first","second","second","second"), times = 64)
D_tall$objectType = rep(c("A","B","C","D",
"A","B","C","D",
"A","B","C",
"A","B","C"), times = 64)
D_tall$phaseOrder = rep(c("Phase 1","Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2","Phase 2",
"Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2"), times = 64)
# CHANGE SOME OF THE COLUMN NAMES
names(D_tall)
colnames(D_tall)[which(names(D_tall) == "AGE.Y.")] <- "Age"
colnames(D_tall)[which(names(D_tall) == "SEX")] <- "Sex"
colnames(D_tall)[which(names(D_tall) == "BB.IS")] <- "Condition"
colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "SubCondition"
colnames(D_tall)[which(names(D_tall) == "VIDORDER")] <- "Vidorder"
colnames(D_tall)[which(names(D_tall) == "PRETEST")] <- "Pretest"
colnames(D_tall)[which(names(D_tall) == "measure")] <- "choice"
# remove more unnecessary columns
names(D_tall)
D_tall$CONDITION = NULL
# colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "Subcondition"
names(D_tall)
# MODIFY CHOICES COLUMN
# Deal with "unsures" in the choice column
D_tall$choices = rep(0, nrow(D_tall))
for(i in 1:nrow(D_tall)){
if(is.na(D_tall$choice[i])==T|D_tall$choice[i]=="NaN"){
D_tall$choices[i]= NA
} else if(D_tall$choice[i]==1){
D_tall$choices[i]=1
} else if(D_tall$choice[i]==0){
D_tall$choices[i]=0
} else if(D_tall$choice[i]==2) {
D_tall$choices[i]=0
}
else {
D_tall$choices[i]=NA
}
}
D_tall$choice = D_tall$choices
D_tall$choices = NULL
D_tall$choice = as.numeric(D_tall$choice)
# get counts for choice
table(D_tall$choice)
# RENAME LEVELS OF COLUMNS
D_tall$Condition = revalue(x = as.factor(D_tall$Condition),
c("0" = "Backwards Blocking", "1"="Indirect Screening-Off"))
D_tall$Sex = revalue(x = as.factor(D_tall$Sex),
c("0" = "female", "1"="male"))
# D_tall$Subcondition = revalue(x = as.factor(D_tall$Subcondition),
#                     c("0" = "A", "1"="B", "2"="C", "3"="D"))
D_tall$Vidorder = revalue(x = as.factor(D_tall$Vidorder),
c("0" = "LtoR", "1"="RtoL"))
D_tall$Pretest = revalue(x = as.factor(D_tall$Pretest),
c("0" = "Incorrect", "1"="Correct"))
D_tall$Age = as.factor(D_tall$Age)
D_tall$testPhase = as.factor(D_tall$testPhase)
D_tall$objectType = as.factor(D_tall$objectType)
D_tall$trialType = as.factor(D_tall$trialType)
# REODRDER COLUMNS
D_tall$condition = NULL
names(D_tall)
dim(D_tall)
D_tall = as.data.frame(D_tall[,c(1:4,6:7,5,10:13,8:9)])
fix(D_tall)
# A control
A.control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="A"]
mean(D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="A"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="A"], na.rm=TRUE)
# B experimental v B control
B.control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="B"]
mean(D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="B"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="B"], na.rm=TRUE)
B.experimental = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="B"]
mean(D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="B"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="B"], na.rm=TRUE)
# C experimental v C control
C.control = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="C"]
mean(D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="C"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="control" & D_tall$objectType=="C"], na.rm=TRUE)
C.experimental = D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="C"]
mean(D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="C"], na.rm=TRUE)
sd(D_tall$choice[D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="experimental" & D_tall$objectType=="C"], na.rm=TRUE)
# create data frame and add columns from the variables above
D.new.op = data.frame(ID = c(1:62), A.control = A.control, B.control = B.control, B.experimental = B.experimental,
C.control = C.control, C.experimental = C.experimental)
names(D.new.op)
dim(D.new.op)
D.new.op_tall = reshape(D.new.op, varying = c(2:6), v.names = "choice",
timevar = "condition",   direction = "long")
D.new.op_tall = D.new.op_tall[order(D.new.op_tall$ID),]
D.new.op_tall$objectType = rep(c("A","B","B","C","C"), times = 31)
D.new.op_tall$trialType = rep(c("control","control","main",
"control","main"), times = 31)
D.new.op_tall$objectType = factor(D.new.op_tall$objectType)
D.new.op_tall$trialType = factor(D.new.op_tall$trialType)
# main analysis
bb.evidence.lmer = lmer(choice~(objectType+trialType)^2+(1|ID),
data = D.new.op_tall)
Anova(bb.evidence.lmer)
mean(D.new.op_tall$choice[D.new.op_tall$trialType=="main"], na.rm = TRUE)
sd(D.new.op_tall$choice[D.new.op_tall$trialType=="main"], na.rm = TRUE)
mean(D.new.op_tall$choice[D.new.op_tall$trialType=="control"], na.rm = TRUE)
sd(D.new.op_tall$choice[D.new.op_tall$trialType=="control"], na.rm = TRUE)
1500/750
exp(0.65)
exp(2.45)
