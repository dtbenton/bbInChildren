sd(D.new.op$C.main, na.rm = TRUE)
t.test(D.new.op$B.control,
D.new.op$C.main,
paired = TRUE,
alternative = "two.sided")
mean(D.new.op$B.control, na.rm = TRUE)
sd(D.new.op$B.control, na.rm = TRUE)
mean(D.new.op$C.main, na.rm = TRUE)
sd(D.new.op$C.main, na.rm = TRUE)
t.test(D.new.op$C.control,
D.new.op$C.main,
paired = TRUE,
alternative = "two.sided")
b.bb.main = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="BB" & D.DF.5s.and.6s_tall$eventType=="main" & D.DF.5s.and.6s_tall$objects=="B"]
c.bb.main = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="BB" & D.DF.5s.and.6s_tall$eventType=="main" & D.DF.5s.and.6s_tall$objects=="C"]
A.bb.control = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="BB" & D.DF.5s.and.6s_tall$eventType=="control" & D.DF.5s.and.6s_tall$objects=="A"]
B.bb.control = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="BB" & D.DF.5s.and.6s_tall$eventType=="control" & D.DF.5s.and.6s_tall$objects=="B"]
C.bb.control = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="BB" & D.DF.5s.and.6s_tall$eventType=="control" & D.DF.5s.and.6s_tall$objects=="C"]
b.iso.main = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="ISO" & D.DF.5s.and.6s_tall$eventType=="main" & D.DF.5s.and.6s_tall$objects=="B"]
c.iso.main = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="ISO" & D.DF.5s.and.6s_tall$eventType=="main" & D.DF.5s.and.6s_tall$objects=="C"]
A.iso.control = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="ISO" & D.DF.5s.and.6s_tall$eventType=="control" & D.DF.5s.and.6s_tall$objects=="A"]
B.iso.control = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="ISO" & D.DF.5s.and.6s_tall$eventType=="control" & D.DF.5s.and.6s_tall$objects=="B"]
C.iso.control = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="ISO" & D.DF.5s.and.6s_tall$eventType=="control" & D.DF.5s.and.6s_tall$objects=="C"]
length(b.bb.main)
D.old.bb = data.frame(ID = c(1:24), Condition = rep("BB",times=24),
C.main = c.bb.main, A.control = A.bb.control,
B.control = B.bb.control, C.control = C.bb.control)
names(D.old.bb)
dim(D.old.bb)
D.old.bb_tall = reshape(D.old.bb, varying = c(3:6), v.names = "measure",
timevar = "condition",   direction = "long")
D.old.bb_tall = D.old.bb_tall[order(D.old.bb_tall$ID),]
D.old.bb_tall$condition = NULL
D.old.bb_tall$objects = rep(c("C","A","B","C"), times = 24)
D.old.bb_tall$eventType = rep(c("main","control",
"control","control"), times = 24)
D.old.bb_tall$objects = factor(D.old.bb_tall$objects)
D.old.bb_tall$eventType = factor(D.old.bb_tall$eventType)
length(b.iso.main)
D.old.iso = data.frame(ID = c(1:23), Condition = rep("ISO",times=23),
C.main = c.iso.main, A.control = A.iso.control,
B.control = B.iso.control, C.control = C.iso.control)
names(D.old.iso)
D.old.iso_tall = reshape(D.old.iso, varying = c(3:6), v.names = "measure",
timevar = "condition",   direction = "long")
D.old.iso_tall = D.old.iso_tall[order(D.old.iso_tall$ID),]
D.old.iso_tall$condition = NULL
D.old.iso_tall$objects = rep(c("C","A","B","C"), times = 23)
D.old.iso_tall$objects = rep(c("C","A","B","C"), times = 23)
D.old.iso_tall$eventType = rep(c("main","control",
"control","control"), times = 23)
D.old.iso_tall$objects = factor(D.old.iso_tall$objects)
D.old.iso_tall$eventType = factor(D.old.iso_tall$eventType)
D.old.BB.ISO = rbind(D.old.bb_tall, D.old.iso_tall)
names(D.old.BB.ISO)
D.old.BB.ISO$id = NULL
names(D.old.BB.ISO)
lm.fit.8 = lm(measure~(objects+eventType+Condition)^3, data = D.old.BB.ISO,
na.action=na.exclude)
Anova(lm.fit.8)
mean(D.old.BB.ISO$measure[D.old.BB.ISO$Condition=="BB"], na.rm = TRUE)
sd(D.old.BB.ISO$measure[D.old.BB.ISO$Condition=="BB"], na.rm = TRUE)
mean(D.old.BB.ISO$measure[D.old.BB.ISO$Condition=="ISO"], na.rm = TRUE)
sd(D.old.BB.ISO$measure[D.old.BB.ISO$Condition=="ISO"], na.rm = TRUE)
condition_barplot = ggplot(D.DF.5s.and.6s_tall, aes(eventType, measure, fill = objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969",
"#548548")) +
coord_cartesian(ylim=c(0, 2.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
rw_model = function(alpha, beta){
Va_vec = rep(0,40)
Vb_vec = rep(0,40)
Vc_vec = rep(0,40)
Va = 0 # generally, VA is set to 0
Vb = 0 # generally, VB is set to 0
Vc = 0
for(i in 1:(length(Va_vec)-20)){
adjustment = alpha*beta*(1-(Va+Vb+Vc))
Va = Va + adjustment
Vb = Vb + adjustment
Vc = Vc + adjustment
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
}
for(i in (length(Va_vec)-19):(length(Va_vec))){
adjustment = alpha*beta*(1-(Va+Vb))
Va = Va + alpha*beta*(1-(Va))
Vb = Vb + alpha*beta*(1-(Vb))
Vc = Vc + 0*beta*(1-(Vc))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
}
return(data.frame(Va = Va_vec, Vb = Vb_vec, Vc = Vc_vec))
}
rw_model(.5,.5)
rw_model = function(alpha, beta){
Va_vec = rep(0,40)
Vb_vec = rep(0,40)
Vc_vec = rep(0,40)
Vd_vec = rep(0,40)
Ve_vec = rep(0,40)
Va = 0
Vb = 0
Vc = 0
Ve = 0
for(i in 1:(length(Va_vec)-20)){
# ABC+
adjustment = alpha*beta*(1-(Va+Vb+Vc))
Va = Va + adjustment
Vb = Vb + adjustment
Vc = Vc + adjustment
Vd = Vd + 0*beta*(1-(Vd))
Ve = Ve + 0*beta*(1-(Ve))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
for(i in (length(Va_vec)-19):(length(Va_vec))){
# DE+
adjustment = alpha*beta*(1-(Vd+Ve))
Va = Va + 0*beta*(1-(Va))
Vb = Vb + 0*beta*(1-(Vb))
Vc = Vc + 0*beta*(1-(Vc))
Vd = Vd + alpha*beta*(1-(Vd))
Ve = Ve + alpha*beta*(1-(Ve))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
return(data.frame(Va = Va_vec, Vb = Vb_vec, Vc = Vc_vec, Vd = Vd_vec,
Ve = Ve_vec))
}
rw_model(.5,.5)
rw_model = function(alpha, beta){
Va_vec = rep(0,40)
Vb_vec = rep(0,40)
Vc_vec = rep(0,40)
Vd_vec = rep(0,40)
Ve_vec = rep(0,40)
Va = 0
Vb = 0
Vc = 0
Vd = 0
Ve = 0
for(i in 1:(length(Va_vec)-20)){
# ABC+
adjustment = alpha*beta*(1-(Va+Vb+Vc))
Va = Va + adjustment
Vb = Vb + adjustment
Vc = Vc + adjustment
Vd = Vd + 0*beta*(1-(Vd))
Ve = Ve + 0*beta*(1-(Ve))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
for(i in (length(Va_vec)-19):(length(Va_vec))){
# DE+
adjustment = alpha*beta*(1-(Vd+Ve))
Va = Va + 0*beta*(1-(Va))
Vb = Vb + 0*beta*(1-(Vb))
Vc = Vc + 0*beta*(1-(Vc))
Vd = Vd + alpha*beta*(1-(Vd))
Ve = Ve + alpha*beta*(1-(Ve))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
return(data.frame(Va = Va_vec, Vb = Vb_vec, Vc = Vc_vec, Vd = Vd_vec,
Ve = Ve_vec))
}
rw_model(.5,.5)
rw_model = function(alpha, beta){
Va_vec = rep(0,40)
Vb_vec = rep(0,40)
Vc_vec = rep(0,40)
Vd_vec = rep(0,40)
Ve_vec = rep(0,40)
Va = 0
Vb = 0
Vc = 0
Vd = 0
Ve = 0
for(i in 1:(length(Va_vec)-20)){
# ABC+
adjustment = alpha*beta*(1-(Va+Vb+Vc))
Va = Va + adjustment
Vb = Vb + adjustment
Vc = Vc + adjustment
Vd = Vd + 0*beta*(1-(Vd))
Ve = Ve + 0*beta*(1-(Ve))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
for(i in (length(Va_vec)-19):(length(Va_vec))){
# DE+
adjustment = alpha*beta*(1-(Vd+Ve))
Va = Va + 0*beta*(1-(Va))
Vb = Vb + 0*beta*(1-(Vb))
Vc = Vc + 0*beta*(1-(Vc))
Vd = Vd + adjustment
Ve = Ve + adjustment
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
return(data.frame(Va = Va_vec, Vb = Vb_vec, Vc = Vc_vec, Vd = Vd_vec,
Ve = Ve_vec))
}
rw_model(.5,.5)
.25*.75
.25+.1875
.28*3
.25*3
0.5*0.5*(1-(.25+.25+.25))
.25+0.0625
rw_model = function(alpha, beta){
Va_vec = rep(0,40)
Vb_vec = rep(0,40)
Vc_vec = rep(0,40)
Va = 0 # generally, VA is set to 0
Vb = 0 # generally, VB is set to 0
Vc = 0
for(i in 1:(length(Va_vec)-20)){
adjustment = alpha*beta*(1-(Va+Vb+Vc))
Va = Va + adjustment
Vb = Vb + adjustment
Vc = Vc + adjustment
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
}
for(i in (length(Va_vec)-19):(length(Va_vec))){
adjustment = alpha*beta*(1-(Va+Vb))
Va = Va + alpha*beta*(0-(Va))
Vb = Vb + alpha*beta*(0-(Vb))
Vc = Vc + 0*beta*(1-(Vc))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
}
return(data.frame(Va = Va_vec, Vb = Vb_vec, Vc = Vc_vec))
}
rw_model(.5,.5)
rw_model = function(alpha, beta){
Va_vec = rep(0,40)
Vb_vec = rep(0,40)
Vc_vec = rep(0,40)
Vd_vec = rep(0,40)
Ve_vec = rep(0,40)
Va = 0
Vb = 0
Vc = 0
Vd = 0
Ve = 0
for(i in 1:(length(Va_vec)-20)){
# ABC+
adjustment = alpha*beta*(1-(Va+Vb+Vc))
Va = Va + adjustment
Vb = Vb + adjustment
Vc = Vc + adjustment
Vd = Vd + 0*beta*(1-(Vd))
Ve = Ve + 0*beta*(1-(Ve))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
for(i in (length(Va_vec)-19):(length(Va_vec))){
# DE+
adjustment = alpha*beta*(0-(Vd+Ve))
Va = Va + 0*beta*(0-(Va))
Vb = Vb + 0*beta*(0-(Vb))
Vc = Vc + 0*beta*(0-(Vc))
Vd = Vd + adjustment
Ve = Ve + adjustment
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
return(data.frame(Va = Va_vec, Vb = Vb_vec, Vc = Vc_vec, Vd = Vd_vec,
Ve = Ve_vec))
}
rw_model(.5,.5)
rw_model = function(alpha, beta){
Va_vec = rep(0,40)
Vb_vec = rep(0,40)
Vc_vec = rep(0,40)
Vd_vec = rep(0,40)
Ve_vec = rep(0,40)
Va = 0
Vb = 0
Vc = 0
Vd = 0
Ve = 0
for(i in 1:(length(Va_vec)-20)){
# ABC+
adjustment = alpha*beta*(1-(Va+Vb+Vc))
Va = Va + adjustment
Vb = Vb + adjustment
Vc = Vc + adjustment
Vd = Vd + 0*beta*(1-(Vd))
Ve = Ve + 0*beta*(1-(Ve))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
for(i in (length(Va_vec)-19):(length(Va_vec))){
# DE+
adjustment = alpha*beta*(0-(Vd+Ve))
Va = Va + 0*beta*(0-(Va))
Vb = Vb + 0*beta*(0-(Vb))
Vc = Vc + 0*beta*(0-(Vc))
Vd = Vd + alpha*beta*(1-(Vd))
Ve = Ve + alpha*beta*(1-(Ve))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
return(data.frame(Va = Va_vec, Vb = Vb_vec, Vc = Vc_vec, Vd = Vd_vec,
Ve = Ve_vec))
}
rw_model(.5,.5)
rw_model = function(alpha, beta){
Va_vec = rep(0,40)
Vb_vec = rep(0,40)
Vc_vec = rep(0,40)
Va = 0 # generally, VA is set to 0
Vb = 0 # generally, VB is set to 0
Vc = 0
for(i in 1:(length(Va_vec)-20)){
adjustment = alpha*beta*(1-(Va+Vb+Vc))
Va = Va + adjustment
Vb = Vb + adjustment
Vc = Vc + adjustment
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
}
for(i in (length(Va_vec)-19):(length(Va_vec))){
adjustment = alpha*beta*(1-(Va+Vb))
Va = Va + alpha*beta*(0-(Va))
Vb = Vb + alpha*beta*(0-(Vb))
Vc = Vc + 0*beta*(1-(Vc))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
}
return(data.frame(Va = Va_vec, Vb = Vb_vec, Vc = Vc_vec))
}
rw_model(.5,.5)
# Control condition
# ABC+ DE+ (Backwards-Blocking Event)
rw_model = function(alpha, beta){
Va_vec = rep(0,40)
Vb_vec = rep(0,40)
Vc_vec = rep(0,40)
Vd_vec = rep(0,40)
Ve_vec = rep(0,40)
Va = 0
Vb = 0
Vc = 0
Vd = 0
Ve = 0
for(i in 1:(length(Va_vec)-20)){
# ABC+
adjustment = alpha*beta*(1-(Va+Vb+Vc))
Va = Va + adjustment
Vb = Vb + adjustment
Vc = Vc + adjustment
Vd = Vd + 0*beta*(1-(Vd))
Ve = Ve + 0*beta*(1-(Ve))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
for(i in (length(Va_vec)-19):(length(Va_vec))){
# DE+
adjustment = alpha*beta*(0-(Vd+Ve))
Va = Va + 0*beta*(0-(Va))
Vb = Vb + 0*beta*(0-(Vb))
Vc = Vc + 0*beta*(0-(Vc))
Vd = Vd + alpha*beta*(0-(Vd))
Ve = Ve + alpha*beta*(0-(Ve))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
return(data.frame(Va = Va_vec, Vb = Vb_vec, Vc = Vc_vec, Vd = Vd_vec,
Ve = Ve_vec))
}
rw_model(.5,.5)
rw_model = function(alpha, beta){
Va_vec = rep(0,40)
Vb_vec = rep(0,40)
Vc_vec = rep(0,40)
Vd_vec = rep(0,40)
Ve_vec = rep(0,40)
Va = 0
Vb = 0
Vc = 0
Vd = 0
Ve = 0
for(i in 1:(length(Va_vec)-20)){
# ABC+
adjustment = alpha*beta*(1-(Va+Vb+Vc))
Va = Va + adjustment
Vb = Vb + adjustment
Vc = Vc + adjustment
Vd = Vd + 0*beta*(1-(Vd))
Ve = Ve + 0*beta*(1-(Ve))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
for(i in (length(Va_vec)-19):(length(Va_vec))){
# DE+
adjustment = alpha*beta*(1-(Vd+Ve))
Va = Va + 0*beta*(1-(Va))
Vb = Vb + 0*beta*(1-(Vb))
Vc = Vc + 0*beta*(1-(Vc))
Vd = Vd + adjustment
Ve = Ve + adjustment
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
return(data.frame(Va = Va_vec, Vb = Vb_vec, Vc = Vc_vec, Vd = Vd_vec,
Ve = Ve_vec))
}
rw_model(.5,.5)
rw_model = function(alpha, beta){
Va_vec = rep(0,40)
Vb_vec = rep(0,40)
Vc_vec = rep(0,40)
Vd_vec = rep(0,40)
Ve_vec = rep(0,40)
Va = 0
Vb = 0
Vc = 0
Vd = 0
Ve = 0
for(i in 1:(length(Va_vec)-20)){
# ABC+
adjustment = alpha*beta*(1-(Va+Vb+Vc))
Va = Va + adjustment
Vb = Vb + adjustment
Vc = Vc + adjustment
Vd = Vd + 0*beta*(1-(Vd))
Ve = Ve + 0*beta*(1-(Ve))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
for(i in (length(Va_vec)-19):(length(Va_vec))){
# DE+
adjustment = alpha*beta*(1-(Vd+Ve))
Va = Va + 0*beta*(1-(Va))
Vb = Vb + 0*beta*(1-(Vb))
Vc = Vc + 0*beta*(1-(Vc))
Vd = Vd + alpha*beta*(1-(Vd))
Ve = Ve + alpha*beta*(1-(Ve))
Va_vec[i] = Va
Vb_vec[i] = Vb
Vc_vec[i] = Vc
Vd_vec[i] = Vd
Ve_vec[i] = Ve
}
return(data.frame(Va = Va_vec, Vb = Vb_vec, Vc = Vc_vec, Vd = Vd_vec,
Ve = Ve_vec))
}
rw_model(.5,.5)
