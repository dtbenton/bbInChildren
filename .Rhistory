names(D.new.op)
dim(D.new.op)
D.new.op_tall = reshape(D.new.op, varying = c(3:7), v.names = "measure",
timevar = "condition",   direction = "long")
D.new.op_tall = D.new.op_tall[order(D.new.op_tall$ID),]
D.new.op_tall$objects = rep(c("A","B","B","C","C"), times = 31)
D.new.op_tall$eventType = rep(c("control","control","main",
"control","main"), times = 31)
D.new.op_tall$objects = factor(D.new.op_tall$objects)
D.new.op_tall$eventType = factor(D.new.op_tall$eventType)
# main analysis
lm.fit.7 = lm(measure~(objects+eventType+Age)^3, data = D.new.op_tall,
na.action=na.exclude)
Anova(lm.fit.7)
mean(D.new.op_tall$measure[D.new.op_tall$eventType=="main"], na.rm = TRUE)
sd(D.new.op_tall$measure[D.new.op_tall$eventType=="main"], na.rm = TRUE)
mean(D.new.op_tall$measure[D.new.op_tall$eventType=="control"], na.rm = TRUE)
sd(D.new.op_tall$measure[D.new.op_tall$eventType=="control"], na.rm = TRUE)
# follow-up comparisons #
# B main vs A control = significant
t.test(D.new.op$B.main,
D.new.op$A.control,
paired = TRUE,
alternative = "two.sided")
mean(D.new.op$B.main, na.rm = TRUE)
sd(D.new.op$B.main, na.rm = TRUE)
mean(D.new.op$A.control, na.rm = TRUE)
sd(D.new.op$A.control, na.rm = TRUE)
# B main vs B control = significant
t.test(D.new.op$B.main,
D.new.op$B.control,
paired = TRUE,
alternative = "two.sided")
mean(D.new.op$B.main, na.rm = TRUE)
sd(D.new.op$B.main, na.rm = TRUE)
mean(D.new.op$B.control, na.rm = TRUE)
sd(D.new.op$B.control, na.rm = TRUE)
# B main vs C control = significant
t.test(D.new.op$B.main,
D.new.op$C.control,
paired = TRUE,
alternative = "two.sided")
mean(D.new.op$B.main, na.rm = TRUE)
sd(D.new.op$B.main, na.rm = TRUE)
mean(D.new.op$C.control, na.rm = TRUE)
sd(D.new.op$C.control, na.rm = TRUE)
# C main vs A control
t.test(D.new.op$C.main,
D.new.op$A.control,
paired = TRUE,
alternative = "two.sided")
mean(D.new.op$C.main, na.rm = TRUE)
sd(D.new.op$C.main, na.rm = TRUE)
mean(D.new.op$A.control, na.rm = TRUE)
sd(D.new.op$A.control, na.rm = TRUE)
# C main vs B control
t.test(D.new.op$C.main,
D.new.op$B.control,
paired = TRUE,
alternative = "two.sided")
mean(D.new.op$C.main, na.rm = TRUE)
sd(D.new.op$C.main, na.rm = TRUE)
mean(D.new.op$B.control, na.rm = TRUE)
sd(D.new.op$B.control, na.rm = TRUE)
# C main vs C control
t.test(D.new.op$C.main,
D.new.op$C.control,
paired = TRUE,
alternative = "two.sided")
mean(D.new.op$C.main, na.rm = TRUE)
sd(D.new.op$C.main, na.rm = TRUE)
mean(D.new.op$C.control, na.rm = TRUE)
sd(D.new.op$C.control, na.rm = TRUE)
# OLD OPERATIONALIZATION #
# BB #
b.bb.main = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="Backwards Blocking" & D.DF.5s.and.6s_tall$eventType=="main" & D.DF.5s.and.6s_tall$objects=="B"]
c.bb.main = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="Backwards Blocking" & D.DF.5s.and.6s_tall$eventType=="main" & D.DF.5s.and.6s_tall$objects=="C"]
A.bb.control = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="Backwards Blocking" & D.DF.5s.and.6s_tall$eventType=="control" & D.DF.5s.and.6s_tall$objects=="A"]
B.bb.control = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="Backwards Blocking" & D.DF.5s.and.6s_tall$eventType=="control" & D.DF.5s.and.6s_tall$objects=="B"]
C.bb.control = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="Backwards Blocking" & D.DF.5s.and.6s_tall$eventType=="control" & D.DF.5s.and.6s_tall$objects=="C"]
b.iso.main = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="Indirect Screening-Off" & D.DF.5s.and.6s_tall$eventType=="main" & D.DF.5s.and.6s_tall$objects=="B"]
c.iso.main = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="Indirect Screening-Off" & D.DF.5s.and.6s_tall$eventType=="main" & D.DF.5s.and.6s_tall$objects=="C"]
A.iso.control = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="Indirect Screening-Off" & D.DF.5s.and.6s_tall$eventType=="control" & D.DF.5s.and.6s_tall$objects=="A"]
B.iso.control = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="Indirect Screening-Off" & D.DF.5s.and.6s_tall$eventType=="control" & D.DF.5s.and.6s_tall$objects=="B"]
C.iso.control = D.DF.5s.and.6s_tall$measure[D.DF.5s.and.6s_tall$Condition=="Indirect Screening-Off" & D.DF.5s.and.6s_tall$eventType=="control" & D.DF.5s.and.6s_tall$objects=="C"]
# create data frame and add columns from the variables above
# BB
D.old.bb = data.frame(ID = c(1:31), Condition = rep("Backwards Blocking",times=31),
B.main = b.bb.main, C.main = c.bb.main, A.control = A.bb.control,
B.control = B.bb.control, C.control = C.bb.control)
names(D.old.bb)
D.old.bb_tall = reshape(D.old.bb, varying = c(3:7), v.names = "measure",
timevar = "condition",   direction = "long")
D.old.bb_tall = D.old.bb_tall[order(D.old.bb_tall$ID),]
D.old.bb_tall$condition = NULL
D.old.bb_tall$objects = rep(c("B","C","A","B","C"), times = 31)
D.old.bb_tall$eventType = rep(c("main","main","control",
"control","control"), times = 31)
D.old.bb_tall$objects = factor(D.old.bb_tall$objects)
D.old.bb_tall$eventType = factor(D.old.bb_tall$eventType)
# ISO
D.old.iso = data.frame(ID = c(1:33), Condition = rep("Indirect Screening-Off",times=33),
B.main = b.iso.main, C.main = c.iso.main, A.control = A.iso.control,
B.control = B.iso.control, C.control = C.iso.control)
names(D.old.iso)
D.old.iso_tall = reshape(D.old.iso, varying = c(3:7), v.names = "measure",
timevar = "condition",   direction = "long")
D.old.iso_tall = D.old.iso_tall[order(D.old.iso_tall$ID),]
D.old.iso_tall$condition = NULL
D.old.iso_tall$objects = rep(c("B","C","A","B","C"), times = 33)
D.old.iso_tall$eventType = rep(c("main","main","control",
"control","control"), times = 33)
D.old.iso_tall$objects = factor(D.old.iso_tall$objects)
D.old.iso_tall$eventType = factor(D.old.iso_tall$eventType)
# combine the BB and ISO dataframes
D.old.BB.ISO = rbind(D.old.bb_tall, D.old.iso_tall)
names(D.old.BB.ISO)
D.old.BB.ISO$id = NULL
names(D.old.BB.ISO)
# main analysis
lm.fit.8 = lm(measure~(objects+eventType+Condition)^3, data = D.old.BB.ISO,
na.action=na.exclude)
Anova(lm.fit.8)
mean(D.old.BB.ISO$measure[D.old.BB.ISO$Condition=="Backwards Blocking"], na.rm = TRUE)
sd(D.old.BB.ISO$measure[D.old.BB.ISO$Condition=="Backwards Blocking"], na.rm = TRUE)
mean(D.old.BB.ISO$measure[D.old.BB.ISO$Condition=="Indirect Screening-Off"], na.rm = TRUE)
sd(D.old.BB.ISO$measure[D.old.BB.ISO$Condition=="Indirect Screening-Off"], na.rm = TRUE)
# Figure
condition_barplot = ggplot(D.DF.5s.and.6s_tall, aes(eventType, measure, fill = objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969")) +
coord_cartesian(ylim=c(0, 2.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
condition_barplot = ggplot(D.DF.5s.and.6s_tall, aes(eventType, measure, fill = objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969")) +
coord_cartesian(ylim=c(0, 2.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.text.x=element_blank(), #remove x axis labels
axis.ticks.x=element_blank(), #remove x axis ticks
axis.text.y=element_blank(),  #remove y axis labels
axis.ticks.y=element_blank())
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969")) +
coord_cartesian(ylim=c(0, 2.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
condition_barplot = ggplot(D.DF.5s.and.6s_tall, aes(eventType, measure, fill = objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969")) +
coord_cartesian(ylim=c(0, 2.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_blank())
condition_barplot = ggplot(D.DF.5s.and.6s_tall, aes(eventType, measure, fill = objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969")) +
coord_cartesian(ylim=c(0, 2.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_blank()) +
ylab("# of questions children judged object was a blicket")
rm(list=ls())
library(nlme)
library(lme4)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(openxlsx)
library(BFpack)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
# load: newData03202023.csv
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
# remove unnecessary columns
names(D)
D$CTRL_1__E = NULL
D$CTRL_2__E = NULL
names(D)
dim(D)
D_tall =  reshape(D, varying = c(10:23), v.names = "measure",
timevar = "condition",   direction = "long")
D_tall = D_tall[order(D_tall$ID),] # order the data frame in terms of participant ID;
# to avoid wonky things happening and to save yourself
# a full-day headache in the future, reorder by ID
# immediately after reshaping the dataframe.
names(D_tall)
D_tall$id = NULL
names(D_tall)
D_tall$trialType = rep(c("control","control","control","control","control","control","control",
"control","main","main",
"main","main","main","main"), times = 64)
D_tall$testPhase = rep(c("first","first","first","first","second","second","second","second",
"first","first","first","second","second","second"), times = 64)
D_tall$objectType = rep(c("A","B","C","D",
"A","B","C","D",
"A","B","C",
"A","B","C"), times = 64)
D_tall$phaseOrder = rep(c("Phase 1","Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2","Phase 2",
"Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2"), times = 64)
# CHANGE SOME OF THE COLUMN NAMES
names(D_tall)
colnames(D_tall)[which(names(D_tall) == "AGE.Y.")] <- "Age"
colnames(D_tall)[which(names(D_tall) == "SEX")] <- "Sex"
colnames(D_tall)[which(names(D_tall) == "BB.IS")] <- "Condition"
colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "SubCondition"
colnames(D_tall)[which(names(D_tall) == "VIDORDER")] <- "Vidorder"
colnames(D_tall)[which(names(D_tall) == "PRETEST")] <- "Pretest"
colnames(D_tall)[which(names(D_tall) == "measure")] <- "choice"
# remove more unnecessary columns
names(D_tall)
D_tall$CONDITION = NULL
# colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "Subcondition"
names(D_tall)
# MODIFY CHOICES COLUMN
# Deal with "unsures" in the choice column
D_tall$choices = rep(0, nrow(D_tall))
for(i in 1:nrow(D_tall)){
if(is.na(D_tall$choice[i])==T|D_tall$choice[i]=="NaN"){
D_tall$choices[i]= NA
} else if(D_tall$choice[i]==1){
D_tall$choices[i]=1
} else if(D_tall$choice[i]==0){
D_tall$choices[i]=0
} else {
D_tall$choices[i]=NA
}
}
D_tall$choice = D_tall$choices
D_tall$choices = NULL
D_tall$choice = as.numeric(D_tall$choice)
# get counts for choice
table(D_tall$choice)
# RENAME LEVELS OF COLUMNS
D_tall$Condition = revalue(x = as.factor(D_tall$Condition),
c("0" = "Backwards Blocking", "1"="Indirect Screening-Off"))
D_tall$Sex = revalue(x = as.factor(D_tall$Sex),
c("0" = "female", "1"="male"))
# D_tall$Subcondition = revalue(x = as.factor(D_tall$Subcondition),
#                     c("0" = "A", "1"="B", "2"="C", "3"="D"))
D_tall$Vidorder = revalue(x = as.factor(D_tall$Vidorder),
c("0" = "LtoR", "1"="RtoL"))
D_tall$Pretest = revalue(x = as.factor(D_tall$Pretest),
c("0" = "Incorrect", "1"="Correct"))
D_tall$Age = as.factor(D_tall$Age)
D_tall$testPhase = as.factor(D_tall$testPhase)
D_tall$objectType = as.factor(D_tall$objectType)
D_tall$trialType = as.factor(D_tall$trialType)
# REODRDER COLUMNS
D_tall$condition = NULL
names(D_tall)
dim(D_tall)
D_tall = as.data.frame(D_tall[,c(1:4,6:7,5,10:13,8:9)])
fix(D_tall)
ggplot(D_tall, aes(x = AgeNum, y = choice, color = objectType, linetype = Condition)) +
scale_color_manual(values = c("red", "blue","green","orange")) +
scale_linetype_manual(values = c("solid", "dashed")) +
labs(x = "Continuous variable (x)", y = "Dependent variable (z)") +
theme_bw()
ggplot(D_tall, aes(x = Condition, y = choice, color = Condition, linetype = AgeNum)) +
scale_color_manual(values = c("red", "blue","green","orange")) +
scale_linetype_manual(values = c("solid", "dashed")) +
labs(x = "Continuous variable (x)", y = "Dependent variable (z)") +
theme_bw()
ggplot(D_tall, aes(x = AgeNum, y = choice, color = Condition, linetype = objectType)) +
scale_color_manual(values = c("red", "blue","green","orange")) +
scale_linetype_manual(values = c("solid", "dashed")) +
labs(x = "Continuous variable (x)", y = "Dependent variable (z)") +
theme_bw()
?scale_linetype_manual
ggplot(D_tall, aes(x = AgeNum, y = choice, color = Condition, linetype = objectType)) +
scale_color_manual(values = c("red", "blue","green","orange")) +
scale_linetype_manual(values = c("solid", "dashed","solid", "dashed")) +
labs(x = "Continuous variable (x)", y = "Dependent variable (z)") +
theme_bw()
ggplot(D_tall, aes(x = AgeNum, y = choice, color = Condition, linetype = objectType)) +
scale_color_manual(values = c("red", "blue","green","orange")) +
scale_linetype_manual(values = c("solid", "dashed","solid", "dashed")) +
labs(x = "Continuous variable (x)", y = "Dependent variable (z)") +
theme_bw()
condition_barplot = ggplot(D_tall, aes(Condition, choice, fill = objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969")) +
coord_cartesian(ylim=c(0, 2.5))
condition_barplot = ggplot(D_tall, aes(Condition, choice, fill = objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969")) +
coord_cartesian(ylim=c(0, 2.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_blank()) +
ylab("# of questions children judged object was a blicket")
condition_barplot = ggplot(D_tall, aes(Condition, choice, fill = objectType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition)
condition_barplot = ggplot(D_tall, aes(Condition, choice, fill = objectType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969")) +
coord_cartesian(ylim=c(0, 2.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_blank())
head(D_tall)
condition_barplot = ggplot(D_tall, aes(trialType, measure, fill = objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition)
condition_barplot = ggplot(D_tall, aes(trialType, choice, fill = objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition)
condition_barplot = ggplot(D_tall, aes(trialType, choice, fill = objectType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition)
three_way_bar_one = ggplot(D_tall, aes(x = AgeNum, y = choice)) +
scale_color_manual(values = c("red", "blue","green","orange"))
ggplot(D_tall, aes(x = AgeNum, y = choice)) +
scale_color_manual(values = c("red", "blue","green","orange"))
way ANOVAs #
three_way_bar_one = ggplot(D_tall, aes(x = AgeNum, y = choice)) +
scale_color_manual(values = c("red", "blue","green","orange")) +
scale_linetype_manual(values = c("solid", "dashed","solid", "dashed"))
ggplot(D_tall, aes(x = AgeNum, y = choice)) +
scale_color_manual(values = c("red", "blue","green","orange")) +
scale_linetype_manual(values = c("solid", "dashed","solid", "dashed"))
three_way_bar_one = ggplot(D_tall, aes(x = AgeNum, y = choice)) +
scale_color_manual(values = c("red", "blue","green","orange")) +
scale_linetype_manual(values = c("solid", "dashed","solid", "dashed")) +
labs(x = "Continuous variable (x)", y = "Dependent variable (z)") +
theme_bw()
hree_way_bar_one = ggplot(D_tall, aes(trialType, choice, fill = objectType))
three_way_bar_one + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969"))
three_way_bar_one = ggplot(D_tall, aes(trialType, choice, fill = objectType))
three_way_bar_one + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969"))
three_way_bar_one = ggplot(D_tall, aes(trialType, choice, fill = objectType))
three_way_bar_one + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969"))
ggplot(D_tall, aes(x=AgeNum, y=choice, colour=Condition)) +
geom_line() +
facet_grid(. ~ round(objectType,2))
ggplot(D_tall, aes(x=AgeNum, y=choice, colour=Condition)) +
geom_line()
ggplot(D_tall, aes(x=AgeNum, y=choice, colour=objectType)) +
geom_line() +
facet_grid(. ~ round(Condition,2))
is.numeric(D_tall$choice)
is.numeric(D_tall$AgeNum)
ggplot(D_tall, aes(x=AgeNum, y=choice, colour=objectType)) +
geom_line() +
facet_grid(. ~ round(Condition))
ggplot(D_tall, aes(x=AgeNum, y=choice, colour=objectType)) +
geom_line() +
facet_grid(. ~ Condition)
ggplot(D_tall, aes(x=AgeNum, y=choice, colour=objectType)) +
geom_line() +
facet_grid(. ~ round(AgeNum,2))
lmer.fit = lmer(choice~(AgeNum+Condition+trialType+testPhase+objectType)^5+(1|ID), data = D_tall)
summary(lmer.fit)
Anova(lmer.fit)
ggplot(D_tall, aes(x=Condition, y=choice, colour=objectType)) +
geom_line() +
facet_grid(. ~ round(AgeNum,2))
ggplot(D_tall, aes(x=Condition, y=choice, fill=objectType)) +
geom_line() +
facet_grid(. ~ round(AgeNum,2))
ggplot(D_tall, aes(x=Condition, y=choice, fill=objectType)) +
geom_line() +
facet_grid(. ~ round(AgeNum,2))
ggplot(D_tall, aes(x=objectType, y=choice, fill=Condition)) +
geom_line() +
facet_grid(. ~ round(AgeNum,2)) +
ggtitle("IVContinuousA vs. DV, by Level of IVContinousB") +
labs(colour="")
condition_by_trial_type_object_barplot = ggplot(D_tall, aes(trialType, choice, fill = objectType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_by_trial_type_object_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969")) +
coord_cartesian(ylim=c(0, 2.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_blank()) +
ylab("# of questions children judged object was a blicket")
condition_by_trial_type_object_barplot = ggplot(D_tall, aes(testPhase, choice, fill = objectType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_by_trial_type_object_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969")) +
coord_cartesian(ylim=c(0, 2.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_blank()) +
ylab("# of questions children judged object was a blicket")
names(D_tall)
mean(D_tall$choice[D_tall$objectType==A])
mean(D_tall$choice[D_tall$objectType==A], na.rm=TRUE)
mean(D_tall$choice[D_tall$objectType=="A"], na.rm=TRUE)
mean(D_tall$choice[D_tall$objectType=="A" & D_tall$Condition=="Backwards Blocking"], na.rm=TRUE)
mean(D_tall$choice[D_tall$objectType=="A" & D_tall$Condition=="Backwards Blocking" & D_tall$trialType="main"], na.rm=TRUE)
mean(D_tall$choice[D_tall$objectType=="A" & D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="main"], na.rm=TRUE)
mean(D_tall$choice[D_tall$objectType=="A" & D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="main" & D_tall$phaseOrder=="Phase 1"], na.rm=TRUE)
mean(D_tall$choice[D_tall$objectType=="A" & D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="main" & D_tall$phaseOrder=="Phase 1"], na.rm=TRUE)+mean(D_tall$choice[D_tall$objectType=="A" & D_tall$Condition=="Backwards Blocking" & D_tall$trialType=="main" & D_tall$phaseOrder=="Phase 2"], na.rm=TRUE)
library(ggplot2)
library(dplyr)
# Create sample data
set.seed(123)
n <- 100
df <- data.frame(x = rnorm(n),
cat1 = factor(sample(c("A", "B"), n, replace = TRUE)),
cat2 = factor(sample(c("C", "D"), n, replace = TRUE)),
z = rnorm(n))
# Calculate mean z values for each combination of x, cat1, and cat2
mean_df <- df %>% group_by(x, cat1, cat2) %>% summarize(mean_z = mean(z))
# Plot the data
ggplot(mean_df, aes(x = x, y = mean_z, color = cat1, linetype = cat2)) +
geom_line(size = 1.2) +
scale_color_manual(values = c("red", "blue")) +
scale_linetype_manual(values = c("solid", "dashed")) +
labs(x = "Continuous variable (x)", y = "Dependent variable (z)") +
theme_bw()
