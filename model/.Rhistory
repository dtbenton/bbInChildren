data.control = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
data.control$ID = rep(1:100, each = 10)
fix(data.control)
# load all relevant libraries
library(nlme)
library(lme4)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(BFpack)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
# load: exp2data.csv
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
# get dimension of dataframe
dim(D)
# remove unnecessary rows
D = D[c(1:64),]
# reshape dataframe from wide to long
D_tall =  reshape(D, varying = c(11:26), v.names = "measure",
timevar = "condition",   direction = "long")
D_tall = D_tall[order(D_tall$ID),] # order the data frame in terms of participant ID;
# to avoid wonky things happening and to save yourself
# a full-day headache in the future, reorder by ID
# immediately after reshaping the dataframe.
names(D_tall)
D_tall$id = NULL
names(D_tall)
D_tall$trialType = rep(c("control","control","control","control","control","control","control",
"control","control", "control","main","main",
"main","main","main","main"), times =64)
D_tall$testPhase = rep(c("first","first","first","first","first",
"second","second","second","second","second",
"first","first","first","second","second","second"), times = 64)
D_tall$objectType = rep(c("A","B","C","D","E",
"A","B","C","D","E",
"A","B","C",
"A","B","C"), times = 64)
D_tall$phaseOrder = rep(c("Phase 1","Phase 1","Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2","Phase 2","Phase 2",
"Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2"), times = 64)
# CHANGE SOME OF THE COLUMN NAMES
names(D_tall)
colnames(D_tall)[which(names(D_tall) == "AGE.Y.")] <- "AgeCat"
colnames(D_tall)[which(names(D_tall) == "AGE.M.")] <- "AgeNum"
colnames(D_tall)[which(names(D_tall) == "RACE")] <- "Race"
colnames(D_tall)[which(names(D_tall) == "SEX")] <- "Sex"
colnames(D_tall)[which(names(D_tall) == "BB.IS")] <- "Condition"
colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "SubCondition"
colnames(D_tall)[which(names(D_tall) == "VIDORDER")] <- "Vidorder"
colnames(D_tall)[which(names(D_tall) == "PRETEST")] <- "Pretest"
colnames(D_tall)[which(names(D_tall) == "measure")] <- "choice"
# remove more unnecessary columns
names(D_tall)
D_tall$CONDITION = NULL
D_tall$condition = NULL
# colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "Subcondition"
names(D_tall)
# get counts for choice
table(D_tall$choice)
# RENAME LEVELS OF COLUMNS
D_tall$Condition = revalue(x = as.factor(D_tall$Condition),
c("0" = "Backwards Blocking", "1"="Indirect Screening-Off"))
D_tall$Sex = revalue(x = as.factor(D_tall$Sex),
c("F" = "Female", "M"="Male"))
# D_tall$Subcondition = revalue(x = as.factor(D_tall$Subcondition),
#                     c("0" = "A", "1"="B", "2"="C", "3"="D"))
D_tall$Vidorder = revalue(x = as.factor(D_tall$Vidorder),
c("0" = "LtoR", "1"="RtoL"))
D_tall$Pretest = revalue(x = as.factor(D_tall$Pretest),
c("0" = "Incorrect", "1"="Correct"))
D_tall$AgeCat = as.factor(D_tall$AgeCat)
D_tall$testPhase = as.factor(D_tall$testPhase)
D_tall$objectType = as.factor(D_tall$objectType)
D_tall$trialType = as.factor(D_tall$trialType)
D_tall$choice = as.numeric(D_tall$choice)
# REODRDER COLUMNS
names(D_tall)
D_tall$condition = NULL
names(D_tall)
dim(D_tall)
D_tall = as.data.frame(D_tall[,c(1:3,5,4,7,8,6,11:14,10,9)])
fix(D_tall)
# get the number of participants in each condition by age
table(D_tall$Condition)/16
table(D_tall$Condition[D_tall$AgeCat=="5"])/16
table(D_tall$Condition[D_tall$AgeCat=="6"])/16
# get the number of participants in each condition by sex
table(D_tall$Condition[D_tall$AgeCat=="5" & D_tall$Sex=="Male"])/16
table(D_tall$Condition[D_tall$AgeCat=="5" & D_tall$Sex=="Female"])/16
table(D_tall$Condition[D_tall$AgeCat=="6" & D_tall$Sex=="Male"])/16
table(D_tall$Condition[D_tall$AgeCat=="6" & D_tall$Sex=="Female"])/16
# mean ages and ranges
mean(D_tall$AgeNum[D_tall$AgeCat=="5"])
range(D_tall$AgeNum[D_tall$AgeCat=="5"])
sd(D_tall$AgeNum[D_tall$AgeCat=="5"])
mean(D_tall$AgeNum[D_tall$AgeCat=="6"])
range(D_tall$AgeNum[D_tall$AgeCat=="6"])
sd(D_tall$AgeNum[D_tall$AgeCat=="6"])
# demographics info
# asian
table(D_tall$Race)[[1]]/sum(table(D_tall$Race))
# black
table(D_tall$Race)[[2]]/sum(table(D_tall$Race))
# hispanic
table(D_tall$Race)[[3]]/sum(table(D_tall$Race))
# white
table(D_tall$Race)[[4]]/sum(table(D_tall$Race))
###################################
# Participant section information #
###################################
# 5 yos #
# number of males and females
table(D_tall$Sex[D_tall$AgeCat=="5"])/16
# 6 yos #
# number of males and females
table(D_tall$Sex[D_tall$AgeCat=="6"])/16
head(D_tall)
fix(data.control)
data.main = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
dim(data.main)
data.main = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
data.main
data = rbind(data.control, data.main)
names(data.control)
head(data.control)
head(data.main)
data.control = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
data.control = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
data.main = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
data = rbind(data.control, data.main)
data.control$ID = rep(1:100, each = 10)
length(c(1:100))
length(c(201:300))
data.main$ID = rep(201:300, each = 6)
data = rbind(data.control, data.main)
fix(data)
dim(data)
fix(data)
length(rep(c("control"), times = 1000))
data.control$trialType = rep(c("control"), times = 1000)
head(data.control)
data.control.bb = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
data.control.bb$ID = rep(1:100, each = 10)
data.control.bb$trialType = rep(c("control"), times = 1000)
data.control.bb$objects = data.control$V2
data.control.bb$condition = rep(c("Backwards Blocking"), times = 1000)
data.main.bb = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
data.main.bb$ID = rep(201:300, each = 6)
data.main.bb$trialType = rep(c("main"), times = 1000)
data.main.bb = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
data.main.bb$ID = rep(201:300, each = 6)
dim(data.main.bb)
data.main.bb$ID = rep(201:300, each = 6)
data.main.bb$trialType = rep(c("main"), times = 600)
data.main.bb$objects = data.main$V2
data.main.bb$condition = rep(c("Backwards Blocking"), times = 600)
data.control.iso = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
data.control.iso$ID = rep(1:100, each = 10)
data.control.iso$trialType = rep(c("control"), times = 1000)
data.control.iso$objects = data.control$V2
data.control.iso$condition = rep(c("Indirect Screening-Off"), times = 1000)
data.main.iso = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
data.main.iso$ID = rep(201:300, each = 6)
data.main.iso$trialType = rep(c("main"), times = 1000)
data.main.iso$ID = rep(201:300, each = 6)
data.main.iso$trialType = rep(c("main"), times = 600)
data.main.iso$objects = data.main$V2
data.main.iso$condition = rep(c("Indirect Screening-Off"), times = 600)
data = rbind(data.control.bb, data.main.bb,
data.control.iso, data.main.iso)
names(data)
head(data)
mean(data$V3[data$trialType=="main"])
mean(data$V3[data$trialType=="main" & data$objects=="A" & data$trialType=="main"])
A.BB.main = mean(data$V3[data$trialType=="main" & data$objects=="A" & data$trialType=="main" & data$condition=="Backwards Blocking"])
A.BB.main
A.BB.main = mean(data$V3[data$trialType=="main" & data$objects=="A" & data$trialType=="main" & data$condition=="Backwards Blocking"])
B.BB.main = mean(data$V3[data$trialType=="main" & data$objects=="B" & data$trialType=="main" & data$condition=="Backwards Blocking"])
C.BB.main = mean(data$V3[data$trialType=="main" & data$objects=="C" & data$trialType=="main" & data$condition=="Backwards Blocking"])
A.BB.control = mean(data$V3[data$trialType=="control" & data$objects=="A" & data$trialType=="main" & data$condition=="Backwards Blocking"])
B.BB.control = mean(data$V3[data$trialType=="control" & data$objects=="B" & data$trialType=="main" & data$condition=="Backwards Blocking"])
C.BB.control = mean(data$V3[data$trialType=="control" & data$objects=="C" & data$trialType=="main" & data$condition=="Backwards Blocking"])
D.BB.control = mean(data$V3[data$trialType=="control" & data$objects=="D" & data$trialType=="main" & data$condition=="Backwards Blocking"])
E.BB.control = mean(data$V3[data$trialType=="control" & data$objects=="E" & data$trialType=="main" & data$condition=="Backwards Blocking"])
# ISO
A.ISO.main = mean(data$V3[data$trialType=="main" & data$objects=="A" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
B.ISO.main = mean(data$V3[data$trialType=="main" & data$objects=="B" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
C.ISO.main = mean(data$V3[data$trialType=="main" & data$objects=="C" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
A.ISO.control = mean(data$V3[data$trialType=="control" & data$objects=="A" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
B.ISO.control = mean(data$V3[data$trialType=="control" & data$objects=="B" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
C.ISO.control = mean(data$V3[data$trialType=="control" & data$objects=="C" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
D.ISO.control = mean(data$V3[data$trialType=="control" & data$objects=="D" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
E.ISO.control = mean(data$V3[data$trialType=="control" & data$objects=="E" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
folder_path = "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files = list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
files
file_number <- as.numeric(gsub("[^0-9]", "", file))
folder_path <- "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files <- list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
results <- data.frame()  # Create an empty data frame to store results
for (file in files) {
data <- read.table(file, header = FALSE, stringsAsFactors = FALSE)
# Extract the file number using regular expressions
file_number <- as.numeric(gsub("[^0-9]", "", file))
# Create variable names based on the file number
data.control.bb <- data
data.control.bb$ID <- rep(1:100, each = 10)
data.control.bb$trialType <- rep("control", times = 1000)
data.control.bb$objects <- data.control.bb$V2
data.control.bb$condition <- rep("Backwards Blocking", times = 1000)
data.main.bb <- data
data.main.bb$ID <- rep(201:300, each = 6)
data.main.bb$trialType <- rep("main", times = 600)
data.main.bb$objects <- data.main.bb$V2
data.main.bb$condition <- rep("Backwards Blocking", times = 600)
data.control.iso <- data
data.control.iso$ID <- rep(1:100, each = 10)
data.control.iso$trialType <- rep("control", times = 1000)
data.control.iso$objects <- data.control.iso$V2
data.control.iso$condition <- rep("Indirect Screening-Off", times = 1000)
data.main.iso <- data
data.main.iso$ID <- rep(201:300, each = 6)
data.main.iso$trialType <- rep("main", times = 600)
data.main.iso$objects <- data.main.iso$V2
data.main.iso$condition <- rep("Indirect Screening-Off", times = 600)
data <- rbind(data.control.bb, data.main.bb, data.control.iso, data.main.iso)
# BB
A.BB.main <- mean(data$V3[data$trialType == "main" & data$objects == "A" & data$condition == "Backwards Blocking"])
B.BB.main <- mean(data$V3[data$trialType == "main" & data$objects == "B" & data$condition == "Backwards Blocking"])
C.BB.main <- mean(data$V3[data$trialType == "main" & data$objects == "C" & data$condition == "Backwards Blocking"])
A.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "A" & data$condition == "Backwards Blocking"])
B.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "B" & data$condition == "Backwards Blocking"])
C.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "C" & data$condition == "Backwards Blocking"])
D.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "D" & data$condition == "Backwards Blocking"])
E.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "E" & data$condition == "Backwards Blocking"])
# ISO
A.ISO.main <- mean(data$V3[data$trialType == "main" & data$objects == "A" & data$condition == "Indirect Screening-Off"])
B.ISO.main <- mean(data$V3[data$trialType == "main" & data$objects == "B" & data$condition == "Indirect Screening-Off"])
C.ISO.main <- mean(data$V3[data$trialType == "main" & data$objects == "C" & data$condition == "Indirect Screening-Off"])
A.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "A" & data$condition == "Indirect Screening-Off"])
B.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "B" & data$condition == "Indirect Screening-Off"])
C.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "C" & data$condition == "Indirect Screening-Off"])
D.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "D" & data$condition == "Indirect Screening-Off"])
E.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "E" & data$condition == "Indirect Screening-Off"])
# Combine all model predictions
model_predictions <- c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control,
D.BB.control, E.BB.control, A.ISO.main, B.ISO.main, C.ISO.main,
A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
# Assuming 'behavioral_data' is a pre-defined vector, you can perform the model comparison
res <- postResample(pred = model_predictions, obs = behavioral_data)
# Store the results in a data frame
result_row <- data.frame(RMSE = res$RMSE, MAE = res$MAE, FileNumber = file_number)
results <- rbind(results, result_row)
print(results)
}
folder_path = "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files = list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
for(file in files){
data.control.bb = read.table(file, header = FALSE, stringsAsFactors = FALSE)
data.control.bb$ID = rep(1:100, each = 10)
data.control.bb$trialType = rep(c("control"), times = 1000)
data.control.bb$objects = data.control$V2
data.control.bb$condition = rep(c("Backwards Blocking"), times = 1000)
data.main.bb = read.table(file, header = FALSE, stringsAsFactors = FALSE)
data.main.bb$ID = rep(201:300, each = 6)
data.main.bb$trialType = rep(c("main"), times = 600)
data.main.bb$objects = data.main$V2
data.main.bb$condition = rep(c("Backwards Blocking"), times = 600)
data.control.iso = read.table(file, header = FALSE, stringsAsFactors = FALSE)
data.control.iso$ID = rep(1:100, each = 10)
data.control.iso$trialType = rep(c("control"), times = 1000)
data.control.iso$objects = data.control$V2
data.control.iso$condition = rep(c("Indirect Screening-Off"), times = 1000)
data.main.iso = read.table(file, header = FALSE, stringsAsFactors = FALSE)
data.main.iso$ID = rep(201:300, each = 6)
data.main.iso$trialType = rep(c("main"), times = 600)
data.main.iso$objects = data.main$V2
data.main.iso$condition = rep(c("Indirect Screening-Off"), times = 600)
data = rbind(data.control.bb, data.main.bb,
data.control.iso, data.main.iso)
# BB
A.BB.main = mean(data$V3[data$trialType=="main" & data$objects=="A" & data$trialType=="main" & data$condition=="Backwards Blocking"])
B.BB.main = mean(data$V3[data$trialType=="main" & data$objects=="B" & data$trialType=="main" & data$condition=="Backwards Blocking"])
C.BB.main = mean(data$V3[data$trialType=="main" & data$objects=="C" & data$trialType=="main" & data$condition=="Backwards Blocking"])
A.BB.control = mean(data$V3[data$trialType=="control" & data$objects=="A" & data$trialType=="main" & data$condition=="Backwards Blocking"])
B.BB.control = mean(data$V3[data$trialType=="control" & data$objects=="B" & data$trialType=="main" & data$condition=="Backwards Blocking"])
C.BB.control = mean(data$V3[data$trialType=="control" & data$objects=="C" & data$trialType=="main" & data$condition=="Backwards Blocking"])
D.BB.control = mean(data$V3[data$trialType=="control" & data$objects=="D" & data$trialType=="main" & data$condition=="Backwards Blocking"])
E.BB.control = mean(data$V3[data$trialType=="control" & data$objects=="E" & data$trialType=="main" & data$condition=="Backwards Blocking"])
# ISO
A.ISO.main = mean(data$V3[data$trialType=="main" & data$objects=="A" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
B.ISO.main = mean(data$V3[data$trialType=="main" & data$objects=="B" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
C.ISO.main = mean(data$V3[data$trialType=="main" & data$objects=="C" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
A.ISO.control = mean(data$V3[data$trialType=="control" & data$objects=="A" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
B.ISO.control = mean(data$V3[data$trialType=="control" & data$objects=="B" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
C.ISO.control = mean(data$V3[data$trialType=="control" & data$objects=="C" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
D.ISO.control = mean(data$V3[data$trialType=="control" & data$objects=="D" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
E.ISO.control = mean(data$V3[data$trialType=="control" & data$objects=="E" & data$trialType=="main" & data$condition=="Indirect Screening-Off"])
model_predictions = c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control, D.BB.control, E.BB.control,
A.ISO.main, B.ISO.main, C.ISO.main, A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
res <- postResample(pred = model_predictions, obs = behavioral_data)
results = rbind(results, data.frame(RMSE = res[["RMSE"]], MAE = res[["MAE"]]))
print(results)
}
folder_path <- "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files <- list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
results <- data.frame()  # Create an empty data frame to store results
for (file in files) {
data <- read.table(file, header = FALSE, stringsAsFactors = FALSE)
# Extract the file number using regular expressions
file_number <- as.numeric(gsub("[^0-9]", "", file))
# Create variable names based on the file number
data.control.bb <- data
data.control.bb$trialType <- rep("control", times = 1000)
data.control.bb$objects <- data.control.bb$V2
data.control.bb$condition <- rep("Backwards Blocking", times = 1000)
data.main.bb <- data
data.main.bb$trialType <- rep("main", times = 600)
data.main.bb$objects <- data.main.bb$V2
data.main.bb$condition <- rep("Backwards Blocking", times = 600)
data.control.iso <- data
data.control.iso$trialType <- rep("control", times = 1000)
data.control.iso$objects <- data.control.iso$V2
data.control.iso$condition <- rep("Indirect Screening-Off", times = 1000)
data.main.iso <- data
data.main.iso$trialType <- rep("main", times = 600)
data.main.iso$objects <- data.main.iso$V2
data.main.iso$condition <- rep("Indirect Screening-Off", times = 600)
data <- rbind(data.control.bb, data.main.bb, data.control.iso, data.main.iso)
# BB
A.BB.main <- mean(data$V3[data$trialType == "main" & data$objects == "A" & data$condition == "Backwards Blocking"])
B.BB.main <- mean(data$V3[data$trialType == "main" & data$objects == "B" & data$condition == "Backwards Blocking"])
C.BB.main <- mean(data$V3[data$trialType == "main" & data$objects == "C" & data$condition == "Backwards Blocking"])
A.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "A" & data$condition == "Backwards Blocking"])
B.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "B" & data$condition == "Backwards Blocking"])
C.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "C" & data$condition == "Backwards Blocking"])
D.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "D" & data$condition == "Backwards Blocking"])
E.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "E" & data$condition == "Backwards Blocking"])
# ISO
A.ISO.main <- mean(data$V3[data$trialType == "main" & data$objects == "A" & data$condition == "Indirect Screening-Off"])
B.ISO.main <- mean(data$V3[data$trialType == "main" & data$objects == "B" & data$condition == "Indirect Screening-Off"])
C.ISO.main <- mean(data$V3[data$trialType == "main" & data$objects == "C" & data$condition == "Indirect Screening-Off"])
A.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "A" & data$condition == "Indirect Screening-Off"])
B.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "B" & data$condition == "Indirect Screening-Off"])
C.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "C" & data$condition == "Indirect Screening-Off"])
D.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "D" & data$condition == "Indirect Screening-Off"])
E.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "E" & data$condition == "Indirect Screening-Off"])
# Combine all model predictions
model_predictions <- c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control,
D.BB.control, E.BB.control, A.ISO.main, B.ISO.main, C.ISO.main,
A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
# Assuming 'behavioral_data' is a pre-defined vector, you can perform the model comparison
res <- postResample(pred = model_predictions, obs = behavioral_data)
# Store the results in a data frame
result_row <- data.frame(RMSE = res$RMSE, MAE = res$MAE, FileNumber = file_number)
results <- rbind(results, result_row)
print(results)
}
folder_path <- "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files <- list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
results <- data.frame()  # Create an empty data frame to store results
for (file in files) {
data <- read.table(file, header = FALSE, stringsAsFactors = FALSE)
# Extract the file number using regular expressions
file_number <- as.numeric(gsub("[^0-9]", "", file))
# Create variable names based on the file number
data.control.bb <- data
data.control.bb$trialType <- rep("control", times = 1000)
data.control.bb$objects <- data.control.bb$V2
data.control.bb$condition <- rep("Backwards Blocking", times = 1000)
data.main.bb <- data
data.main.bb$trialType <- rep("main", times = 600)
data.main.bb$objects <- data.main.bb$V2
data.main.bb$condition <- rep("Backwards Blocking", times = 600)
data.control.iso <- data
data.control.iso$trialType <- rep("control", times = 1000)
data.control.iso$objects <- data.control.iso$V2
data.control.iso$condition <- rep("Indirect Screening-Off", times = 1000)
data.main.iso <- data
data.main.iso$trialType <- rep("main", times = 600)
data.main.iso$objects <- data.main.iso$V2
data.main.iso$condition <- rep("Indirect Screening-Off", times = 600)
data <- rbind(data.control.bb, data.main.bb, data.control.iso, data.main.iso)
# BB
A.BB.main <- mean(data$V3[data$trialType == "main" & data$objects == "A" & data$condition == "Backwards Blocking"])
B.BB.main <- mean(data$V3[data$trialType == "main" & data$objects == "B" & data$condition == "Backwards Blocking"])
C.BB.main <- mean(data$V3[data$trialType == "main" & data$objects == "C" & data$condition == "Backwards Blocking"])
A.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "A" & data$condition == "Backwards Blocking"])
B.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "B" & data$condition == "Backwards Blocking"])
C.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "C" & data$condition == "Backwards Blocking"])
D.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "D" & data$condition == "Backwards Blocking"])
E.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "E" & data$condition == "Backwards Blocking"])
# ISO
A.ISO.main <- mean(data$V3[data$trialType == "main" & data$objects == "A" & data$condition == "Indirect Screening-Off"])
B.ISO.main <- mean(data$V3[data$trialType == "main" & data$objects == "B" & data$condition == "Indirect Screening-Off"])
C.ISO.main <- mean(data$V3[data$trialType == "main" & data$objects == "C" & data$condition == "Indirect Screening-Off"])
A.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "A" & data$condition == "Indirect Screening-Off"])
B.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "B" & data$condition == "Indirect Screening-Off"])
C.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "C" & data$condition == "Indirect Screening-Off"])
D.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "D" & data$condition == "Indirect Screening-Off"])
E.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "E" & data$condition == "Indirect Screening-Off"])
# Combine all model predictions
model_predictions <- c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control,
D.BB.control, E.BB.control, A.ISO.main, B.ISO.main, C.ISO.main,
A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
# Assuming 'behavioral_data' is a pre-defined vector, you can perform the model comparison
res <- postResample(pred = model_predictions, obs = behavioral_data)
# Store the results in a data frame
result_row <- data.frame(RMSE = res$RMSE, MAE = res$MAE, FileNumber = file_number)
results <- rbind(results, result_row)
print(results)
}
folder_path <- "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files <- list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
results <- data.frame()  # Create an empty data frame to store results
for (file in files) {
data <- read.table(file, header = FALSE, stringsAsFactors = FALSE)
# Extract the file number using regular expressions
file_number <- as.numeric(gsub("[^0-9]", "", file))
# Create variable names based on the file number
data.control.bb <- data
data.control.bb$trialType <- rep("control", times = 1000)
data.control.bb$objects <- data.control.bb$V2
data.control.bb$condition <- rep("Backwards Blocking", times = 1000)
data.main.bb <- data
data.main.bb$trialType <- rep("main", times = 600)
data.main.bb$objects <- data.main.bb$V2
data.main.bb$condition <- rep("Backwards Blocking", times = 600)
data.control.iso <- data
data.control.iso$trialType <- rep("control", times = 1000)
data.control.iso$objects <- data.control.iso$V2
data.control.iso$condition <- rep("Indirect Screening-Off", times = 1000)
data.main.iso <- data
data.main.iso$trialType <- rep("main", times = 600)
data.main.iso$objects <- data.main.iso$V2
data.main.iso$condition <- rep("Indirect Screening-Off", times = 600)
data <- rbind(data.control.bb, data.main.bb, data.control.iso, data.main.iso)
# BB
A.BB.main <- mean(data$V3[data$trialType == "main" & data$objects == "A" & data$condition == "Backwards Blocking"])
B.BB.main <- mean(data$V3[data$trialType == "main" & data$objects == "B" & data$condition == "Backwards Blocking"])
C.BB.main <- mean(data$V3[data$trialType == "main" & data$objects == "C" & data$condition == "Backwards Blocking"])
A.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "A" & data$condition == "Backwards Blocking"])
B.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "B" & data$condition == "Backwards Blocking"])
C.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "C" & data$condition == "Backwards Blocking"])
D.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "D" & data$condition == "Backwards Blocking"])
E.BB.control <- mean(data$V3[data$trialType == "control" & data$objects == "E" & data$condition == "Backwards Blocking"])
# ISO
A.ISO.main <- mean(data$V3[data$trialType == "main" & data$objects == "A" & data$condition == "Indirect Screening-Off"])
B.ISO.main <- mean(data$V3[data$trialType == "main" & data$objects == "B" & data$condition == "Indirect Screening-Off"])
C.ISO.main <- mean(data$V3[data$trialType == "main" & data$objects == "C" & data$condition == "Indirect Screening-Off"])
A.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "A" & data$condition == "Indirect Screening-Off"])
B.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "B" & data$condition == "Indirect Screening-Off"])
C.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "C" & data$condition == "Indirect Screening-Off"])
D.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "D" & data$condition == "Indirect Screening-Off"])
E.ISO.control <- mean(data$V3[data$trialType == "control" & data$objects == "E" & data$condition == "Indirect Screening-Off"])
# Combine all model predictions
model_predictions <- c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control,
D.BB.control, E.BB.control, A.ISO.main, B.ISO.main, C.ISO.main,
A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
# Assuming 'behavioral_data' is a pre-defined vector, you can perform the model comparison
res <- postResample(pred = model_predictions, obs = behavioral_data)
# Store the results in a data frame
result_row <- data.frame(RMSE = res$RMSE, MAE = res$MAE, FileNumber = file_number)
results <- rbind(results, result_row)
print(results)
}
data.control.bb = read.table(path = folder_path, header = FALSE, stringsAsFactors = FALSE)
