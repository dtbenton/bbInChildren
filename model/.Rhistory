MyIntToBit = function(x, dig) {
i <- 0L
string <- numeric(dig)
while (x > 0) {
string[dig - i] <- x %% 2L
x <- x %/% 2L
i <- i + 1L
}
string
}
get_model_list = function(num_blickets) {
return(lapply(0:(2^num_blickets - 1), function(x) MyIntToBit(x, num_blickets)))
}
get_init_priors = function(L, p) {
mod_priors = c()
for (model in L) {
prior_prob = 1
for (spec in model) {
prior_prob = prior_prob*((1-p)^(1-spec))*(p^spec)
}
mod_priors = c(mod_priors, prior_prob)
}
return(mod_priors)
}
get_likelihoods = function(L, event) {
placements = event[1:length(event)-1]
outcome = event[length(event)]
likelihoods = c()
for (model in L) {
activation = 0
for (i in 1:length(placements)) {
if (placements[i]==1 & model[i]==1) {
activation = 1
}
}
likelihoods = c(likelihoods, activation==outcome)
}
return(likelihoods)
}
compute_two_posts = function(L, priors, event1, event2) {
likelihoods1 = get_likelihoods(L, event1)
likelihoods2 = get_likelihoods(L, event2)
numerators = likelihoods1*likelihoods2*priors
norm_term = sum(numerators)
return(numerators/norm_term)
}
get_blicket_probs = function(L, posts) {
blicket_probs = c()
for (i in 1:length(L[[1]])) {
prob = 0
for (j in 1:length(L)) {
prob = prob + L[[j]][i]*posts[j]
}
blicket_probs = c(blicket_probs, prob)
}
return(blicket_probs)
}
num_blickets = 2
L = get_model_list(num_blickets)
L
p = 0.5
priors = get_init_priors(L, p)
get_init_priors = function(L, p) {
mod_priors = c()
for (model in L) {
prior_prob = 1
for (spec in model) {
prior_prob = prior_prob*((1-p)^(1-spec))*(p^spec)
}
mod_priors = c(mod_priors, prior_prob)
}
return(mod_priors)
}
get_likelihoods = function(L, event) {
placements = event[1:length(event)-1]
outcome = event[length(event)]
likelihoods = c()
for (model in L) {
activation = 0
for (i in 1:length(placements)) {
if (placements[i]==1 & model[i]==1) {
activation = 1
}
}
likelihoods = c(likelihoods, activation==outcome)
}
return(likelihoods)
}
compute_two_posts = function(L, priors, event1, event2) {
likelihoods1 = get_likelihoods(L, event1)
likelihoods2 = get_likelihoods(L, event2)
numerators = likelihoods1*likelihoods2*priors
norm_term = sum(numerators)
return(numerators/norm_term)
}
get_blicket_probs = function(L, posts) {
blicket_probs = c()
for (i in 1:length(L[[1]])) {
prob = 0
for (j in 1:length(L)) {
prob = prob + L[[j]][i]*posts[j]
}
blicket_probs = c(blicket_probs, prob)
}
return(blicket_probs)
}
MyIntToBit = function(x, dig) {
i <- 0L
string <- numeric(dig)
while (x > 0) {
string[dig - i] <- x %% 2L
x <- x %/% 2L
i <- i + 1L
}
string
}
get_model_list = function(num_blickets) {
return(lapply(0:(2^num_blickets - 1), function(x) MyIntToBit(x, num_blickets)))
}
bayes_model_func = function(x,prob,event1,event2){
L = get_model_list(x) # x is the number of candidate causes
priors = get_init_priors(L, prob) # prob = probability that an object is a blicket
event1 = event1 #event1/event2 are lists, in which the first n elements correspond to the # of candidate causes and teh last element corresponds to
# whether the machine activates
event2 = event2
posts = compute_two_posts(L, priors, event1, event2)
blicket_probs = get_blicket_probs(L, posts)
print(blicket_probs)
}
bayes_model_func(5,.10,c(1,1,1,0,0,1),c(0,0,0,1,1,1))
bayes_model_func(3,.10,c(1,1,1,1),c(1,1,0,1))
bayes_model_func(5,.9,c(1,1,1,0,0,1),c(0,0,0,1,1,1))
bayes_model_func(3,.9,c(1,1,1,1),c(1,1,0,1))
bayes_model_func(3,.05,c(1,1,1,1),c(1,1,0,1))
bayes_model_func(5,.05,c(1,1,1,0,0,1),c(0,0,0,1,1,1))
library(lme4)
library(car)
simulate_data_mixed = function(n_subjects, effect_sizes, conditions) {
n_conditions = length(conditions)
#ID = c(1:(n_subjects*length(conditions)))
ID = rep(c(1:(n_subjects*length(conditions))), each = 8)
condition = rep(conditions, each = n_subjects)
# create objects variable
objects_vec = c("A","B","C","A","B","C","D","E")
objects = rep(objects_vec, each = 1, times = n_subjects*length(conditions))
# create trials variable
trials_vec = c(rep("Experimental",3),rep("Control",5))
trials = rep(trials_vec, times = n_subjects*length(conditions))
condition = rep(conditions, each = n_subjects)
# this pulls a random binary (0/1) number from the binomial distribution determined by the probability for
# a given condition; the first n numbers will be determined by the probability for the first condition;
# the second n numbers will be determined by the probability for the second condition, etc.
choice = as.factor(rbinom(n_subjects * n_conditions, 1, rep(effect_sizes[conditions], each = n_subjects)))
# create a dataframe that combines the variables
dat = data.frame(ID = ID, choice = choice, condition = factor(condition, levels = conditions),
object = as.factor(objects), trial = as.factor(trials))
return(dat)
}
df = simulate_data_mixed(32, c("10 percent"=0.10,"50 percent"=0.5, "90 percent"=0.90), c("10 percent", "50 percent", "90 percent"))
fix(df)
fix(df)
repConditions = c(rep(.9,2),rep(.1,1),rep(.5,3),rep(.56,2))
rep(repConditions, each = 32)
repConditions = c(rep(.9,2),rep(.1,1),rep(.5,3),rep(.56,2))
x = rep(repConditions, each = 32)
fix(x)
repConditions = c(rep(.9,2),rep(.1,1),rep(.5,3),rep(.56,2))
x = rep(repConditions, times = 32)
fix(x)
rm(list=ls())
library(lme4)
library(car)
simulate_data_mixed = function(n_subjects, effect_sizes, conditions) {
n_conditions = length(conditions) # 24
num = n_subjects*3 # n_subjects*3
# create objects variable
objects_vec = c("A","B","C","A","B","C","D","E")
objects = rep(objects_vec, each = 1, times = num)
# create trials variable
trials_vec = c(rep("Experimental",3), rep("Control",5))
trials = rep(trials_vec, times = num)
condition = rep(conditions, times = n_subjects)
#ID = c(1:(n_subjects * n_conditions))
ID = rep(c(1:num), each = length(objects_vec)) # n_subjects*3 * 8
# conditions is the main effect
# this pulls a random binary (0/1) number from the binomial distribution determined by the probability for
# a given condition; the first n numbers will be determined by the probability for the first condition;
# the second n numbers will be determined by the probability for the second condition, etc.
choice = as.factor(rbinom(n_subjects * n_conditions, 1,
rep(effect_sizes[conditions], each = n_subjects)))
# each repeats firstly, and then the next one
# create a dataframe that combines the variables
# dat = data.frame(ID = ID, choice = choice, condition = factor(condition, levels = conditions),
#                  object = as.factor(objects), trial = as.factor(trials))
dat = data.frame(ID = ID, choice = choice, condition =
factor(rep(c("10 percent", "50 percent", "90 percent"), each=8),
levels = c("10 percent", "50 percent", "90 percent")),
object = as.factor(objects), trial = as.factor(trials))
return(dat)
}
data = simulate_data_mixed(32,c("10 percent"=0.5263158, "50 percent"=0.6666667, "90 percent"=0.9090909),c("10 percent", "50 percent", "90 percent"))
fix(data)
fix(data)
run_mixed_analysis = function(data) {
model = glm(choice~(condition+object+trial)^3, family=binomial, data=data)
statistic = Anova(model)[[7,3]]
return(statistic)
}
summary(glm(choice~(condition+object+trial)^3, family=binomial, data=data))
odel = glm(choice~(condition+object+trial)^3, family=binomial, data=data)
model = glm(choice~(condition+object+trial)^3, family=binomial, data=data)
Anova(model)[[7,3]]
Anova(model)
library(lme4)
library(car)
simulate_data_mixed = function(n_subjects, effect_sizes, conditions) {
n_conditions = length(conditions) # 24
num = n_subjects*3 # n_subjects*3
# create objects variable
objects_vec = c("A","B","C","A","B","C","D","E")
objects = rep(objects_vec, each = 1, times = num)
# create trials variable
trials_vec = c(rep("Experimental",3), rep("Control",5))
trials = rep(trials_vec, times = num)
condition = rep(conditions, times = n_subjects)
#ID = c(1:(n_subjects * n_conditions))
ID = rep(c(1:num), each = length(objects_vec)) # n_subjects*3 * 8
# conditions is the main effect
# this pulls a random binary (0/1) number from the binomial distribution determined by the probability for
# a given condition; the first n numbers will be determined by the probability for the first condition;
# the second n numbers will be determined by the probability for the second condition, etc.
choice = as.factor(rbinom(n_subjects * n_conditions, 1,
rep(effect_sizes[conditions], each = n_subjects)))
# each repeats firstly, and then the next one
# create a dataframe that combines the variables
# dat = data.frame(ID = ID, choice = choice, condition = factor(condition, levels = conditions),
#                  object = as.factor(objects), trial = as.factor(trials))
dat = data.frame(ID = ID, choice = choice, condition =
factor(rep(c("10 percent", "50 percent", "90 percent"), each=8),
levels = c("10 percent", "50 percent", "90 percent")),
object = as.factor(objects), trial = as.factor(trials))
return(dat)
}
run_mixed_analysis = function(data) {
model = glm(choice~(condition+object+trial)^3, family=binomial, data=data)
statistic = Anova(model)[[7,3]]
return(statistic)
}
repeat_mixed_analysis = function(n_simulations, n_subjects, effect_size, condition, alpha) {
p.values = c()
for (i in 1 : n_simulations) {
data = simulate_data_mixed(n_subjects, effect_size, condition)
p.value = run_mixed_analysis(data)
p.values = c(p.values, p.value)
}
power = mean(p.values <= alpha)##############
return(list(power = power))
}
n_subjects_vec = seq(10, 15, 1)
n_sims = 1000
results = list()
effect_size_A_e = c("10 percent"=0.5263158, "50 percent"=0.6666667, "90 percent"=0.9090909)
effect_size_B_e = c("10 percent"=0.5263158, "50 percent"=0.6666667, "90 percent"=0.9090909)
effect_size_C_e = c("10 percent"=0.1000000, "50 percent"=0.5000000, "90 percent"=0.9000000)
effect_size_A_c = c("10 percent"=0.3690037, "50 percent"=0.5714286, "90 percent"=0.9009009)
effect_size_B_c = c("10 percent"=0.3690037, "50 percent"=0.5714286, "90 percent"=0.9009009)
effect_size_C_c = c("10 percent"=0.3690037, "50 percent"=0.5714286, "90 percent"=0.9009009)
effect_size_D_c = c("10 percent"=0.5263158, "50 percent"=0.6666667, "90 percent"=0.9090909)
effect_size_E_c = c("10 percent"=0.5263158, "50 percent"=0.6666667, "90 percent"=0.9090909)
effect_size_e = c("A"=effect_size_A_e, "B"=effect_size_B_e, "C"=effect_size_C_e)
effect_size_c = c("A"=effect_size_A_c, "B"=effect_size_B_c, "C"=effect_size_C_c, "D"=effect_size_D_c, "E"=effect_size_E_c)
effect_size = c("e"=effect_size_e, "c"=effect_size_c)
condition = c("e.A.10 percent", "e.B.10 percent", "e.C.10 percent",
"c.A.10 percent", "c.B.10 percent", "c.C.10 percent",
"c.D.10 percent", "c.E.10 percent",
"e.A.50 percent", "e.B.50 percent", "e.C.50 percent",
"c.A.50 percent", "c.B.50 percent", "c.C.50 percent",
"c.D.50 percent", "c.E.50 percent",
"e.A.90 percent", "e.B.90 percent", "e.C.90 percent",
"c.A.90 percent", "c.B.90 percent", "c.C.90 percent",
"c.D.90 percent", "c.E.90 percent")
for(i in n_subjects_vec) {
res = repeat_mixed_analysis(n_simulations = n_sims, alpha = 0.05, n_subjects = i,
effect_size = effect_size, condition = condition)
results[[paste("N=", i*3)]] = res
}
fix(results)
n_subjects_vec = seq(20, 50, 10)
n_sims = 1000
results = list()
effect_size_A_e = c("10 percent"=0.5263158, "50 percent"=0.6666667, "90 percent"=0.9090909)
effect_size_B_e = c("10 percent"=0.5263158, "50 percent"=0.6666667, "90 percent"=0.9090909)
effect_size_C_e = c("10 percent"=0.1000000, "50 percent"=0.5000000, "90 percent"=0.9000000)
effect_size_A_c = c("10 percent"=0.3690037, "50 percent"=0.5714286, "90 percent"=0.9009009)
effect_size_B_c = c("10 percent"=0.3690037, "50 percent"=0.5714286, "90 percent"=0.9009009)
effect_size_C_c = c("10 percent"=0.3690037, "50 percent"=0.5714286, "90 percent"=0.9009009)
effect_size_D_c = c("10 percent"=0.5263158, "50 percent"=0.6666667, "90 percent"=0.9090909)
effect_size_E_c = c("10 percent"=0.5263158, "50 percent"=0.6666667, "90 percent"=0.9090909)
effect_size_e = c("A"=effect_size_A_e, "B"=effect_size_B_e, "C"=effect_size_C_e)
effect_size_c = c("A"=effect_size_A_c, "B"=effect_size_B_c, "C"=effect_size_C_c, "D"=effect_size_D_c, "E"=effect_size_E_c)
effect_size = c("e"=effect_size_e, "c"=effect_size_c)
condition = c("e.A.10 percent", "e.B.10 percent", "e.C.10 percent",
"c.A.10 percent", "c.B.10 percent", "c.C.10 percent",
"c.D.10 percent", "c.E.10 percent",
"e.A.50 percent", "e.B.50 percent", "e.C.50 percent",
"c.A.50 percent", "c.B.50 percent", "c.C.50 percent",
"c.D.50 percent", "c.E.50 percent",
"e.A.90 percent", "e.B.90 percent", "e.C.90 percent",
"c.A.90 percent", "c.B.90 percent", "c.C.90 percent",
"c.D.90 percent", "c.E.90 percent")
for(i in n_subjects_vec) {
res = repeat_mixed_analysis(n_simulations = n_sims, alpha = 0.05, n_subjects = i,
effect_size = effect_size, condition = condition)
results[[paste("N=", i*3)]] = res
}
fix(results)
simulate_data_mixed = function(n_subjects, effect_sizes) {
n_conditions = length(conditions)
#ID = c(1:(n_subjects*length(conditions)))
ID = rep(c(1:(n_subjects*length(conditions))), each = 8)
cd = c("10 percent", "50 percent", "90 percent")
conditions = rep(cd, n_subjects*8)
# create objects variable
objects_vec = c("A","B","C","A","B","C","D","E")
objects = rep(objects_vec, each = 1, times = n_subjects*length(conditions))
# create trials variable
trials_vec = c(rep("Experimental",3),rep("Control",5))
trials = rep(trials_vec, times = n_subjects*length(conditions))
# this pulls a random binary (0/1) number from the binomial distribution determined by the probability for
# a given condition; the first n numbers will be determined by the probability for the first condition;
# the second n numbers will be determined by the probability for the second condition, etc.
choice = as.factor(rbinom(n_subjects*3*8, 1, rep(effect_sizes, each = n_subjects)))
# create a dataframe that combines the variables
dat = data.frame(ID = ID, choice = choice, condition = factor(conditions, levels = conditions),
object = as.factor(objects), trial = as.factor(trials))
return(dat)
}
data = simulate_data_mixed(32, c(.10, .50, .90))
simulate_data_mixed = function(n_subjects, effect_sizes) {
#ID = c(1:(n_subjects*length(conditions)))
ID = rep(c(1:(n_subjects*length(conditions))), each = 8)
cd = c("10 percent", "50 percent", "90 percent")
conditions = rep(cd, n_subjects*8)
# create objects variable
objects_vec = c("A","B","C","A","B","C","D","E")
objects = rep(objects_vec, each = 1, times = n_subjects*length(conditions))
# create trials variable
trials_vec = c(rep("Experimental",3),rep("Control",5))
trials = rep(trials_vec, times = n_subjects*length(conditions))
# this pulls a random binary (0/1) number from the binomial distribution determined by the probability for
# a given condition; the first n numbers will be determined by the probability for the first condition;
# the second n numbers will be determined by the probability for the second condition, etc.
choice = as.factor(rbinom(n_subjects*3*8, 1, rep(effect_sizes, each = n_subjects)))
# create a dataframe that combines the variables
dat = data.frame(ID = ID, choice = choice, condition = factor(conditions, levels = conditions),
object = as.factor(objects), trial = as.factor(trials))
return(dat)
}
data = simulate_data_mixed(32, c(.10, .50, .90))
simulate_data_mixed = function(n_subjects, effect_sizes) {
#ID = c(1:(n_subjects*length(conditions)))
cd = c("10 percent", "50 percent", "90 percent")
conditions = rep(cd, n_subjects*8)
ID = rep(c(1:(n_subjects*length(conditions))), each = 8)
# create objects variable
objects_vec = c("A","B","C","A","B","C","D","E")
objects = rep(objects_vec, each = 1, times = n_subjects*length(conditions))
# create trials variable
trials_vec = c(rep("Experimental",3),rep("Control",5))
trials = rep(trials_vec, times = n_subjects*length(conditions))
# this pulls a random binary (0/1) number from the binomial distribution determined by the probability for
# a given condition; the first n numbers will be determined by the probability for the first condition;
# the second n numbers will be determined by the probability for the second condition, etc.
choice = as.factor(rbinom(n_subjects*3*8, 1, rep(effect_sizes, each = n_subjects)))
# create a dataframe that combines the variables
dat = data.frame(ID = ID, choice = choice, condition = factor(conditions, levels = conditions),
object = as.factor(objects), trial = as.factor(trials))
return(dat)
}
data = simulate_data_mixed(32, c(.10, .50, .90))
simulate_data_mixed = function(n_subjects, effect_sizes) {
#ID = c(1:(n_subjects*length(conditions)))
cd = c("10 percent", "50 percent", "90 percent")
conditions = rep(cd, n_subjects*8)
ID = rep(c(1:(n_subjects*3)), each = 8)
# create objects variable
objects_vec = c("A","B","C","A","B","C","D","E")
objects = rep(objects_vec, each = 1, times = n_subjects*length(conditions))
# create trials variable
trials_vec = c(rep("Experimental",3),rep("Control",5))
trials = rep(trials_vec, times = n_subjects*length(conditions))
# this pulls a random binary (0/1) number from the binomial distribution determined by the probability for
# a given condition; the first n numbers will be determined by the probability for the first condition;
# the second n numbers will be determined by the probability for the second condition, etc.
choice = as.factor(rbinom(n_subjects*3*8, 1, rep(effect_sizes, each = n_subjects)))
# create a dataframe that combines the variables
dat = data.frame(ID = ID, choice = choice, condition = factor(conditions, levels = conditions),
object = as.factor(objects), trial = as.factor(trials))
return(dat)
}
data = simulate_data_mixed(32, c(.10, .50, .90))
simulate_data_mixed = function(n_subjects, effect_sizes, conditions) {
n_conditions = length(conditions)
#ID = c(1:(n_subjects*length(conditions)))
ID = rep(c(1:(n_subjects*length(conditions))), each = 8)
condition = rep(conditions, each = n_subjects)
# create objects variable
objects_vec = c("A","B","C","A","B","C","D","E")
objects = rep(objects_vec, each = 1, times = n_subjects*length(conditions))
# create trials variable
trials_vec = c(rep("Experimental",3),rep("Control",5))
trials = rep(trials_vec, times = n_subjects*length(conditions))
condition = rep(conditions, each = n_subjects)
# this pulls a random binary (0/1) number from the binomial distribution determined by the probability for
# a given condition; the first n numbers will be determined by the probability for the first condition;
# the second n numbers will be determined by the probability for the second condition, etc.
choice = as.factor(rbinom(n_subjects * n_conditions, 1, rep(effect_sizes[conditions], each = n_subjects)))
# create a dataframe that combines the variables
dat = data.frame(ID = ID, choice = choice, condition = factor(condition, levels = conditions),
object = as.factor(objects), trial = as.factor(trials))
return(dat)
}
simulate_data_mixed(32,c("10 percent"=0.10,"50 percent"=0.5, "90 percent"=0.90),c("10 percent", "50 percent", "90 percent"))
data = simulate_data_mixed(32,c("10 percent"=0.10,"50 percent"=0.5, "90 percent"=0.90),c("10 percent", "50 percent", "90 percent"))
fix(data)
fix(data)
rep(c(.7), each = 1)
condition_vec = c("10 percent", "50 percent", "90 percent")
condition = rep(condition_vec, each = n_subjects*length(objects_vec))
rep(c(1:(n_subjects*3)), each = 8)
rep(c(1:(32*3)), each = 8)
choice = as.factor(rbinom(n_subjects * n_conditions, 1, rep(effect_sizes[conditions], each = n_subjects)))
