# non-activated: 0
##############
## TRAINING ##
##############
sink('ABCplus.ex')
cat(paste("defI:-", "\n", sep=""))
cat(paste("defT:-", "\n", sep=""))
cat(paste(";", "\n", sep=""))
cat(paste("name: ABCplus", "\n", sep=""))
# INPUT
cat(paste("I:", "\n", sep="\t"))
# Object A
cat(paste("(A)", sep="\t"))
print(objects_full[1,], sep = "\t", quote = FALSE, row.names = FALSE)
# Object B
cat(paste("(B)", sep="\t"))
print(objects_full[1,], sep = "\t", quote = FALSE, row.names = FALSE)
# Object C
cat(paste("(C)", sep="\t"))
print(objects_full[1,], sep = "\t", quote = FALSE, row.names = FALSE)
# OUTPUT
cat(paste("T:", "\n", sep="\t"))
cat(paste("(Effect)", sep="\t"))
print(effect[2,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
sink()
# A plus
sink('Aplus.ex')
cat(paste("defI:-", "\n", sep=""))
cat(paste("defT:-", "\n", sep=""))
cat(paste(";", "\n", sep=""))
cat(paste("name: Aplus", "\n", sep=""))
# INPUT
cat(paste("I:", "\n", sep="\t"))
# Object A
cat(paste("(A)", sep="\t"))
print(objects_full[1,], sep = "\t", quote = FALSE, row.names = FALSE)
# OUTPUT
cat(paste("T:", "\n", sep="\t"))
cat(paste("(Effect)", sep="\t"))
print(effect[2,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
sink()
# A minus
sink('Aminus.ex')
cat(paste("defI:-", "\n", sep=""))
cat(paste("defT:-", "\n", sep=""))
cat(paste(";", "\n", sep=""))
cat(paste("name: Aminus", "\n", sep=""))
# INPUT
cat(paste("I:", "\n", sep="\t"))
# Object A
cat(paste("(A)", sep="\t"))
print(objects_full[1,], sep = "\t", quote = FALSE, row.names = FALSE)
# OUTPUT
cat(paste("T:", "\n", sep="\t"))
cat(paste("(Effect)", sep="\t"))
print(effect[1,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
sink()
# D plus
sink('Dplus.ex')
cat(paste("defI:-", "\n", sep=""))
cat(paste("defT:-", "\n", sep=""))
cat(paste(";", "\n", sep=""))
cat(paste("name: Dplus", "\n", sep=""))
# INPUT
cat(paste("I:", "\n", sep="\t"))
# Object A
cat(paste("(D)", sep="\t"))
print(objects_full[1,], sep = "\t", quote = FALSE, row.names = FALSE)
# OUTPUT
cat(paste("T:", "\n", sep="\t"))
cat(paste("(Effect)", sep="\t"))
print(effect[2,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
sink()
# D minus
sink('Dminus.ex')
cat(paste("defI:-", "\n", sep=""))
cat(paste("defT:-", "\n", sep=""))
cat(paste(";", "\n", sep=""))
cat(paste("name: Dminus", "\n", sep=""))
# INPUT
cat(paste("I:", "\n", sep="\t"))
# Object A
cat(paste("(D)", sep="\t"))
print(objects_full[1,], sep = "\t", quote = FALSE, row.names = FALSE)
# OUTPUT
cat(paste("T:", "\n", sep="\t"))
cat(paste("(Effect)", sep="\t"))
print(effect[1,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
sink()
# D nothing
sink('Dnothing.ex')
cat(paste("defI:-", "\n", sep=""))
cat(paste("defT:-", "\n", sep=""))
cat(paste(";", "\n", sep=""))
cat(paste("name: Dnothing", "\n", sep=""))
# INPUT
cat(paste("I:", "\n", sep="\t"))
# Object A
cat(paste("(D)", sep="\t"))
print(objects_full[1,], sep = "\t", quote = FALSE, row.names = FALSE)
# OUTPUT
cat(paste("T:", "\n", sep="\t"))
cat(paste("(Effect)", sep="\t"))
cat(paste(";", sep="\t"))
cat("\n")
sink()
##########
## TEST ##
##########
sink('experimentalTest.ex')
cat(paste("defI:-", "\n", sep=""))
cat(paste("defT:-", "\n", sep=""))
cat(paste(";", "\n", sep=""))
cat(paste("name: A", "\n", sep=""))
# INPUT
cat(paste("I:", "\n", sep="\t"))
# Object A
cat(paste("(A)", sep="\t"))
print(objects_full[1,], sep = "\t", quote = FALSE, row.names = FALSE)
# OUTPUT
cat(paste("T:", "\n", sep="\t"))
cat(paste("(Effect)", sep="\t"))
print(effect[2,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
cat(paste("name: B", "\n", sep=""))
# INPUT
cat(paste("I:", "\n", sep="\t"))
# Object A
cat(paste("(B)", sep="\t"))
print(objects_full[1,], sep = "\t", quote = FALSE, row.names = FALSE)
# OUTPUT
cat(paste("T:", "\n", sep="\t"))
cat(paste("(Effect)", sep="\t"))
print(effect[2,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
cat(paste("name: C", "\n", sep=""))
# INPUT
cat(paste("I:", "\n", sep="\t"))
# Object A
cat(paste("(C)", sep="\t"))
print(objects_full[1,], sep = "\t", quote = FALSE, row.names = FALSE)
# OUTPUT
cat(paste("T:", "\n", sep="\t"))
cat(paste("(Effect)", sep="\t"))
print(effect[2,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
sink()
sink('controlTest.ex')
cat(paste("defI:-", "\n", sep=""))
cat(paste("defT:-", "\n", sep=""))
cat(paste(";", "\n", sep=""))
cat(paste("name: A", "\n", sep=""))
# INPUT
cat(paste("I:", "\n", sep="\t"))
# Object A
cat(paste("(A)", sep="\t"))
print(objects_full[1,], sep = "\t", quote = FALSE, row.names = FALSE)
# OUTPUT
cat(paste("T:", "\n", sep="\t"))
cat(paste("(Effect)", sep="\t"))
print(effect[2,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
cat(paste("name: B", "\n", sep=""))
# INPUT
cat(paste("I:", "\n", sep="\t"))
# Object A
cat(paste("(B)", sep="\t"))
print(objects_full[1,], sep = "\t", quote = FALSE, row.names = FALSE)
# OUTPUT
cat(paste("T:", "\n", sep="\t"))
cat(paste("(Effect)", sep="\t"))
print(effect[2,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
cat(paste("name: C", "\n", sep=""))
# INPUT
cat(paste("I:", "\n", sep="\t"))
# Object A
cat(paste("(C)", sep="\t"))
print(objects_full[1,], sep = "\t", quote = FALSE, row.names = FALSE)
# OUTPUT
cat(paste("T:", "\n", sep="\t"))
cat(paste("(Effect)", sep="\t"))
print(effect[2,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
cat(paste("name: D", "\n", sep=""))
# INPUT
cat(paste("I:", "\n", sep="\t"))
# Object A
cat(paste("(D)", sep="\t"))
print(objects_full[1,], sep = "\t", quote = FALSE, row.names = FALSE)
# OUTPUT
cat(paste("T:", "\n", sep="\t"))
cat(paste("(Effect)", sep="\t"))
print(effect[2,], sep = "\t", quote = FALSE, row.names = FALSE)
cat(paste(";", sep="\t"))
cat("\n")
sink()
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(openxlsx)
library(Hmisc)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
dim(D)
1792/14
# add new columns
D$ID = rep(c(1:128), each = 14)
fix(D)
# remove unnecessary columns
names(D)
D$X = NULL
names(D)
fix(D)
# load data
D = read.csv(file.choose(), header = TRUE)
128+128
# add new columns
D$ID = rep(c(1:256), each = 14)
# remove unnecessary columns
names(D)
D$subcondition = factor(D$subcondition)
D$condition = D$condition
fix(D)
# convert variables that should be factors into factors
D$objects = factor(D$objects)
names(D)
######
# BB #
######
# [1] "ID"           "condition"    "subcondition" "objects"      "ratings"
# A
mean(D$ratings[D$condition=="BB" & D$objects=="A"])
dim(rep(c("experimental","control","experimental","control",
"control","control","experimental","experimental",
"experimental","experimental","control","control",
"control","experimental","control","experimental"), each = 1, times = 256))
length(rep(c("experimental","control","experimental","control",
"control","control","experimental","experimental",
"experimental","experimental","control","control",
"control","experimental","control","experimental"), each = 1, times = 256))
dim(D)
# load data
D = read.csv(file.choose(), header = TRUE)
# remove unnecessary columns
names(D)
D$objects = factor(D$objects)
D$subcondition = factor(D$subcondition)
D$condition = factor(D$condition)
D$trialType = factor(D$trialType)
fix(D)
######
# BB #
######
# [1] "ID"           "condition"    "subcondition" "objects"      "ratings"
# A
mean(D$ratings[D$condition=="BB" & D$objects=="A" & D$trialType=="Experimental"])
# B
mean(D$ratings[D$condition=="BB" & D$objects=="B" & D$trialType=="Experimental"])
sd(D$ratings[D$condition=="BB" & D$objects=="B" & D$trialType=="Experimental"])
# C
mean(D$ratings[D$condition=="BB" & D$objects=="C" & D$trialType=="Experimental"])
sd(D$ratings[D$condition=="BB" & D$objects=="C" & D$trialType=="Experimental"])
sd(D$ratings[D$condition=="BB" & D$objects=="D" & D$trialType=="Control"])
# C
mean(D$ratings[D$condition=="BB" & D$objects=="D" & D$trialType=="Control"])
# C
mean(D$ratings[D$condition=="BB" & D$objects=="C" & D$trialType=="Control"])
# B
mean(D$ratings[D$condition=="BB" & D$objects=="B" & D$trialType=="Control"])
# A
mean(D$ratings[D$condition=="BB" & D$objects=="A" & D$trialType=="Control"])
lme.fit.main = lme(ratings~condition,
random=~1|ID, data = D)
anova.lme(lme.fit.main)
lme.A.BB = lme(ratings[D$condition=="BB" & D$objects=="A"]~condition[D$condition=="BB" & D$objects=="A"],
random=~1|ID, data = D)
fix(D)
lme.A.BB = lme(ratings[D$condition=="BB" & D$objects=="A"]~trialType[D$condition=="BB" & D$objects=="A"],
random=~1|ID, data = D)
names(D)
lme.A.BB = lme(ratings[D$condition=="BB" & D$objects=="A"]~trialType[D$condition=="BB" & D$objects=="A"],
random=~1|ID, data = D)
fix(D)
lme.A.BB = lme(D$ratings[D$condition=="BB" & D$objects=="A"]~D$trialType[D$condition=="BB" & D$objects=="A"],
random=~1|ID, data = D)
lme.A.BB = lme(D$ratings[D$condition=="BB" & D$objects=="A"]~D$trialType[D$condition=="BB" & D$objects=="A"],
random=~1|ID[D$condition=="BB" & D$objects=="A"], data = D)
lme.A.BB = lme(D$ratings[D$condition=="BB" & D$objects=="A"]~D$trialType[D$condition=="BB" & D$objects=="A"],
random=~1|ID[D$condition=="BB" & D$objects=="A"], data = D[D$condition=="BB" & D$objects=="A"])
aov.A.BB = aov(D$ratings[D$condition=="BB" & D$objects=="A"]~D$trialType[D$condition=="BB" & D$objects=="A"],
data = D)
summary(aov.A.BB)
aov.A.BB = aov(D$ratings[D$trialType=="Experimental" & D$objects=="A"]~D$condition[D$trialType=="Experimental" & D$objects=="A"],
data = D)
summary(aov.A.BB)
aov.A.BB.ISO.exp = aov(D$ratings[D$trialType=="Experimental" & D$objects=="A"]~D$condition[D$trialType=="Experimental" & D$objects=="A"],
data = D)
summary(aov.A.BB.ISO.exp)
# BB A control
mean(D$ratings[D$condition=="BB" & D$objects=="A" & D$trialType=="Control"])
# BB A control
mean(D$ratings[D$condition=="ISO" & D$objects=="A" & D$trialType=="Control"])
# BB A experimental
mean(D$ratings[D$condition=="BB" & D$objects=="A" & D$trialType=="Experimental"])
# BB A control
mean(D$ratings[D$condition=="ISO" & D$objects=="A" & D$trialType=="Experimental"])
fix(D)
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(openxlsx)
library(Hmisc)
options(scipen=9999)
# load data
D = read.csv(file.choose(), header = TRUE)
# add new columns
D$ID = rep(c(1:256), each = 14)
D$objects = factor(D$objects)
D$subcondition = factor(D$subcondition)
D$condition = factor(D$condition)
D$trialType = factor(D$trialType)
aov.A.BB.ISO.exp = aov(D$ratings[D$trialType=="Experimental" & D$objects=="A"]~D$condition[D$trialType=="Experimental" & D$objects=="A"],
data = D)
summary(aov.A.BB.ISO.exp)
# BB A control
mean(D$ratings[D$condition=="ISO" & D$objects=="A" & D$trialType=="Experimental"])
aov.A.BB.ISO.ctrl = aov(D$ratings[D$trialType=="Control" & D$objects=="A"]~D$condition[D$trialType=="Control" & D$objects=="A"],
data = D)
summary(aov.A.BB.ISO.ctrl)
# D between BB and ISO control conditions #
aov.D.BB.ISO.ctrl = aov(D$ratings[D$trialType=="Control" & D$objects=="D"]~D$condition[D$trialType=="Control" & D$objects=="D"],
data = D)
summary(aov.D.BB.ISO.ctrl)
mean(D$ratings[D$condition=="BB" & D$objects=="A" & D$trialType=="Control"])
sd(D$ratings[D$condition=="BB" & D$objects=="A" & D$trialType=="Control"])
mean(D$ratings[D$condition=="ISO" & D$objects=="A" & D$trialType=="Control"])
sd(D$ratings[D$condition=="ISO" & D$objects=="A" & D$trialType=="Control"])
# BB D control
mean(D$ratings[D$condition=="BB" & D$objects=="D" & D$trialType=="Control"])
sd(D$ratings[D$condition=="BB" & D$objects=="D" & D$trialType=="Control"])
# ISO D control
mean(D$ratings[D$condition=="ISO" & D$objects=="D" & D$trialType=="Control"])
sd(D$ratings[D$condition=="ISO" & D$objects=="D" & D$trialType=="Control"])
fix(D)
fix(D)
aov.B.BB.exp.ctrl = aov(D$ratings[D$condition=="BB" & D$objects=="B"]~D$trialType[D$condition=="BB" & D$objects=="B"],
data = D)
summary(aov.B.BB.exp.ctrl)
aov.C.BB.exp.ctrl = aov(D$ratings[D$condition=="BB" & D$objects=="C"]~D$trialType[D$condition=="BB" & D$objects=="C"],
data = D)
summary(aov.C.BB.exp.ctrl)
aov.B.BB.IS.exp = aov(D$ratings[D$condition=="BB" & D$objects=="B" & D$trialType=="Experimental"]~D$condition[D$condition=="BB" & D$objects=="B" D$trialType=="Experimental"],
aov.B.BB.IS.exp = aov(D$ratings[D$objects=="B" & D$trialType=="Experimental"]~D$condition[D$objects=="B" D$trialType=="Experimental"],
aov.B.BB.IS.exp = aov(D$ratings[D$objects=="B" & D$trialType=="Experimental"]~D$condition[D$objects=="B" & D$trialType=="Experimental"],
data = D)
summary(aov.B.BB.IS.exp)
aov.C.BB.IS.exp = aov(D$ratings[D$objects=="B" & D$trialType=="Control"]~D$condition[D$objects=="B" & D$trialType=="Control"],
data = D)
summary(aov.C.BB.IS.exp)
aov.C.BB.IS.exp = aov(D$ratings[D$objects=="C" & D$trialType=="Experimental"]~D$condition[D$objects=="C" & D$trialType=="Experimental"],
data = D)
summary(aov.C.BB.IS.exp)
aov.B.BB.IS.ctrl = aov(D$ratings[D$objects=="B" & D$trialType=="Experimental"]~D$condition[D$objects=="B" & D$trialType=="Experimental"],
data = D)
summary(aov.B.BB.IS.ctrl)
aov.C.BB.IS.ctrl = aov(D$ratings[D$objects=="C" & D$trialType=="Control"]~D$condition[D$objects=="C" & D$trialType=="Control"],
data = D)
summary(aov.C.BB.IS.ctrl)
mean(D$ratings[D$condition=="BB" & D$trialType=="Experimental" & D$objects=="B"])
sd(D$ratings[D$condition=="BB" & D$trialType=="Experimental" & D$objects=="B"])
mean(D$ratings[D$condition=="ISO" & D$trialType=="Experimental" & D$objects=="B"])
sd(D$ratings[D$condition=="ISO" & D$trialType=="Experimental" & D$objects=="B"])
mean(D$ratings[D$condition=="BB" & D$trialType=="Experimental" & D$objects=="C"])
sd(D$ratings[D$condition=="BB" & D$trialType=="Experimental" & D$objects=="C"])
mean(D$ratings[D$condition=="ISO" & D$trialType=="Experimental" & D$objects=="C"])
sd(D$ratings[D$condition=="ISO" & D$trialType=="Experimental" & D$objects=="C"])
aov.B.BB.IS.ctrl = aov(D$ratings[D$objects=="B" & D$trialType=="Control"]~D$condition[D$objects=="B" & D$trialType=="Control"],
data = D)
summary(aov.B.BB.IS.ctrl)
mean(D$ratings[D$condition=="BB" & D$trialType=="Control" & D$objects=="B"])
sd(D$ratings[D$condition=="BB" & D$trialType=="Control" & D$objects=="B"])
mean(D$ratings[D$condition=="ISO" & D$trialType=="Control" & D$objects=="B"])
sd(D$ratings[D$condition=="ISO" & D$trialType=="Control" & D$objects=="B"])
condition_barplot = ggplot(D, aes(objects, ratings, fill=condition)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot
condition_barplot = ggplot(D, aes(objects, ratings, fill=condition)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge")
condition_barplot = ggplot(D, aes(objects, ratings, fill=condition)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Looking Time") + # change the label of the y-axis
facet_wrap(~trialType, ncol=2)
condition_barplot = ggplot(D, aes(objects, ratings, fill=condition)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Ratings") + # change the label of the y-axis
facet_wrap(~trialType, ncol=2) +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 1)) +
scale_fill_manual(values = c("azure3", "black"))
condition_barplot = ggplot(D, aes(condition, ratings, fill=objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Ratings")
condition_barplot = ggplot(D, aes(condition, ratings, fill=objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Ratings") + # change the label of the y-axis
facet_wrap(~trialType, ncol=2)
condition_barplot = ggplot(D, aes(condition, ratings, fill=objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Ratings") + # change the label of the y-axis
facet_wrap(~trialType, ncol=2) +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 1)) +
scale_fill_manual(values = c("azure3", "black")) +
labs(x = "Conditions") +
labs(fill="") +
theme_bw()
condition_barplot = ggplot(D, aes(condition, ratings, fill=objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Ratings") + # change the label of the y-axis
facet_wrap(~trialType, ncol=2) +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 1)) +
scale_fill_manual(values = c("azure3", "black")) +
labs(x = "Conditions")
condition_barplot = ggplot(D, aes(condition, ratings, fill=objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Ratings") + # change the label of the y-axis
facet_wrap(~trialType, ncol=2) +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 1)) +
labs(x = "Conditions") +
labs(fill="")
condition_barplot = ggplot(D, aes(condition, ratings, fill=objects)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Ratings") + # change the label of the y-axis
facet_wrap(~trialType, ncol=2) +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 1)) +
labs(x = "Conditions") +
labs(fill="") +
theme_bw()
condition_barplot = ggplot(D, aes(objects, ratings, fill=condition)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Ratings") + # change the label of the y-axis
facet_wrap(~trialType, ncol=2) +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 1)) +
labs(x = "Conditions") +
labs(fill="") +
theme_bw()
condition_barplot = ggplot(D, aes(objects, ratings, fill=trialType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Ratings") + # change the label of the y-axis
facet_wrap(~condition, ncol=2) +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 1)) +
labs(x = "Conditions") +
labs(fill="") +
theme_bw()
