C.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Backwards Blocking"])
A.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Backwards Blocking"])
D.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Backwards Blocking"])
E.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Backwards Blocking"])
# ISO
A.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
A.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
D.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Indirect Screening-Off"])
E.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Indirect Screening-Off"])
model_predictions <- c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control, D.BB.control, E.BB.control,
A.ISO.main, B.ISO.main, C.ISO.main, A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
# Assuming you have the `behavioral_data` variable defined somewhere
res <- postResample(pred = model_predictions, obs = behavioral_data)
results <- rbind(RMSE = res[["RMSE"]], MAE = res[["MAE"]])
print(results)
}
folder_path <- "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files <- list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
# Initialize a data frame to hold the results
results <- data.frame(RMSE = numeric(), MAE = numeric())
for (file in files) {
data <- read.table(file, header = FALSE, stringsAsFactors = FALSE)
data$condition <- rep(c("Backwards Blocking", "Indirect Screening-Off"), each = 1600)
data$objects <- data$V2
data$trialtype <- rep(c("main", "control", "main", "control"), times = c(600, 1000, 600, 1000))
# BB
A.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Backwards Blocking"])
A.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Backwards Blocking"])
D.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Backwards Blocking"])
E.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Backwards Blocking"])
# ISO
A.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
A.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
D.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Indirect Screening-Off"])
E.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Indirect Screening-Off"])
model_predictions <- c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control, D.BB.control, E.BB.control,
A.ISO.main, B.ISO.main, C.ISO.main, A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
# Assuming you have the `behavioral_data` variable defined somewhere
res <- postResample(pred = model_predictions, obs = behavioral_data)
results <- rbind(res[["RMSE"]], res[["MAE"]])
print(results)
}
folder_path <- "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files <- list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
# Initialize a data frame to hold the results
results <- data.frame(RMSE = numeric(), MAE = numeric())
for (file in files) {
data <- read.table(file, header = FALSE, stringsAsFactors = FALSE)
data$condition <- rep(c("Backwards Blocking", "Indirect Screening-Off"), each = 1600)
data$objects <- data$V2
data$trialtype <- rep(c("main", "control", "main", "control"), times = c(600, 1000, 600, 1000))
# BB
A.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Backwards Blocking"])
A.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Backwards Blocking"])
D.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Backwards Blocking"])
E.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Backwards Blocking"])
# ISO
A.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
A.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
D.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Indirect Screening-Off"])
E.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Indirect Screening-Off"])
model_predictions <- c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control, D.BB.control, E.BB.control,
A.ISO.main, B.ISO.main, C.ISO.main, A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
# Assuming you have the `behavioral_data` variable defined somewhere
res <- postResample(pred = model_predictions, obs = behavioral_data)
results <- rbind(RMSE = res[["RMSE"]], MAE = res[["MAE"]])
print(results)
}
folder_path <- "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files <- list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
# Initialize a data frame to hold the results
results <- data.frame(RMSE = numeric(), MAE = numeric())
for (file in files) {
data <- read.table(file, header = FALSE, stringsAsFactors = FALSE)
data$condition <- rep(c("Backwards Blocking", "Indirect Screening-Off"), each = 1600)
data$objects <- data$V2
data$trialtype <- rep(c("main", "control", "main", "control"), times = c(600, 1000, 600, 1000))
# BB
A.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Backwards Blocking"])
A.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Backwards Blocking"])
D.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Backwards Blocking"])
E.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Backwards Blocking"])
# ISO
A.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
A.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
D.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Indirect Screening-Off"])
E.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Indirect Screening-Off"])
model_predictions <- c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control, D.BB.control, E.BB.control,
A.ISO.main, B.ISO.main, C.ISO.main, A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
# Assuming you have the `behavioral_data` variable defined somewhere
res <- postResample(pred = model_predictions, obs = behavioral_data)
results <- cbind(RMSE = res[["RMSE"]], MAE = res[["MAE"]])
print(results)
}
folder_path <- "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files <- list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
# Initialize a data frame to hold the results
results <- data.frame(RMSE = numeric(), MAE = numeric())
for (file in files) {
data <- read.table(file, header = FALSE, stringsAsFactors = FALSE)
data$condition <- rep(c("Backwards Blocking", "Indirect Screening-Off"), each = 1600)
data$objects <- data$V2
data$trialtype <- rep(c("main", "control", "main", "control"), times = c(600, 1000, 600, 1000))
# BB
A.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Backwards Blocking"])
A.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Backwards Blocking"])
D.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Backwards Blocking"])
E.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Backwards Blocking"])
# ISO
A.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
A.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
D.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Indirect Screening-Off"])
E.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Indirect Screening-Off"])
model_predictions <- c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control, D.BB.control, E.BB.control,
A.ISO.main, B.ISO.main, C.ISO.main, A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
# Assuming you have the `behavioral_data` variable defined somewhere
res <- postResample(pred = model_predictions, obs = behavioral_data, cache = FALSE)
results <- cbind(RMSE = res[["RMSE"]], MAE = res[["MAE"]])
print(results)
}
library(nlme)
library(lme4)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(BFpack)
options(scipen=9999)
# DATA CLEAN UP AND RESTRUCTURING #
# load: exp2data.csv
D = read.csv(file.choose(), header = TRUE, stringsAsFactors = FALSE)
dim(D)
# remove unnecessary rows
D = D[c(1:64),]
# reshape dataframe from wide to long
D_tall =  reshape(D, varying = c(11:26), v.names = "measure",
timevar = "condition",   direction = "long")
D_tall = D_tall[order(D_tall$ID),] # order the data frame in terms of participant ID;
# to avoid wonky things happening and to save yourself
# a full-day headache in the future, reorder by ID
# immediately after reshaping the dataframe.
names(D_tall)
D_tall$id = NULL
names(D_tall)
D_tall$trialType = rep(c("control","control","control","control","control","control","control",
"control","control", "control","main","main",
"main","main","main","main"), times =64)
D_tall$testPhase = rep(c("first","first","first","first","first",
"second","second","second","second","second",
"first","first","first","second","second","second"), times = 64)
D_tall$objectType = rep(c("A","B","C","D","E",
"A","B","C","D","E",
"A","B","C",
"A","B","C"), times = 64)
D_tall$phaseOrder = rep(c("Phase 1","Phase 1","Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2","Phase 2","Phase 2",
"Phase 1","Phase 1","Phase 1",
"Phase 2","Phase 2","Phase 2"), times = 64)
# CHANGE SOME OF THE COLUMN NAMES
names(D_tall)
colnames(D_tall)[which(names(D_tall) == "AGE.Y.")] <- "AgeCat"
colnames(D_tall)[which(names(D_tall) == "AGE.M.")] <- "AgeNum"
colnames(D_tall)[which(names(D_tall) == "RACE")] <- "Race"
colnames(D_tall)[which(names(D_tall) == "SEX")] <- "Sex"
colnames(D_tall)[which(names(D_tall) == "BB.IS")] <- "Condition"
colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "SubCondition"
colnames(D_tall)[which(names(D_tall) == "VIDORDER")] <- "Vidorder"
colnames(D_tall)[which(names(D_tall) == "PRETEST")] <- "Pretest"
colnames(D_tall)[which(names(D_tall) == "measure")] <- "choice"
# remove more unnecessary columns
names(D_tall)
D_tall$CONDITION = NULL
D_tall$condition = NULL
# colnames(D_tall)[which(names(D_tall) == "SUBCONDITION")] <- "Subcondition"
names(D_tall)
# get counts for choice
table(D_tall$choice)
# RENAME LEVELS OF COLUMNS
D_tall$Condition = revalue(x = as.factor(D_tall$Condition),
c("0" = "Backwards Blocking", "1"="Indirect Screening-Off"))
D_tall$Sex = revalue(x = as.factor(D_tall$Sex),
c("F" = "Female", "M"="Male"))
# D_tall$Subcondition = revalue(x = as.factor(D_tall$Subcondition),
#                     c("0" = "A", "1"="B", "2"="C", "3"="D"))
D_tall$Vidorder = revalue(x = as.factor(D_tall$Vidorder),
c("0" = "LtoR", "1"="RtoL"))
D_tall$Pretest = revalue(x = as.factor(D_tall$Pretest),
c("0" = "Incorrect", "1"="Correct"))
D_tall$AgeCat = as.factor(D_tall$AgeCat)
D_tall$testPhase = as.factor(D_tall$testPhase)
D_tall$objectType = as.factor(D_tall$objectType)
D_tall$trialType = as.factor(D_tall$trialType)
D_tall$choice = as.numeric(D_tall$choice)
# REODRDER COLUMNS
names(D_tall)
D_tall$condition = NULL
names(D_tall)
dim(D_tall)
D_tall = as.data.frame(D_tall[,c(1:3,5,4,7,8,6,11:14,10,9)])
fix(D_tall)
# get the number of participants in each condition by age
table(D_tall$Condition)/16
table(D_tall$Condition[D_tall$AgeCat=="5"])/16
table(D_tall$Condition[D_tall$AgeCat=="6"])/16
# get the number of participants in each condition by sex
table(D_tall$Condition[D_tall$AgeCat=="5" & D_tall$Sex=="Male"])/16
table(D_tall$Condition[D_tall$AgeCat=="5" & D_tall$Sex=="Female"])/16
table(D_tall$Condition[D_tall$AgeCat=="6" & D_tall$Sex=="Male"])/16
table(D_tall$Condition[D_tall$AgeCat=="6" & D_tall$Sex=="Female"])/16
# mean ages and ranges
mean(D_tall$AgeNum[D_tall$AgeCat=="5"])
range(D_tall$AgeNum[D_tall$AgeCat=="5"])
sd(D_tall$AgeNum[D_tall$AgeCat=="5"])
mean(D_tall$AgeNum[D_tall$AgeCat=="6"])
range(D_tall$AgeNum[D_tall$AgeCat=="6"])
sd(D_tall$AgeNum[D_tall$AgeCat=="6"])
# demographics info
# asian
table(D_tall$Race)[[1]]/sum(table(D_tall$Race))
# black
table(D_tall$Race)[[2]]/sum(table(D_tall$Race))
# hispanic
table(D_tall$Race)[[3]]/sum(table(D_tall$Race))
# white
table(D_tall$Race)[[4]]/sum(table(D_tall$Race))
###################################
# Participant section information #
###################################
# 5 yos #
# number of males and females
table(D_tall$Sex[D_tall$AgeCat=="5"])/16
# 6 yos #
# number of males and females
table(D_tall$Sex[D_tall$AgeCat=="6"])/16
folder_path <- "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files <- list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
# Initialize a data frame to hold the results
results <- data.frame(RMSE = numeric(), MAE = numeric())
for (file in files) {
data <- read.table(file, header = FALSE, stringsAsFactors = FALSE)
data$condition <- rep(c("Backwards Blocking", "Indirect Screening-Off"), each = 1600)
data$objects <- data$V2
data$trialtype <- rep(c("main", "control", "main", "control"), times = c(600, 1000, 600, 1000))
# BB
A.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Backwards Blocking"])
A.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Backwards Blocking"])
D.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Backwards Blocking"])
E.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Backwards Blocking"])
# ISO
A.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
A.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
D.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Indirect Screening-Off"])
E.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Indirect Screening-Off"])
model_predictions <- c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control, D.BB.control, E.BB.control,
A.ISO.main, B.ISO.main, C.ISO.main, A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
# Assuming you have the `behavioral_data` variable defined somewhere
res <- postResample(pred = model_predictions, obs = behavioral_data)
results <- cbind(RMSE = res[["RMSE"]], MAE = res[["MAE"]])
print(results)
}
library(caret)
folder_path <- "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files <- list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
# Initialize a data frame to hold the results
results <- data.frame(RMSE = numeric(), MAE = numeric())
for (file in files) {
data <- read.table(file, header = FALSE, stringsAsFactors = FALSE)
data$condition <- rep(c("Backwards Blocking", "Indirect Screening-Off"), each = 1600)
data$objects <- data$V2
data$trialtype <- rep(c("main", "control", "main", "control"), times = c(600, 1000, 600, 1000))
# BB
A.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Backwards Blocking"])
A.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Backwards Blocking"])
D.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Backwards Blocking"])
E.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Backwards Blocking"])
# ISO
A.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
A.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
D.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Indirect Screening-Off"])
E.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Indirect Screening-Off"])
model_predictions <- c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control, D.BB.control, E.BB.control,
A.ISO.main, B.ISO.main, C.ISO.main, A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
# Assuming you have the `behavioral_data` variable defined somewhere
res <- postResample(pred = model_predictions, obs = behavioral_data)
results <- cbind(RMSE = res[["RMSE"]], MAE = res[["MAE"]])
print(results)
}
# create objects for the means of different objects across the BB and ISO conditions
# BB
A.main.bb = mean(D_tall$choice[D_tall$objectType=="A" & D_tall$trialType=="main" & D_tall$Condition=="Backwards Blocking"])
B.main.bb = mean(D_tall$choice[D_tall$objectType=="B" & D_tall$trialType=="main" & D_tall$Condition=="Backwards Blocking"])
C.main.bb = mean(D_tall$choice[D_tall$objectType=="C" & D_tall$trialType=="main" & D_tall$Condition=="Backwards Blocking"])
A.control.bb = mean(D_tall$choice[D_tall$objectType=="A" & D_tall$trialType=="control" & D_tall$Condition=="Backwards Blocking"])
B.control.bb = mean(D_tall$choice[D_tall$objectType=="B" & D_tall$trialType=="control" & D_tall$Condition=="Backwards Blocking"])
C.control.bb = mean(D_tall$choice[D_tall$objectType=="C" & D_tall$trialType=="control" & D_tall$Condition=="Backwards Blocking"])
D.control.bb = mean(D_tall$choice[D_tall$objectType=="D" & D_tall$trialType=="control" & D_tall$Condition=="Backwards Blocking"])
E.control.bb = mean(D_tall$choice[D_tall$objectType=="E" & D_tall$trialType=="control" & D_tall$Condition=="Backwards Blocking"])
# ISO
A.main.iso = mean(D_tall$choice[D_tall$objectType=="A" & D_tall$trialType=="main" & D_tall$Condition=="Indirect Screening-Off"])
B.main.iso = mean(D_tall$choice[D_tall$objectType=="B" & D_tall$trialType=="main" & D_tall$Condition=="Indirect Screening-Off"])
C.main.iso = mean(D_tall$choice[D_tall$objectType=="C" & D_tall$trialType=="main" & D_tall$Condition=="Indirect Screening-Off"])
A.control.iso = mean(D_tall$choice[D_tall$objectType=="A" & D_tall$trialType=="control" & D_tall$Condition=="Indirect Screening-Off"])
B.control.iso = mean(D_tall$choice[D_tall$objectType=="B" & D_tall$trialType=="control" & D_tall$Condition=="Indirect Screening-Off"])
C.control.iso = mean(D_tall$choice[D_tall$objectType=="C" & D_tall$trialType=="control" & D_tall$Condition=="Indirect Screening-Off"])
D.control.iso = mean(D_tall$choice[D_tall$objectType=="D" & D_tall$trialType=="control" & D_tall$Condition=="Indirect Screening-Off"])
E.control.iso = mean(D_tall$choice[D_tall$objectType=="E" & D_tall$trialType=="control" & D_tall$Condition=="Indirect Screening-Off"])
# create an object called 'behavioral_data' that stores the means across columns
behavioral_data = c(A.main.bb, B.main.bb, C.main.bb, A.control.bb, B.control.bb, C.control.bb, D.control.bb, E.control.bb,
A.main.iso, B.main.iso, C.main.iso, A.control.iso, B.control.iso, C.control.iso, D.control.iso, E.control.iso)
folder_path <- "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files <- list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
# Initialize a data frame to hold the results
results <- data.frame(RMSE = numeric(), MAE = numeric())
for (file in files) {
data <- read.table(file, header = FALSE, stringsAsFactors = FALSE)
data$condition <- rep(c("Backwards Blocking", "Indirect Screening-Off"), each = 1600)
data$objects <- data$V2
data$trialtype <- rep(c("main", "control", "main", "control"), times = c(600, 1000, 600, 1000))
# BB
A.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Backwards Blocking"])
A.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Backwards Blocking"])
D.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Backwards Blocking"])
E.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Backwards Blocking"])
# ISO
A.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
A.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
D.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Indirect Screening-Off"])
E.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Indirect Screening-Off"])
model_predictions <- c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control, D.BB.control, E.BB.control,
A.ISO.main, B.ISO.main, C.ISO.main, A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
# Assuming you have the `behavioral_data` variable defined somewhere
res <- postResample(pred = model_predictions, obs = behavioral_data)
results <- cbind(RMSE = res[["RMSE"]], MAE = res[["MAE"]])
print(results)
}
folder_path <- "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files <- list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
# Initialize a data frame to hold the results
results <- data.frame(RMSE = numeric(), MAE = numeric())
for (file in files) {
data <- read.table(file, header = FALSE, stringsAsFactors = FALSE)
data$condition <- rep(c("Backwards Blocking", "Indirect Screening-Off"), each = 1600)
data$objects <- data$V2
data$trialtype <- rep(c("main", "control", "main", "control"), times = c(600, 1000, 600, 1000))
# BB
A.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Backwards Blocking"])
A.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Backwards Blocking"])
D.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Backwards Blocking"])
E.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Backwards Blocking"])
# ISO
A.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
A.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
D.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Indirect Screening-Off"])
E.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Indirect Screening-Off"])
model_predictions <- c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control, D.BB.control, E.BB.control,
A.ISO.main, B.ISO.main, C.ISO.main, A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
# Assuming you have the `behavioral_data` variable defined somewhere
res <- postResample(pred = model_predictions, obs = behavioral_data)
results <- rbind(epoch_Number = file, RMSE = res[["RMSE"]], MAE = res[["MAE"]])
print(results)
}
folder_path <- "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files <- list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
# Initialize a data frame to hold the results
results <- data.frame(RMSE = numeric(), MAE = numeric())
for (file in files) {
data <- read.table(file, header = FALSE, stringsAsFactors = FALSE)
data$condition <- rep(c("Backwards Blocking", "Indirect Screening-Off"), each = 1600)
data$objects <- data$V2
data$trialtype <- rep(c("main", "control", "main", "control"), times = c(600, 1000, 600, 1000))
# BB
A.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Backwards Blocking"])
A.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Backwards Blocking"])
D.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Backwards Blocking"])
E.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Backwards Blocking"])
# ISO
A.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
A.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
D.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Indirect Screening-Off"])
E.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Indirect Screening-Off"])
model_predictions <- c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control, D.BB.control, E.BB.control,
A.ISO.main, B.ISO.main, C.ISO.main, A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
# Assuming you have the `behavioral_data` variable defined somewhere
res <- postResample(pred = model_predictions, obs = behavioral_data)
epoch_number <- tools::file_path_sans_ext(basename(file))
results <- rbind(epoch_number, RMSE = res[["RMSE"]], MAE = res[["MAE"]])
print(results)
}
folder_path <- "C:/Users/bentod2/Documents/projects/current/bbInChildren/model/NNModelWithRandomWeights/exp2/modelData"
files <- list.files(path = folder_path, pattern = ".txt", full.names = TRUE)
# Initialize a data frame to hold the results
results <- data.frame(RMSE = numeric(), MAE = numeric())
for (file in files) {
data <- read.table(file, header = FALSE, stringsAsFactors = FALSE)
data$condition <- rep(c("Backwards Blocking", "Indirect Screening-Off"), each = 1600)
data$objects <- data$V2
data$trialtype <- rep(c("main", "control", "main", "control"), times = c(600, 1000, 600, 1000))
# BB
A.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Backwards Blocking"])
A.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Backwards Blocking"])
B.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Backwards Blocking"])
C.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Backwards Blocking"])
D.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Backwards Blocking"])
E.BB.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Backwards Blocking"])
# ISO
A.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.main <- mean(data$V3[data$trialtype=="main" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
A.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="A" & data$condition=="Indirect Screening-Off"])
B.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="B" & data$condition=="Indirect Screening-Off"])
C.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="C" & data$condition=="Indirect Screening-Off"])
D.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="D" & data$condition=="Indirect Screening-Off"])
E.ISO.control <- mean(data$V3[data$trialtype=="control" & data$objects=="E" & data$condition=="Indirect Screening-Off"])
model_predictions <- c(A.BB.main, B.BB.main, C.BB.main, A.BB.control, B.BB.control, C.BB.control, D.BB.control, E.BB.control,
A.ISO.main, B.ISO.main, C.ISO.main, A.ISO.control, B.ISO.control, C.ISO.control, D.ISO.control, E.ISO.control)
# Assuming you have the `behavioral_data` variable defined somewhere
res <- postResample(pred = model_predictions, obs = behavioral_data)
epoch_number <- tools::file_path_sans_ext(basename(file))
results <- rbind(epoch_number, RMSE = res[["RMSE"]], MAE = res[["MAE"]])
print(results)
}
files
