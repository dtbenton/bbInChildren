# name of network
addNet bbModelSumSquared

# input groups
addGroup A 1 INPUT
addGroup B 1 INPUT
addGroup C 1 INPUT
addGroup D 1 INPUT

# output group
addGroup Effect 1 OUTPUT SUM_SQUARED



# connect groups (input -> output)
connectGroups {A B C D} Effect

# delete bias
deleteGroups bias

# training examples
loadExamples ABCplus.ex
loadExamples Aplus.ex
loadExamples Aminus.ex
loadExamples Dplus.ex
loadExamples Dminus.ex
loadExamples experimentalTest.ex
loadExamples controlTest.ex


# set learning and display parameters
setObj learningRate 0.05
setObj momentum	    0
setObj batchSize    0
setObj numUpdates   50
setObj reportInterval 1
setObj unitCellSize 20
setObj linkCellSize 10
setObj randRange 0.1
#randWeights -r 0.1
#randWeights -r .001



#resetPlot 
#plotRow 2 b 6 n Effect 1 
#plotRow 2 b 2 n A 4 b 2 n B 4 b 2 n C 4 b 2 n D 4
#drawUnits
#viewUnits



proc printActivation {group unit} { 
	format "%.3f " [getObj $unit.output] 
} 


proc saveActivations {fname groups} { 
    set outfile [open $fname a] 
    puts $outfile "[getObj currentExample.num] [getObj currentExample.name] " nonewline 
    printUnitValues -$outfile printActivation $groups 
    puts $outfile "\n" nonewline 
    close $outfile 
}

proc testAllFinalActs {fname groups} { 
    resetExampleSet [getObj testingSet.name] 
    set nex [getObj testingSet.numExamples] 
    for {set i 0} {$i < $nex} {incr i} {
	doExample -set [getObj testingSet.name]
	saveActivations $fname $groups
    }
}


proc testNetwork {n train trainNum train2 trainNum2 test train3 trainNum3 train4 trainNum4 test2 fname groups} {
	for {set i 0} {$i < $n} {incr i} {
			resetNet
			useTrainingSet $train
			train $trainNum
			useTrainingSet $train2
			train $trainNum2
			useTestingSet $test
			testAllFinalActs $fname $groups
			
			resetNet
			useTrainingSet $train3
			train $trainNum3
			useTrainingSet $train4
			train $trainNum4
			useTestingSet $test2
			testAllFinalActs $fname $groups
	}
}
set workingdirectory "C:/Users/dbenton2/Desktop/God Folder/publications/ongoing/2022-2023/bbInChildren/model/NNModelWithRandomWeights/exp1/modelData"
cd $workingdirectory

# define lists for looping
set condition [list BBexperimental BBcontrol ISOexperimental ISOcontrol]
set trainingEpochs [list 200 400 500 750 1000]
set elementalPhase [list Aplus Dplus Aminus Dminus]
set testPhase [list experimentalTest controlTest experimentalTest controlTest]


# define loop
foreach epoch $trainingEpochs { 
	foreach elemPhase $elementalPhase testEvent $testPhase {
	testNetwork 100 ABCplus $epoch $elemPhase $epoch $testEvent ABCplus $epoch $elemPhase $epoch $testEvent $epoch.txt Effect 
	}
}