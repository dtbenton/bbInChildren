# name of network
addNet bbModelSumSquared

# input groups
addGroup A 1 INPUT
addGroup B 1 INPUT
addGroup C 1 INPUT
addGroup D 1 INPUT

# output group
addGroup Effect 1 OUTPUT SUM_SQUARED



# connect groups (input -> output)
connectGroups {A B C D} Effect

# delete bias
deleteGroups bias

# training examples
loadExamples ABCplus.ex
loadExamples Aplus.ex
loadExamples Aminus.ex
loadExamples Dplus.ex
loadExamples Dminus.ex
loadExamples Dnothing.ex
loadExamples experimentalTest.ex
loadExamples controlTest.ex


# set learning and display parameters
setObj learningRate 0.05
setObj momentum	    0.9
setObj batchSize    0
setObj numUpdates   50
setObj reportInterval 1
setObj unitCellSize 20
setObj linkCellSize 10
#setObj randRange 0.00001
randWeights -r .01
#randWeights -r .001



resetPlot 
plotRow 2 b 6 n Effect 1 
plotRow 2 b 2 n A 4 b 2 n B 4 b 2 n C 4 b 2 n D 4
drawUnits
viewUnits



proc printActivation {group unit} { 
	format "%.3f " [getObj $unit.output] 
} 


proc saveActivations {fname groups} { 
    set outfile [open $fname a] 
    puts $outfile "[getObj currentExample.num] [getObj currentExample.name] " nonewline 
    printUnitValues -$outfile printActivation $groups 
    puts $outfile "\n" nonewline 
    close $outfile 
}

proc testAllFinalActs {fname groups} { 
    resetExampleSet [getObj testingSet.name] 
    set nex [getObj testingSet.numExamples] 
    for {set i 0} {$i < $nex} {incr i} {
	doExample -set [getObj testingSet.name]
	saveActivations $fname $groups
    }
}


proc testNetwork {n train trainNum train2 trainNum2 test1 train3 trainNum3 train4 trainNum4 test2 train5 trainNum5 train6 trainNum6 test3 train7 trainNum7 train8 trainNum8 test4 fname groups} {
	for {set i 0} {$i < $n} {incr i} {
			resetNet
			useTrainingSet $train
			train $trainNum
			useTrainingSet $train2
			train $trainNum2
			useTestingSet $test1
			testAllFinalActs $fname $groups
			
			resetNet
			useTrainingSet $train3
			train $trainNum3
			useTrainingSet $train4
			train $trainNum4
			useTestingSet $test2
			testAllFinalActs $fname $groups
			
			
			resetNet
			useTrainingSet $train5
			train $trainNum5
			useTrainingSet $train6
			train $trainNum6
			useTestingSet $test3
			testAllFinalActs $fname $groups
			
			
			resetNet
			useTrainingSet $train7
			train $trainNum7
			useTrainingSet $train8
			train $trainNum8
			useTestingSet $test4
			testAllFinalActs $fname $groups
				
	}
}


### BB condition command: ##

# CONDITION A: testNetwork 32 ABCplus 30 Aplus 30 experimentalTest ABCplus 30 Dplus 30 controlTest ABCplus 30 Aplus 30 experimentalTest ABCplus 30 Dplus 30 controlTest BBconditionSumSquaredConditionA.txt Effect

# CONDITION B: testNetwork 32 ABCplus 30 Dplus 30 controlTest ABCplus 30 Dplus 30 controlTest ABCplus 30 Aplus 30 experimentalTest ABCplus 30 Aplus 30 experimentalTest BBconditionSumSquaredConditionB.txt Effect

# CONDITION C: testNetwork 32 ABCplus 30 Aplus 30 experimentalTest ABCplus 30 Aplus 30 experimentalTest ABCplus 30 Dplus 30 controlTest ABCplus 30 Dplus 30 controlTest BBconditionSumSquaredConditionC.txt Effect

# CONDITION D: testNetwork 32 ABCplus 30 Dplus 30 controlTest ABCplus 30 Aplus 30 experimentalTest ABCplus 30 Dplus 30 controlTest ABCplus 30 Aplus 30 experimentalTest BBconditionSumSquaredConditionD.txt Effect


### ISO condition command: ###


# CONDITION A: testNetwork 32 ABCplus 30 Aminus 30 experimentalTest ABCplus 30 Dminus 30 controlTest ABCplus 30 Aminus 30 experimentalTest ABCplus 30 Dminus 30 controlTest ISOconditionSumSquaredConditionA.txt Effect

# CONDITION B: testNetwork 32 ABCplus 30 Dminus 30 controlTest ABCplus 30 Dminus 30 controlTest ABCplus 30 Aminus 30 experimentalTest ABCplus 30 Aminus 30 experimentalTest ISOconditionSumSquaredConditionB.txt Effect

# CONDITION C: testNetwork 32 ABCplus 30 Aminus 30 experimentalTest ABCplus 30 Aminus 30 experimentalTest ABCplus 30 Dminus 30 controlTest ABCplus 30 Dminus 30 controlTest ISOconditionSumSquaredConditionC.txt Effect

# CONDITION D: testNetwork 32 ABCplus 30 Dminus 30 controlTest ABCplus 30 Aminus 30 experimentalTest ABCplus 30 Dminus 30 controlTest ABCplus 30 Aminus 30 experimentalTest ISOconditionSumSquaredConditionD.txt Effect


testNetwork 32 ABCplus 30 Aplus 30 experimentalTest ABCplus 30 Dplus 30 controlTest ABCplus 30 Aplus 30 experimentalTest ABCplus 30 Dplus 30 controlTest BBconditionSumSquaredConditionA.txt Effect
testNetwork 32 ABCplus 30 Dplus 30 controlTest ABCplus 30 Dplus 30 controlTest ABCplus 30 Aplus 30 experimentalTest ABCplus 30 Aplus 30 experimentalTest BBconditionSumSquaredConditionB.txt Effect
testNetwork 32 ABCplus 30 Aplus 30 experimentalTest ABCplus 30 Aplus 30 experimentalTest ABCplus 30 Dplus 30 controlTest ABCplus 30 Dplus 30 controlTest BBconditionSumSquaredConditionC.txt Effect
testNetwork 32 ABCplus 30 Dplus 30 controlTest ABCplus 30 Aplus 30 experimentalTest ABCplus 30 Dplus 30 controlTest ABCplus 30 Aplus 30 experimentalTest BBconditionSumSquaredConditionD.txt Effect

testNetwork 32 ABCplus 30 Aminus 30 experimentalTest ABCplus 30 Dminus 30 controlTest ABCplus 30 Aminus 30 experimentalTest ABCplus 30 Dminus 30 controlTest ISOconditionSumSquaredConditionA.txt Effect
testNetwork 32 ABCplus 30 Dminus 30 controlTest ABCplus 30 Dminus 30 controlTest ABCplus 30 Aminus 30 experimentalTest ABCplus 30 Aminus 30 experimentalTest ISOconditionSumSquaredConditionB.txt Effect
testNetwork 32 ABCplus 30 Aminus 30 experimentalTest ABCplus 30 Aminus 30 experimentalTest ABCplus 30 Dminus 30 controlTest ABCplus 30 Dminus 30 controlTest ISOconditionSumSquaredConditionC.txt Effect
testNetwork 32 ABCplus 30 Dminus 30 controlTest ABCplus 30 Aminus 30 experimentalTest ABCplus 30 Dminus 30 controlTest ABCplus 30 Aminus 30 experimentalTest ISOconditionSumSquaredConditionD.txt Effect